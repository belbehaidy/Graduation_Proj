
Grad_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000062c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000174  00800060  000062c4  00006358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000076  008001d4  008001d4  000064cc  2**0
                  ALLOC
  3 .stab         00007044  00000000  00000000  000064cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000297c  00000000  00000000  0000d510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000fe8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  0001236c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  00013598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0001469c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  0001483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  00014b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001545c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__vector_1>
       8:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <__vector_2>
       c:	0c 94 a8 22 	jmp	0x4550	; 0x4550 <__vector_3>
      10:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__vector_4>
      14:	0c 94 f9 0f 	jmp	0x1ff2	; 0x1ff2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <__vector_7>
      20:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__vector_8>
      24:	0c 94 1e 1f 	jmp	0x3e3c	; 0x3e3c <__vector_9>
      28:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <__vector_10>
      2c:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e9 28 	jmp	0x51d2	; 0x51d2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3d       	cpi	r26, 0xD4	; 212
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ed       	ldi	r26, 0xD4	; 212
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 2c 	call	0x59ae	; 0x59ae <main>
      8a:	0c 94 60 31 	jmp	0x62c0	; 0x62c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 31 	jmp	0x6252	; 0x6252 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 31 	jmp	0x628a	; 0x628a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 31 	jmp	0x626a	; 0x626a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 31 	jmp	0x626a	; 0x626a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 31 	jmp	0x6252	; 0x6252 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 31 	jmp	0x628a	; 0x628a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 31 	jmp	0x6262	; 0x6262 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4d 31 	jmp	0x629a	; 0x629a <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 35 31 	jmp	0x626a	; 0x626a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 35 31 	jmp	0x626a	; 0x626a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 51 31 	jmp	0x62a2	; 0x62a2 <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 39 31 	jmp	0x6272	; 0x6272 <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 55 31 	jmp	0x62aa	; 0x62aa <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 31 31 	jmp	0x6262	; 0x6262 <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 4d 31 	jmp	0x629a	; 0x629a <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	e8 59       	subi	r30, 0x98	; 152
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <TMU_vidInit>:
static u8 TMU_u8Preload;

static u32 TMU_u32OsTicks;

void TMU_vidInit(void)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <TMU_vidInit+0x6>
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <TMU_vidInit+0x8>
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
	Timer_enuInit();
     ddc:	0e 94 4b 09 	call	0x1296	; 0x1296 <Timer_enuInit>
	Timer_enuSetClkPrescaler( TIMER_CHANNEL , PRES_1024 );
     de0:	88 ec       	ldi	r24, 0xC8	; 200
     de2:	61 e1       	ldi	r22, 0x11	; 17
     de4:	0e 94 23 0c 	call	0x1846	; 0x1846 <Timer_enuSetClkPrescaler>
	Timer_enuSetOCn_Mode( TIMER_CHANNEL , COMP_NORMAL );
     de8:	88 ec       	ldi	r24, 0xC8	; 200
     dea:	64 e1       	ldi	r22, 0x14	; 20
     dec:	0e 94 a8 0c 	call	0x1950	; 0x1950 <Timer_enuSetOCn_Mode>
		Timer_enuCallBack( OCIE2 , TMU_vid_OCIE2_ISR );
		Timer_enuInterruptEnable( OCIE2 );
	#endif

#elif ( OS_TICK <=150 ) && ( OS_TICK > 0 )
	u8 GCF = 16;
     df0:	80 e1       	ldi	r24, 0x10	; 16
     df2:	8d 83       	std	Y+5, r24	; 0x05
     df4:	0d c0       	rjmp	.+26     	; 0xe10 <TMU_vidInit+0x42>
	for (;GCF>0;GCF--)
		if (OS_TICK%GCF == 0)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	84 e1       	ldi	r24, 0x14	; 20
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	b9 01       	movw	r22, r18
     e02:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__divmodhi4>
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	31 f0       	breq	.+12     	; 0xe16 <TMU_vidInit+0x48>
		Timer_enuInterruptEnable( OCIE2 );
	#endif

#elif ( OS_TICK <=150 ) && ( OS_TICK > 0 )
	u8 GCF = 16;
	for (;GCF>0;GCF--)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	81 50       	subi	r24, 0x01	; 1
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	88 23       	and	r24, r24
     e14:	81 f7       	brne	.-32     	; 0xdf6 <TMU_vidInit+0x28>
		if (OS_TICK%GCF == 0)
			break;
	if (GCF > 4)
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	85 30       	cpi	r24, 0x05	; 5
     e1a:	d0 f1       	brcs	.+116    	; 0xe90 <TMU_vidInit+0xc2>
	{
		Timer_enuSetTimer_Mode( TIMER_CHANNEL , WGM_CTC_MODE );
     e1c:	88 ec       	ldi	r24, 0xC8	; 200
     e1e:	60 e2       	ldi	r22, 0x20	; 32
     e20:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <Timer_enuSetTimer_Mode>
		Timer_enuSetOCRnValue( TIMER_CHANNEL , (u8)((GCF * CPU_FREQ_KHZ )/ PRESCALER) ) ;
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a0 e0       	ldi	r26, 0x00	; 0
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	20 e8       	ldi	r18, 0x80	; 128
     e30:	3e e3       	ldi	r19, 0x3E	; 62
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 b5 30 	call	0x616a	; 0x616a <__mulsi3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	07 2e       	mov	r0, r23
     e44:	7a e0       	ldi	r23, 0x0A	; 10
     e46:	b6 95       	lsr	r27
     e48:	a7 95       	ror	r26
     e4a:	97 95       	ror	r25
     e4c:	87 95       	ror	r24
     e4e:	7a 95       	dec	r23
     e50:	d1 f7       	brne	.-12     	; 0xe46 <TMU_vidInit+0x78>
     e52:	70 2d       	mov	r23, r0
     e54:	98 2f       	mov	r25, r24
     e56:	88 ec       	ldi	r24, 0xC8	; 200
     e58:	69 2f       	mov	r22, r25
     e5a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <Timer_enuSetOCRnValue>
		TMU_u8ISRNum = (OS_TICK/GCF);
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	84 e1       	ldi	r24, 0x14	; 20
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	b9 01       	movw	r22, r18
     e6a:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__divmodhi4>
     e6e:	cb 01       	movw	r24, r22
     e70:	80 93 1c 02 	sts	0x021C, r24
		TMU_u8ISRCount = TMU_u8ISRNum;
     e74:	80 91 1c 02 	lds	r24, 0x021C
     e78:	80 93 1d 02 	sts	0x021D, r24
		#if TIMER_CHANNEL == TIMER0
			Timer_enuCallBack( OCIE0 , TMU_vid_OCIE0_ISR );
     e7c:	28 ef       	ldi	r18, 0xF8	; 248
     e7e:	38 e0       	ldi	r19, 0x08	; 8
     e80:	8d e3       	ldi	r24, 0x3D	; 61
     e82:	b9 01       	movw	r22, r18
     e84:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Timer_enuCallBack>
			Timer_enuInterruptEnable( OCIE0 );
     e88:	8d e3       	ldi	r24, 0x3D	; 61
     e8a:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <Timer_enuInterruptEnable>
     e8e:	31 c0       	rjmp	.+98     	; 0xef2 <TMU_vidInit+0x124>
			Timer_enuInterruptEnable( OCIE2 );
		#endif
	}
	else
	{
		Timer_enuSetTimer_Mode( TIMER_CHANNEL , WGM_NORMAL_MODE );
     e90:	88 ec       	ldi	r24, 0xC8	; 200
     e92:	6e e1       	ldi	r22, 0x1E	; 30
     e94:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <Timer_enuSetTimer_Mode>
		u32 Counts = (OS_TICK * CPU_FREQ_KHZ)/PRESCALER ;
     e98:	88 e3       	ldi	r24, 0x38	; 56
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	a0 e0       	ldi	r26, 0x00	; 0
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	ab 83       	std	Y+3, r26	; 0x03
     ea6:	bc 83       	std	Y+4, r27	; 0x04
		TMU_u8ISRNum = (Counts + TIMER_MAX)/( TIMER_MAX + 1 );
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	ab 81       	ldd	r26, Y+3	; 0x03
     eae:	bc 81       	ldd	r27, Y+4	; 0x04
     eb0:	81 50       	subi	r24, 0x01	; 1
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	af 4f       	sbci	r26, 0xFF	; 255
     eb6:	bf 4f       	sbci	r27, 0xFF	; 255
     eb8:	89 2f       	mov	r24, r25
     eba:	9a 2f       	mov	r25, r26
     ebc:	ab 2f       	mov	r26, r27
     ebe:	bb 27       	eor	r27, r27
     ec0:	80 93 1c 02 	sts	0x021C, r24
		TMU_u8ISRCount = TMU_u8ISRNum;
     ec4:	80 91 1c 02 	lds	r24, 0x021C
     ec8:	80 93 1d 02 	sts	0x021D, r24
		TMU_u8Preload = ( TIMER_MAX + 1 ) - ( Counts % ( TIMER_MAX + 1 ) );
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	81 95       	neg	r24
     ed0:	80 93 1e 02 	sts	0x021E, r24
		Timer_enuPreLoad( TIMER_CHANNEL , TMU_u8Preload );
     ed4:	90 91 1e 02 	lds	r25, 0x021E
     ed8:	88 ec       	ldi	r24, 0xC8	; 200
     eda:	69 2f       	mov	r22, r25
     edc:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <Timer_enuPreLoad>
		#if TIMER_CHANNEL == TIMER0
			Timer_enuCallBack( TOIE0 , TMU_vid_TOIE0_ISR );
     ee0:	2f e1       	ldi	r18, 0x1F	; 31
     ee2:	39 e0       	ldi	r19, 0x09	; 9
     ee4:	8c e3       	ldi	r24, 0x3C	; 60
     ee6:	b9 01       	movw	r22, r18
     ee8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <Timer_enuCallBack>
			Timer_enuInterruptEnable( TOIE0 );
     eec:	8c e3       	ldi	r24, 0x3C	; 60
     eee:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <Timer_enuInterruptEnable>
	}
#else
#error os tick value is invalid
#endif

}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	cf 91       	pop	r28
     efe:	df 91       	pop	r29
     f00:	08 95       	ret

00000f02 <TMU_vidCreateTask>:

void TMU_vidCreateTask( void( *Copy_pFunAppFun )( void* ) , void *Copy_pvidParameter, u8 Copy_u8Priority, u8 Copy_u8State ,u16 Copy_u16Periodicity  , u8 Copy_u8Offset)
{
     f02:	ef 92       	push	r14
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	29 97       	sbiw	r28, 0x09	; 9
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	7c 83       	std	Y+4, r23	; 0x04
     f22:	6b 83       	std	Y+3, r22	; 0x03
     f24:	4d 83       	std	Y+5, r20	; 0x05
     f26:	2e 83       	std	Y+6, r18	; 0x06
     f28:	18 87       	std	Y+8, r17	; 0x08
     f2a:	0f 83       	std	Y+7, r16	; 0x07
     f2c:	e9 86       	std	Y+9, r14	; 0x09
	if (Copy_pFunAppFun != NULL && Copy_u8Priority < MAX_TASKS)
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	09 f4       	brne	.+2      	; 0xf38 <TMU_vidCreateTask+0x36>
     f36:	52 c0       	rjmp	.+164    	; 0xfdc <TMU_vidCreateTask+0xda>
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	89 30       	cpi	r24, 0x09	; 9
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <TMU_vidCreateTask+0x3e>
     f3e:	4e c0       	rjmp	.+156    	; 0xfdc <TMU_vidCreateTask+0xda>
	{
		All_Tasks[ Copy_u8Priority ].pFun = Copy_pFunAppFun;
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	fc 01       	movw	r30, r24
     f54:	ec 52       	subi	r30, 0x2C	; 44
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	91 83       	std	Z+1, r25	; 0x01
     f5e:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].parameter = Copy_pvidParameter;
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	fc 01       	movw	r30, r24
     f76:	ec 52       	subi	r30, 0x2C	; 44
     f78:	fe 4f       	sbci	r31, 0xFE	; 254
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	9c 81       	ldd	r25, Y+4	; 0x04
     f7e:	91 83       	std	Z+1, r25	; 0x01
     f80:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].Periodicity = Copy_u16Periodicity;
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	fc 01       	movw	r30, r24
     f98:	ec 52       	subi	r30, 0x2C	; 44
     f9a:	fe 4f       	sbci	r31, 0xFE	; 254
     f9c:	8f 81       	ldd	r24, Y+7	; 0x07
     f9e:	98 85       	ldd	r25, Y+8	; 0x08
     fa0:	91 83       	std	Z+1, r25	; 0x01
     fa2:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].state = Copy_u8State;
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	fc 01       	movw	r30, r24
     fb8:	e6 52       	subi	r30, 0x26	; 38
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	8e 81       	ldd	r24, Y+6	; 0x06
     fbe:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].offset = Copy_u8Offset;
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	e5 52       	subi	r30, 0x25	; 37
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	80 83       	st	Z, r24
	}
}
     fdc:	29 96       	adiw	r28, 0x09	; 9
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ef 90       	pop	r14
     ff2:	08 95       	ret

00000ff4 <TMU_vidStartScheduler>:

void TMU_vidStartScheduler(void)
{
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	df 93       	push	r29
     ffe:	cf 93       	push	r28
    1000:	00 d0       	rcall	.+0      	; 0x1002 <TMU_vidStartScheduler+0xe>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <TMU_vidStartScheduler+0x10>
    1004:	0f 92       	push	r0
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32PrevTick = 0 ;
    100a:	1a 82       	std	Y+2, r1	; 0x02
    100c:	1b 82       	std	Y+3, r1	; 0x03
    100e:	1c 82       	std	Y+4, r1	; 0x04
    1010:	1d 82       	std	Y+5, r1	; 0x05
	_SEI_;
    1012:	78 94       	sei
	while(1)
	{
		if( TMU_u32OsTicks > Local_u32PrevTick )
    1014:	20 91 1f 02 	lds	r18, 0x021F
    1018:	30 91 20 02 	lds	r19, 0x0220
    101c:	40 91 21 02 	lds	r20, 0x0221
    1020:	50 91 22 02 	lds	r21, 0x0222
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	9b 81       	ldd	r25, Y+3	; 0x03
    1028:	ac 81       	ldd	r26, Y+4	; 0x04
    102a:	bd 81       	ldd	r27, Y+5	; 0x05
    102c:	82 17       	cp	r24, r18
    102e:	93 07       	cpc	r25, r19
    1030:	a4 07       	cpc	r26, r20
    1032:	b5 07       	cpc	r27, r21
    1034:	78 f7       	brcc	.-34     	; 0x1014 <TMU_vidStartScheduler+0x20>
		{
			Local_u32PrevTick = TMU_u32OsTicks;
    1036:	80 91 1f 02 	lds	r24, 0x021F
    103a:	90 91 20 02 	lds	r25, 0x0220
    103e:	a0 91 21 02 	lds	r26, 0x0221
    1042:	b0 91 22 02 	lds	r27, 0x0222
    1046:	8a 83       	std	Y+2, r24	; 0x02
    1048:	9b 83       	std	Y+3, r25	; 0x03
    104a:	ac 83       	std	Y+4, r26	; 0x04
    104c:	bd 83       	std	Y+5, r27	; 0x05
			for(s8 Local_s8ActiveTask = MAX_TASKS-1 ; Local_s8ActiveTask >= 0 ; Local_s8ActiveTask--)
    104e:	88 e0       	ldi	r24, 0x08	; 8
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	81 c0       	rjmp	.+258    	; 0x1156 <TMU_vidStartScheduler+0x162>
			{
				if(	( All_Tasks[Local_s8ActiveTask].state == READY )		&&
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	99 27       	eor	r25, r25
    1058:	87 fd       	sbrc	r24, 7
    105a:	90 95       	com	r25
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	fc 01       	movw	r30, r24
    106a:	e6 52       	subi	r30, 0x26	; 38
    106c:	fe 4f       	sbci	r31, 0xFE	; 254
    106e:	80 81       	ld	r24, Z
    1070:	87 31       	cpi	r24, 0x17	; 23
    1072:	09 f0       	breq	.+2      	; 0x1076 <TMU_vidStartScheduler+0x82>
    1074:	6d c0       	rjmp	.+218    	; 0x1150 <TMU_vidStartScheduler+0x15c>
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	99 27       	eor	r25, r25
    107a:	87 fd       	sbrc	r24, 7
    107c:	90 95       	com	r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	fc 01       	movw	r30, r24
    108c:	ec 52       	subi	r30, 0x2C	; 44
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	09 f4       	brne	.+2      	; 0x109a <TMU_vidStartScheduler+0xa6>
    1098:	5b c0       	rjmp	.+182    	; 0x1150 <TMU_vidStartScheduler+0x15c>
    109a:	e0 90 1f 02 	lds	r14, 0x021F
    109e:	f0 90 20 02 	lds	r15, 0x0220
    10a2:	00 91 21 02 	lds	r16, 0x0221
    10a6:	10 91 22 02 	lds	r17, 0x0222
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	99 27       	eor	r25, r25
    10ae:	87 fd       	sbrc	r24, 7
    10b0:	90 95       	com	r25
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	fc 01       	movw	r30, r24
    10c2:	ec 52       	subi	r30, 0x2C	; 44
    10c4:	fe 4f       	sbci	r31, 0xFE	; 254
    10c6:	80 81       	ld	r24, Z
    10c8:	91 81       	ldd	r25, Z+1	; 0x01
    10ca:	9c 01       	movw	r18, r24
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	c8 01       	movw	r24, r16
    10d2:	b7 01       	movw	r22, r14
    10d4:	0e 94 07 31 	call	0x620e	; 0x620e <__udivmodsi4>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9c 01       	movw	r18, r24
    10de:	ad 01       	movw	r20, r26
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	99 27       	eor	r25, r25
    10e4:	87 fd       	sbrc	r24, 7
    10e6:	90 95       	com	r25
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	fc 01       	movw	r30, r24
    10f6:	e5 52       	subi	r30, 0x25	; 37
    10f8:	fe 4f       	sbci	r31, 0xFE	; 254
    10fa:	80 81       	ld	r24, Z
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	4a 07       	cpc	r20, r26
    110a:	5b 07       	cpc	r21, r27
    110c:	09 f5       	brne	.+66     	; 0x1150 <TMU_vidStartScheduler+0x15c>
					( All_Tasks[Local_s8ActiveTask].pFun  != NULL )			&&
					( TMU_u32OsTicks % All_Tasks[Local_s8ActiveTask].Periodicity == All_Tasks[Local_s8ActiveTask].offset ) )
				{
					All_Tasks[Local_s8ActiveTask].pFun ( All_Tasks[Local_s8ActiveTask].parameter ) ;
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	99 27       	eor	r25, r25
    1112:	87 fd       	sbrc	r24, 7
    1114:	90 95       	com	r25
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	fc 01       	movw	r30, r24
    1124:	ec 52       	subi	r30, 0x2C	; 44
    1126:	fe 4f       	sbci	r31, 0xFE	; 254
    1128:	20 81       	ld	r18, Z
    112a:	31 81       	ldd	r19, Z+1	; 0x01
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	99 27       	eor	r25, r25
    1130:	87 fd       	sbrc	r24, 7
    1132:	90 95       	com	r25
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	fc 01       	movw	r30, r24
    1144:	ec 52       	subi	r30, 0x2C	; 44
    1146:	fe 4f       	sbci	r31, 0xFE	; 254
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	f9 01       	movw	r30, r18
    114e:	09 95       	icall
	while(1)
	{
		if( TMU_u32OsTicks > Local_u32PrevTick )
		{
			Local_u32PrevTick = TMU_u32OsTicks;
			for(s8 Local_s8ActiveTask = MAX_TASKS-1 ; Local_s8ActiveTask >= 0 ; Local_s8ActiveTask--)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	81 50       	subi	r24, 0x01	; 1
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	88 23       	and	r24, r24
    115a:	0c f0       	brlt	.+2      	; 0x115e <TMU_vidStartScheduler+0x16a>
    115c:	7b cf       	rjmp	.-266    	; 0x1054 <TMU_vidStartScheduler+0x60>
    115e:	5a cf       	rjmp	.-332    	; 0x1014 <TMU_vidStartScheduler+0x20>

00001160 <TMU_vidDeleteTask>:
	}
}


void TMU_vidDeleteTask(u8 Copy_u8Priority)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	0f 92       	push	r0
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01
//	All_Tasks[Copy_u8Priority].pFun = NULL;
	All_Tasks[ Copy_u8Priority].state = KILLED;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	fc 01       	movw	r30, r24
    1180:	e6 52       	subi	r30, 0x26	; 38
    1182:	fe 4f       	sbci	r31, 0xFE	; 254
    1184:	81 e1       	ldi	r24, 0x11	; 17
    1186:	80 83       	st	Z, r24
}
    1188:	0f 90       	pop	r0
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <TMU_vidPauseTask>:

void TMU_vidPauseTask(u8 Copy_u8Priority)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	0f 92       	push	r0
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	89 83       	std	Y+1, r24	; 0x01
	All_Tasks[Copy_u8Priority].state = PAUSED;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	fc 01       	movw	r30, r24
    11b0:	e6 52       	subi	r30, 0x26	; 38
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	88 e3       	ldi	r24, 0x38	; 56
    11b6:	80 83       	st	Z, r24
}
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <TMU_vidResumeTask>:

void TMU_vidResumeTask(u8 Copy_u8Priority)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	0f 92       	push	r0
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	89 83       	std	Y+1, r24	; 0x01
	All_Tasks[Copy_u8Priority].state = READY;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	fc 01       	movw	r30, r24
    11e0:	e6 52       	subi	r30, 0x26	; 38
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	87 e1       	ldi	r24, 0x17	; 23
    11e6:	80 83       	st	Z, r24
}
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <TMU_vid_OCIE0_ISR>:

#if TIMER_CHANNEL == TIMER0

void TMU_vid_OCIE0_ISR (void)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
    11f8:	80 91 1d 02 	lds	r24, 0x021D
    11fc:	81 50       	subi	r24, 0x01	; 1
    11fe:	80 93 1d 02 	sts	0x021D, r24
	if ( ! TMU_u8ISRCount)
    1202:	80 91 1d 02 	lds	r24, 0x021D
    1206:	88 23       	and	r24, r24
    1208:	b9 f4       	brne	.+46     	; 0x1238 <TMU_vid_OCIE0_ISR+0x48>
	{
		TMU_u32OsTicks++;
    120a:	80 91 1f 02 	lds	r24, 0x021F
    120e:	90 91 20 02 	lds	r25, 0x0220
    1212:	a0 91 21 02 	lds	r26, 0x0221
    1216:	b0 91 22 02 	lds	r27, 0x0222
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	a1 1d       	adc	r26, r1
    121e:	b1 1d       	adc	r27, r1
    1220:	80 93 1f 02 	sts	0x021F, r24
    1224:	90 93 20 02 	sts	0x0220, r25
    1228:	a0 93 21 02 	sts	0x0221, r26
    122c:	b0 93 22 02 	sts	0x0222, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
    1230:	80 91 1c 02 	lds	r24, 0x021C
    1234:	80 93 1d 02 	sts	0x021D, r24
	}
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <TMU_vid_TOIE0_ISR>:

void TMU_vid_TOIE0_ISR(void)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
    1246:	80 91 1d 02 	lds	r24, 0x021D
    124a:	81 50       	subi	r24, 0x01	; 1
    124c:	80 93 1d 02 	sts	0x021D, r24
	if ( ! TMU_u8ISRCount)
    1250:	80 91 1d 02 	lds	r24, 0x021D
    1254:	88 23       	and	r24, r24
    1256:	e1 f4       	brne	.+56     	; 0x1290 <TMU_vid_TOIE0_ISR+0x52>
	{
		TCNT0 = TMU_u8Preload;
    1258:	e2 e5       	ldi	r30, 0x52	; 82
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 91 1e 02 	lds	r24, 0x021E
    1260:	80 83       	st	Z, r24

		TMU_u32OsTicks++;
    1262:	80 91 1f 02 	lds	r24, 0x021F
    1266:	90 91 20 02 	lds	r25, 0x0220
    126a:	a0 91 21 02 	lds	r26, 0x0221
    126e:	b0 91 22 02 	lds	r27, 0x0222
    1272:	01 96       	adiw	r24, 0x01	; 1
    1274:	a1 1d       	adc	r26, r1
    1276:	b1 1d       	adc	r27, r1
    1278:	80 93 1f 02 	sts	0x021F, r24
    127c:	90 93 20 02 	sts	0x0220, r25
    1280:	a0 93 21 02 	sts	0x0221, r26
    1284:	b0 93 22 02 	sts	0x0222, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
    1288:	80 91 1c 02 	lds	r24, 0x021C
    128c:	80 93 1d 02 	sts	0x021D, r24
	}
}
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <Timer_enuInit>:
																		{ OCIE2 ,	NULL},
																	};


ES_t Timer_enuInit( void )
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	28 97       	sbiw	r28, 0x08	; 8
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ClkSelect ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    12ae:	19 82       	std	Y+1, r1	; 0x01
    12b0:	72 c1       	rjmp	.+740    	; 0x1596 <Timer_enuInit+0x300>
	{
		Global_u32Timer0_Clk = Timer_u32TimerClock( Timers[Local_u8Iter].TimerNum , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	c9 01       	movw	r24, r18
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	82 0f       	add	r24, r18
    12c4:	93 1f       	adc	r25, r19
    12c6:	fc 01       	movw	r30, r24
    12c8:	e5 59       	subi	r30, 0x95	; 149
    12ca:	fe 4f       	sbci	r31, 0xFE	; 254
    12cc:	40 81       	ld	r20, Z
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	c9 01       	movw	r24, r18
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	82 0f       	add	r24, r18
    12e0:	93 1f       	adc	r25, r19
    12e2:	fc 01       	movw	r30, r24
    12e4:	e4 59       	subi	r30, 0x94	; 148
    12e6:	fe 4f       	sbci	r31, 0xFE	; 254
    12e8:	90 81       	ld	r25, Z
    12ea:	9e 01       	movw	r18, r28
    12ec:	2d 5f       	subi	r18, 0xFD	; 253
    12ee:	3f 4f       	sbci	r19, 0xFF	; 255
    12f0:	84 2f       	mov	r24, r20
    12f2:	69 2f       	mov	r22, r25
    12f4:	a9 01       	movw	r20, r18
    12f6:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <Timer_u32TimerClock>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	80 93 25 02 	sts	0x0225, r24
    1302:	90 93 26 02 	sts	0x0226, r25
    1306:	a0 93 27 02 	sts	0x0227, r26
    130a:	b0 93 28 02 	sts	0x0228, r27
		if( Timers[Local_u8Iter].TimerNum == TIMER0)
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	c9 01       	movw	r24, r18
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	fc 01       	movw	r30, r24
    1324:	e5 59       	subi	r30, 0x95	; 149
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	80 81       	ld	r24, Z
    132a:	88 3c       	cpi	r24, 0xC8	; 200
    132c:	09 f0       	breq	.+2      	; 0x1330 <Timer_enuInit+0x9a>
    132e:	8e c0       	rjmp	.+284    	; 0x144c <Timer_enuInit+0x1b6>
		{
			TIMSK &= ~( TC0_INT_EN_MASK ) ;			// Disable All Interrupts before setting all conditions
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8c 7f       	andi	r24, 0xFC	; 252
    133c:	8c 93       	st	X, r24
			TCCR0 = 0x00 ;							// Masks all bits in TCCR0
    133e:	e3 e5       	ldi	r30, 0x53	; 83
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	10 82       	st	Z, r1
			OCR0  = 0x00 ;							// Clears Output Compare Register
    1344:	ec e5       	ldi	r30, 0x5C	; 92
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	10 82       	st	Z, r1
			/*	Set Clock Selection	*/
//			Global_u32Timer0_Clk = Timer_u32TimerClock( TIMER0 , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
			TCCR0 |= ( Local_u8ClkSelect  << CLK0_SEL_BITS );
    134a:	a3 e5       	ldi	r26, 0x53	; 83
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e3 e5       	ldi	r30, 0x53	; 83
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	90 81       	ld	r25, Z
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	89 2b       	or	r24, r25
    1358:	8c 93       	st	X, r24
			/*	Set Compare Output Mode	*/
			TCCR0 |= ( ( Timers[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COMP0_MAT_OUT_MODE_BITS );
    135a:	a3 e5       	ldi	r26, 0x53	; 83
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e3 e5       	ldi	r30, 0x53	; 83
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	48 2f       	mov	r20, r24
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	c9 01       	movw	r24, r18
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	82 0f       	add	r24, r18
    1378:	93 1f       	adc	r25, r19
    137a:	fc 01       	movw	r30, r24
    137c:	e3 59       	subi	r30, 0x93	; 147
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	80 81       	ld	r24, Z
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	44 97       	sbiw	r24, 0x14	; 20
    1388:	82 95       	swap	r24
    138a:	92 95       	swap	r25
    138c:	90 7f       	andi	r25, 0xF0	; 240
    138e:	98 27       	eor	r25, r24
    1390:	80 7f       	andi	r24, 0xF0	; 240
    1392:	98 27       	eor	r25, r24
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
			/*	Set Waveform Generation Mode	*/
			if( Timers[Local_u8Iter].WaveGenMode == WGM_NORMAL_MODE	)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	c9 01       	movw	r24, r18
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	82 0f       	add	r24, r18
    13aa:	93 1f       	adc	r25, r19
    13ac:	fc 01       	movw	r30, r24
    13ae:	e2 59       	subi	r30, 0x92	; 146
    13b0:	fe 4f       	sbci	r31, 0xFE	; 254
    13b2:	80 81       	ld	r24, Z
    13b4:	8e 31       	cpi	r24, 0x1E	; 30
    13b6:	d1 f0       	breq	.+52     	; 0x13ec <Timer_enuInit+0x156>
			{
				//NO ACTION NEEDED
			}
			else if( Timers[Local_u8Iter].WaveGenMode == WGM_CTC_MODE )
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	c9 01       	movw	r24, r18
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	fc 01       	movw	r30, r24
    13ce:	e2 59       	subi	r30, 0x92	; 146
    13d0:	fe 4f       	sbci	r31, 0xFE	; 254
    13d2:	80 81       	ld	r24, Z
    13d4:	80 32       	cpi	r24, 0x20	; 32
    13d6:	41 f4       	brne	.+16     	; 0x13e8 <Timer_enuInit+0x152>
			{
				SET_BIT( TCCR0 , WGM01_BIT ) ;
    13d8:	a3 e5       	ldi	r26, 0x53	; 83
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e3 e5       	ldi	r30, 0x53	; 83
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 60       	ori	r24, 0x08	; 8
    13e4:	8c 93       	st	X, r24
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <Timer_enuInit+0x156>
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	8a 83       	std	Y+2, r24	; 0x02
				#warning "Timer_Init(): Non Supported Waveform Gen mode for Timer0. Timer0 WGM is set to WGM_NORMAL_MODE"
			}
			/*	Set Interrupt Mode	*/
			switch( Timers[Local_u8Iter].InterruptMode )
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	c9 01       	movw	r24, r18
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	fc 01       	movw	r30, r24
    1402:	e1 59       	subi	r30, 0x91	; 145
    1404:	fe 4f       	sbci	r31, 0xFE	; 254
    1406:	80 81       	ld	r24, Z
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	38 87       	std	Y+8, r19	; 0x08
    140e:	2f 83       	std	Y+7, r18	; 0x07
    1410:	8f 81       	ldd	r24, Y+7	; 0x07
    1412:	98 85       	ldd	r25, Y+8	; 0x08
    1414:	89 32       	cpi	r24, 0x29	; 41
    1416:	91 05       	cpc	r25, r1
    1418:	31 f0       	breq	.+12     	; 0x1426 <Timer_enuInit+0x190>
    141a:	2f 81       	ldd	r18, Y+7	; 0x07
    141c:	38 85       	ldd	r19, Y+8	; 0x08
    141e:	2a 32       	cpi	r18, 0x2A	; 42
    1420:	31 05       	cpc	r19, r1
    1422:	49 f0       	breq	.+18     	; 0x1436 <Timer_enuInit+0x1a0>
    1424:	10 c0       	rjmp	.+32     	; 0x1446 <Timer_enuInit+0x1b0>
			{
				case TC_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE0_BIT );	/*	Enable TOIE0 Interrupt */
    1426:	a9 e5       	ldi	r26, 0x59	; 89
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e9 e5       	ldi	r30, 0x59	; 89
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	81 60       	ori	r24, 0x01	; 1
    1432:	8c 93       	st	X, r24
    1434:	ad c0       	rjmp	.+346    	; 0x1590 <Timer_enuInit+0x2fa>
											break;
				case TC_OUT_COMP_INT	:	SET_BIT( TIMSK , OCIE0_BIT );	/*	Enable OCIE0 Interrupt */
    1436:	a9 e5       	ldi	r26, 0x59	; 89
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e9 e5       	ldi	r30, 0x59	; 89
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	8c 93       	st	X, r24
    1444:	a5 c0       	rjmp	.+330    	; 0x1590 <Timer_enuInit+0x2fa>
											break;

				default :	Local_enuErrorState = ES_OUT_RANGE ;
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	8a 83       	std	Y+2, r24	; 0x02
    144a:	a2 c0       	rjmp	.+324    	; 0x1590 <Timer_enuInit+0x2fa>
							#warning " Timer_Init(): Non Supported Interrupt mode for Timer0. Timer0 Interrupts are Disabled"
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else if( Timers[Local_u8Iter].TimerNum == TIMER2)
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	c9 01       	movw	r24, r18
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	82 0f       	add	r24, r18
    145e:	93 1f       	adc	r25, r19
    1460:	fc 01       	movw	r30, r24
    1462:	e5 59       	subi	r30, 0x95	; 149
    1464:	fe 4f       	sbci	r31, 0xFE	; 254
    1466:	80 81       	ld	r24, Z
    1468:	8b 3c       	cpi	r24, 0xCB	; 203
    146a:	09 f0       	breq	.+2      	; 0x146e <Timer_enuInit+0x1d8>
    146c:	8e c0       	rjmp	.+284    	; 0x158a <Timer_enuInit+0x2f4>
		{
			TIMSK &= ~( TC2_INT_EN_MASK ) ;			// Disable All Interrupts before setting all conditions
    146e:	a9 e5       	ldi	r26, 0x59	; 89
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e9 e5       	ldi	r30, 0x59	; 89
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8f 73       	andi	r24, 0x3F	; 63
    147a:	8c 93       	st	X, r24
			TCCR2 = 0x00 ;							// Masks all bits in TCCR2
    147c:	e5 e4       	ldi	r30, 0x45	; 69
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	10 82       	st	Z, r1
			OCR2  = 0x00 ;							// Clears Output Compare Register
    1482:	e3 e4       	ldi	r30, 0x43	; 67
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	10 82       	st	Z, r1

			/*	Set Clock Selection	*/
//			Global_u32Timer2_Clk = Timer_u32TimerClock( TIMER2 , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
			TCCR2 |= ( Local_u8ClkSelect << CLK2_SEL_BITS );
    1488:	a5 e4       	ldi	r26, 0x45	; 69
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e5 e4       	ldi	r30, 0x45	; 69
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	90 81       	ld	r25, Z
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	89 2b       	or	r24, r25
    1496:	8c 93       	st	X, r24
			/*	Set Compare Output Mode	*/
			TCCR2 |= ( ( Timers[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COMP2_MAT_OUT_MODE_BITS );
    1498:	a5 e4       	ldi	r26, 0x45	; 69
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e5 e4       	ldi	r30, 0x45	; 69
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	c9 01       	movw	r24, r18
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	82 0f       	add	r24, r18
    14b6:	93 1f       	adc	r25, r19
    14b8:	fc 01       	movw	r30, r24
    14ba:	e3 59       	subi	r30, 0x93	; 147
    14bc:	fe 4f       	sbci	r31, 0xFE	; 254
    14be:	80 81       	ld	r24, Z
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	44 97       	sbiw	r24, 0x14	; 20
    14c6:	82 95       	swap	r24
    14c8:	92 95       	swap	r25
    14ca:	90 7f       	andi	r25, 0xF0	; 240
    14cc:	98 27       	eor	r25, r24
    14ce:	80 7f       	andi	r24, 0xF0	; 240
    14d0:	98 27       	eor	r25, r24
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
			/*	Set Waveform Generation Mode	*/
			if( Timers[Local_u8Iter].WaveGenMode == WGM_NORMAL_MODE )
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	c9 01       	movw	r24, r18
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	82 0f       	add	r24, r18
    14e8:	93 1f       	adc	r25, r19
    14ea:	fc 01       	movw	r30, r24
    14ec:	e2 59       	subi	r30, 0x92	; 146
    14ee:	fe 4f       	sbci	r31, 0xFE	; 254
    14f0:	80 81       	ld	r24, Z
    14f2:	8e 31       	cpi	r24, 0x1E	; 30
    14f4:	d1 f0       	breq	.+52     	; 0x152a <Timer_enuInit+0x294>
			{
				// NO ACTION NEEDED
			}
			else if(Timers[Local_u8Iter].WaveGenMode == WGM_CTC_MODE )
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	c9 01       	movw	r24, r18
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	fc 01       	movw	r30, r24
    150c:	e2 59       	subi	r30, 0x92	; 146
    150e:	fe 4f       	sbci	r31, 0xFE	; 254
    1510:	80 81       	ld	r24, Z
    1512:	80 32       	cpi	r24, 0x20	; 32
    1514:	41 f4       	brne	.+16     	; 0x1526 <Timer_enuInit+0x290>
			{
				SET_BIT( TCCR2 , WGM21_BIT ) ;
    1516:	a5 e4       	ldi	r26, 0x45	; 69
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e5 e4       	ldi	r30, 0x45	; 69
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	88 60       	ori	r24, 0x08	; 8
    1522:	8c 93       	st	X, r24
    1524:	02 c0       	rjmp	.+4      	; 0x152a <Timer_enuInit+0x294>
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    1526:	82 e0       	ldi	r24, 0x02	; 2
    1528:	8a 83       	std	Y+2, r24	; 0x02
				#warning "Timer_Init(): Non Supported Waveform Gen mode for Timer2. Timer2 WGM is set to WGM_NORMAL_MODE"
			}
			/*	Set Interrupt Mode	*/
			switch( Timers[Local_u8Iter].InterruptMode )
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	c9 01       	movw	r24, r18
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	82 0f       	add	r24, r18
    153c:	93 1f       	adc	r25, r19
    153e:	fc 01       	movw	r30, r24
    1540:	e1 59       	subi	r30, 0x91	; 145
    1542:	fe 4f       	sbci	r31, 0xFE	; 254
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3e 83       	std	Y+6, r19	; 0x06
    154c:	2d 83       	std	Y+5, r18	; 0x05
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	89 32       	cpi	r24, 0x29	; 41
    1554:	91 05       	cpc	r25, r1
    1556:	31 f0       	breq	.+12     	; 0x1564 <Timer_enuInit+0x2ce>
    1558:	2d 81       	ldd	r18, Y+5	; 0x05
    155a:	3e 81       	ldd	r19, Y+6	; 0x06
    155c:	2a 32       	cpi	r18, 0x2A	; 42
    155e:	31 05       	cpc	r19, r1
    1560:	49 f0       	breq	.+18     	; 0x1574 <Timer_enuInit+0x2de>
    1562:	10 c0       	rjmp	.+32     	; 0x1584 <Timer_enuInit+0x2ee>
			{
				case TC_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE2_BIT );	/*	Enable TOIE2 Interrupt */
    1564:	a9 e5       	ldi	r26, 0x59	; 89
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e9 e5       	ldi	r30, 0x59	; 89
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	80 64       	ori	r24, 0x40	; 64
    1570:	8c 93       	st	X, r24
    1572:	0e c0       	rjmp	.+28     	; 0x1590 <Timer_enuInit+0x2fa>
											break;
				case TC_OUT_COMP_INT	:	SET_BIT( TIMSK , OCIE2_BIT );	/*	Enable OCIE2 Interrupt */
    1574:	a9 e5       	ldi	r26, 0x59	; 89
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e9 e5       	ldi	r30, 0x59	; 89
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	80 68       	ori	r24, 0x80	; 128
    1580:	8c 93       	st	X, r24
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <Timer_enuInit+0x2fa>
											break;

				default :	Local_enuErrorState = ES_OUT_RANGE ;
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	8a 83       	std	Y+2, r24	; 0x02
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <Timer_enuInit+0x2fa>
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE ;
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	8a 83       	std	Y+2, r24	; 0x02
    158e:	09 c0       	rjmp	.+18     	; 0x15a2 <Timer_enuInit+0x30c>
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	90 91 68 01 	lds	r25, 0x0168
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	89 17       	cp	r24, r25
    159e:	08 f4       	brcc	.+2      	; 0x15a2 <Timer_enuInit+0x30c>
    15a0:	88 ce       	rjmp	.-752    	; 0x12b2 <Timer_enuInit+0x1c>
			#warning " Timer_Init(): Non Supported Timer Number , Initialization is terminated."
			break;
		}
	}

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	19 f0       	breq	.+6      	; 0x15ae <Timer_enuInit+0x318>
    15a8:	3a 81       	ldd	r19, Y+2	; 0x02
    15aa:	3c 83       	std	Y+4, r19	; 0x04
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <Timer_enuInit+0x31a>
    15ae:	1c 82       	std	Y+4, r1	; 0x04
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15b2:	28 96       	adiw	r28, 0x08	; 8
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <Timer_u32TimerClock>:

static u32 Timer_u32TimerClock( u8 Copy_u8TimerNum ,u8 Copy_u8ClkSelectNum ,u8 *Copy_pu8ClkSelectPrescalar )
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	2a 97       	sbiw	r28, 0x0a	; 10
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	6e 83       	std	Y+6, r22	; 0x06
    15dc:	58 87       	std	Y+8, r21	; 0x08
    15de:	4f 83       	std	Y+7, r20	; 0x07
	u32 Copy_u32TimerClk = CPU_CLOCK;
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	94 e2       	ldi	r25, 0x24	; 36
    15e4:	a4 ef       	ldi	r26, 0xF4	; 244
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	9a 83       	std	Y+2, r25	; 0x02
    15ec:	ab 83       	std	Y+3, r26	; 0x03
    15ee:	bc 83       	std	Y+4, r27	; 0x04


	switch( Copy_u8ClkSelectNum )
    15f0:	8e 81       	ldd	r24, Y+6	; 0x06
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3a 87       	std	Y+10, r19	; 0x0a
    15f8:	29 87       	std	Y+9, r18	; 0x09
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fe:	8e 30       	cpi	r24, 0x0E	; 14
    1600:	91 05       	cpc	r25, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <Timer_u32TimerClock+0x42>
    1604:	81 c0       	rjmp	.+258    	; 0x1708 <Timer_u32TimerClock+0x144>
    1606:	29 85       	ldd	r18, Y+9	; 0x09
    1608:	3a 85       	ldd	r19, Y+10	; 0x0a
    160a:	2f 30       	cpi	r18, 0x0F	; 15
    160c:	31 05       	cpc	r19, r1
    160e:	ec f4       	brge	.+58     	; 0x164a <Timer_u32TimerClock+0x86>
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	8b 30       	cpi	r24, 0x0B	; 11
    1616:	91 05       	cpc	r25, r1
    1618:	09 f4       	brne	.+2      	; 0x161c <Timer_u32TimerClock+0x58>
    161a:	44 c0       	rjmp	.+136    	; 0x16a4 <Timer_u32TimerClock+0xe0>
    161c:	29 85       	ldd	r18, Y+9	; 0x09
    161e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1620:	2c 30       	cpi	r18, 0x0C	; 12
    1622:	31 05       	cpc	r19, r1
    1624:	34 f4       	brge	.+12     	; 0x1632 <Timer_u32TimerClock+0x6e>
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	8a 30       	cpi	r24, 0x0A	; 10
    162c:	91 05       	cpc	r25, r1
    162e:	91 f1       	breq	.+100    	; 0x1694 <Timer_u32TimerClock+0xd0>
    1630:	f7 c0       	rjmp	.+494    	; 0x1820 <Timer_u32TimerClock+0x25c>
    1632:	29 85       	ldd	r18, Y+9	; 0x09
    1634:	3a 85       	ldd	r19, Y+10	; 0x0a
    1636:	2c 30       	cpi	r18, 0x0C	; 12
    1638:	31 05       	cpc	r19, r1
    163a:	c9 f1       	breq	.+114    	; 0x16ae <Timer_u32TimerClock+0xea>
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1640:	8d 30       	cpi	r24, 0x0D	; 13
    1642:	91 05       	cpc	r25, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <Timer_u32TimerClock+0x84>
    1646:	48 c0       	rjmp	.+144    	; 0x16d8 <Timer_u32TimerClock+0x114>
    1648:	eb c0       	rjmp	.+470    	; 0x1820 <Timer_u32TimerClock+0x25c>
    164a:	29 85       	ldd	r18, Y+9	; 0x09
    164c:	3a 85       	ldd	r19, Y+10	; 0x0a
    164e:	21 31       	cpi	r18, 0x11	; 17
    1650:	31 05       	cpc	r19, r1
    1652:	09 f4       	brne	.+2      	; 0x1656 <Timer_u32TimerClock+0x92>
    1654:	a7 c0       	rjmp	.+334    	; 0x17a4 <Timer_u32TimerClock+0x1e0>
    1656:	89 85       	ldd	r24, Y+9	; 0x09
    1658:	9a 85       	ldd	r25, Y+10	; 0x0a
    165a:	82 31       	cpi	r24, 0x12	; 18
    165c:	91 05       	cpc	r25, r1
    165e:	6c f4       	brge	.+26     	; 0x167a <Timer_u32TimerClock+0xb6>
    1660:	29 85       	ldd	r18, Y+9	; 0x09
    1662:	3a 85       	ldd	r19, Y+10	; 0x0a
    1664:	2f 30       	cpi	r18, 0x0F	; 15
    1666:	31 05       	cpc	r19, r1
    1668:	09 f4       	brne	.+2      	; 0x166c <Timer_u32TimerClock+0xa8>
    166a:	6b c0       	rjmp	.+214    	; 0x1742 <Timer_u32TimerClock+0x17e>
    166c:	89 85       	ldd	r24, Y+9	; 0x09
    166e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1670:	80 31       	cpi	r24, 0x10	; 16
    1672:	91 05       	cpc	r25, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <Timer_u32TimerClock+0xb4>
    1676:	7d c0       	rjmp	.+250    	; 0x1772 <Timer_u32TimerClock+0x1ae>
    1678:	d3 c0       	rjmp	.+422    	; 0x1820 <Timer_u32TimerClock+0x25c>
    167a:	29 85       	ldd	r18, Y+9	; 0x09
    167c:	3a 85       	ldd	r19, Y+10	; 0x0a
    167e:	22 31       	cpi	r18, 0x12	; 18
    1680:	31 05       	cpc	r19, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <Timer_u32TimerClock+0xc2>
    1684:	ad c0       	rjmp	.+346    	; 0x17e0 <Timer_u32TimerClock+0x21c>
    1686:	89 85       	ldd	r24, Y+9	; 0x09
    1688:	9a 85       	ldd	r25, Y+10	; 0x0a
    168a:	83 31       	cpi	r24, 0x13	; 19
    168c:	91 05       	cpc	r25, r1
    168e:	09 f4       	brne	.+2      	; 0x1692 <Timer_u32TimerClock+0xce>
    1690:	b7 c0       	rjmp	.+366    	; 0x1800 <Timer_u32TimerClock+0x23c>
    1692:	c6 c0       	rjmp	.+396    	; 0x1820 <Timer_u32TimerClock+0x25c>
	{
		case NO_CLK		:	*Copy_pu8ClkSelectPrescalar = 0;
    1694:	ef 81       	ldd	r30, Y+7	; 0x07
    1696:	f8 85       	ldd	r31, Y+8	; 0x08
    1698:	10 82       	st	Z, r1
							Copy_u32TimerClk = 0 ;
    169a:	19 82       	std	Y+1, r1	; 0x01
    169c:	1a 82       	std	Y+2, r1	; 0x02
    169e:	1b 82       	std	Y+3, r1	; 0x03
    16a0:	1c 82       	std	Y+4, r1	; 0x04
    16a2:	c2 c0       	rjmp	.+388    	; 0x1828 <Timer_u32TimerClock+0x264>
							break;
		case PRES_1		:	*Copy_pu8ClkSelectPrescalar = 1;
    16a4:	ef 81       	ldd	r30, Y+7	; 0x07
    16a6:	f8 85       	ldd	r31, Y+8	; 0x08
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 83       	st	Z, r24
    16ac:	bd c0       	rjmp	.+378    	; 0x1828 <Timer_u32TimerClock+0x264>
						break;
		case PRES_8 	:	*Copy_pu8ClkSelectPrescalar = 2;
    16ae:	ef 81       	ldd	r30, Y+7	; 0x07
    16b0:	f8 85       	ldd	r31, Y+8	; 0x08
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	80 83       	st	Z, r24
							Copy_u32TimerClk >>= 3 ;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	ab 81       	ldd	r26, Y+3	; 0x03
    16bc:	bc 81       	ldd	r27, Y+4	; 0x04
    16be:	68 94       	set
    16c0:	12 f8       	bld	r1, 2
    16c2:	b6 95       	lsr	r27
    16c4:	a7 95       	ror	r26
    16c6:	97 95       	ror	r25
    16c8:	87 95       	ror	r24
    16ca:	16 94       	lsr	r1
    16cc:	d1 f7       	brne	.-12     	; 0x16c2 <Timer_u32TimerClock+0xfe>
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	ab 83       	std	Y+3, r26	; 0x03
    16d4:	bc 83       	std	Y+4, r27	; 0x04
    16d6:	a8 c0       	rjmp	.+336    	; 0x1828 <Timer_u32TimerClock+0x264>
						break;
		case PRES_32 	:	if( Copy_u8TimerNum == TIMER2 )
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	8b 3c       	cpi	r24, 0xCB	; 203
    16dc:	a9 f4       	brne	.+42     	; 0x1708 <Timer_u32TimerClock+0x144>
							{
								*Copy_pu8ClkSelectPrescalar = 3;
    16de:	ef 81       	ldd	r30, Y+7	; 0x07
    16e0:	f8 85       	ldd	r31, Y+8	; 0x08
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	80 83       	st	Z, r24
								Copy_u32TimerClk >>= 5 ;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	ab 81       	ldd	r26, Y+3	; 0x03
    16ec:	bc 81       	ldd	r27, Y+4	; 0x04
    16ee:	68 94       	set
    16f0:	14 f8       	bld	r1, 4
    16f2:	b6 95       	lsr	r27
    16f4:	a7 95       	ror	r26
    16f6:	97 95       	ror	r25
    16f8:	87 95       	ror	r24
    16fa:	16 94       	lsr	r1
    16fc:	d1 f7       	brne	.-12     	; 0x16f2 <Timer_u32TimerClock+0x12e>
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	ab 83       	std	Y+3, r26	; 0x03
    1704:	bc 83       	std	Y+4, r27	; 0x04
    1706:	90 c0       	rjmp	.+288    	; 0x1828 <Timer_u32TimerClock+0x264>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_64"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
		case PRES_64 	:	Copy_u32TimerClk >>= 6 ;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	ab 81       	ldd	r26, Y+3	; 0x03
    170e:	bc 81       	ldd	r27, Y+4	; 0x04
    1710:	68 94       	set
    1712:	15 f8       	bld	r1, 5
    1714:	b6 95       	lsr	r27
    1716:	a7 95       	ror	r26
    1718:	97 95       	ror	r25
    171a:	87 95       	ror	r24
    171c:	16 94       	lsr	r1
    171e:	d1 f7       	brne	.-12     	; 0x1714 <Timer_u32TimerClock+0x150>
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	ab 83       	std	Y+3, r26	; 0x03
    1726:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 4;
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	8b 3c       	cpi	r24, 0xCB	; 203
    172c:	29 f4       	brne	.+10     	; 0x1738 <Timer_u32TimerClock+0x174>
    172e:	ef 81       	ldd	r30, Y+7	; 0x07
    1730:	f8 85       	ldd	r31, Y+8	; 0x08
    1732:	84 e0       	ldi	r24, 0x04	; 4
    1734:	80 83       	st	Z, r24
    1736:	78 c0       	rjmp	.+240    	; 0x1828 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 3;
    1738:	ef 81       	ldd	r30, Y+7	; 0x07
    173a:	f8 85       	ldd	r31, Y+8	; 0x08
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	80 83       	st	Z, r24
    1740:	73 c0       	rjmp	.+230    	; 0x1828 <Timer_u32TimerClock+0x264>
						break;
		case PRES_128 	:	if( Copy_u8TimerNum == TIMER2 )
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
    1744:	8b 3c       	cpi	r24, 0xCB	; 203
    1746:	a9 f4       	brne	.+42     	; 0x1772 <Timer_u32TimerClock+0x1ae>
							{
								*Copy_pu8ClkSelectPrescalar = 5;
    1748:	ef 81       	ldd	r30, Y+7	; 0x07
    174a:	f8 85       	ldd	r31, Y+8	; 0x08
    174c:	85 e0       	ldi	r24, 0x05	; 5
    174e:	80 83       	st	Z, r24
								Copy_u32TimerClk >>= 7 ;
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	ab 81       	ldd	r26, Y+3	; 0x03
    1756:	bc 81       	ldd	r27, Y+4	; 0x04
    1758:	68 94       	set
    175a:	16 f8       	bld	r1, 6
    175c:	b6 95       	lsr	r27
    175e:	a7 95       	ror	r26
    1760:	97 95       	ror	r25
    1762:	87 95       	ror	r24
    1764:	16 94       	lsr	r1
    1766:	d1 f7       	brne	.-12     	; 0x175c <Timer_u32TimerClock+0x198>
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	ab 83       	std	Y+3, r26	; 0x03
    176e:	bc 83       	std	Y+4, r27	; 0x04
    1770:	5b c0       	rjmp	.+182    	; 0x1828 <Timer_u32TimerClock+0x264>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_256"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
		case PRES_256	 :	Copy_u32TimerClk >>= 8 ;
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	9a 81       	ldd	r25, Y+2	; 0x02
    1776:	ab 81       	ldd	r26, Y+3	; 0x03
    1778:	bc 81       	ldd	r27, Y+4	; 0x04
    177a:	89 2f       	mov	r24, r25
    177c:	9a 2f       	mov	r25, r26
    177e:	ab 2f       	mov	r26, r27
    1780:	bb 27       	eor	r27, r27
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	ab 83       	std	Y+3, r26	; 0x03
    1788:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 6;
    178a:	8d 81       	ldd	r24, Y+5	; 0x05
    178c:	8b 3c       	cpi	r24, 0xCB	; 203
    178e:	29 f4       	brne	.+10     	; 0x179a <Timer_u32TimerClock+0x1d6>
    1790:	ef 81       	ldd	r30, Y+7	; 0x07
    1792:	f8 85       	ldd	r31, Y+8	; 0x08
    1794:	86 e0       	ldi	r24, 0x06	; 6
    1796:	80 83       	st	Z, r24
    1798:	47 c0       	rjmp	.+142    	; 0x1828 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 4;
    179a:	ef 81       	ldd	r30, Y+7	; 0x07
    179c:	f8 85       	ldd	r31, Y+8	; 0x08
    179e:	84 e0       	ldi	r24, 0x04	; 4
    17a0:	80 83       	st	Z, r24
    17a2:	42 c0       	rjmp	.+132    	; 0x1828 <Timer_u32TimerClock+0x264>
						break;
		case PRES_1024 :	Copy_u32TimerClk >>= 10 ;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	ab 81       	ldd	r26, Y+3	; 0x03
    17aa:	bc 81       	ldd	r27, Y+4	; 0x04
    17ac:	07 2e       	mov	r0, r23
    17ae:	7a e0       	ldi	r23, 0x0A	; 10
    17b0:	b6 95       	lsr	r27
    17b2:	a7 95       	ror	r26
    17b4:	97 95       	ror	r25
    17b6:	87 95       	ror	r24
    17b8:	7a 95       	dec	r23
    17ba:	d1 f7       	brne	.-12     	; 0x17b0 <Timer_u32TimerClock+0x1ec>
    17bc:	70 2d       	mov	r23, r0
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	9a 83       	std	Y+2, r25	; 0x02
    17c2:	ab 83       	std	Y+3, r26	; 0x03
    17c4:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 7;
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	8b 3c       	cpi	r24, 0xCB	; 203
    17ca:	29 f4       	brne	.+10     	; 0x17d6 <Timer_u32TimerClock+0x212>
    17cc:	ef 81       	ldd	r30, Y+7	; 0x07
    17ce:	f8 85       	ldd	r31, Y+8	; 0x08
    17d0:	87 e0       	ldi	r24, 0x07	; 7
    17d2:	80 83       	st	Z, r24
    17d4:	29 c0       	rjmp	.+82     	; 0x1828 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 5;
    17d6:	ef 81       	ldd	r30, Y+7	; 0x07
    17d8:	f8 85       	ldd	r31, Y+8	; 0x08
    17da:	85 e0       	ldi	r24, 0x05	; 5
    17dc:	80 83       	st	Z, r24
    17de:	24 c0       	rjmp	.+72     	; 0x1828 <Timer_u32TimerClock+0x264>
						break;
		case EXT_CLK_FALL	 :		Copy_u32TimerClk = EXT_CLOCK ;
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	9f ef       	ldi	r25, 0xFF	; 255
    17e4:	af ef       	ldi	r26, 0xFF	; 255
    17e6:	bf ef       	ldi	r27, 0xFF	; 255
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	ab 83       	std	Y+3, r26	; 0x03
    17ee:	bc 83       	std	Y+4, r27	; 0x04
									if( Copy_u8TimerNum == TIMER0 )
    17f0:	8d 81       	ldd	r24, Y+5	; 0x05
    17f2:	88 3c       	cpi	r24, 0xC8	; 200
    17f4:	c9 f4       	brne	.+50     	; 0x1828 <Timer_u32TimerClock+0x264>
									{
										*Copy_pu8ClkSelectPrescalar = 6;
    17f6:	ef 81       	ldd	r30, Y+7	; 0x07
    17f8:	f8 85       	ldd	r31, Y+8	; 0x08
    17fa:	86 e0       	ldi	r24, 0x06	; 6
    17fc:	80 83       	st	Z, r24
    17fe:	14 c0       	rjmp	.+40     	; 0x1828 <Timer_u32TimerClock+0x264>
										break;
									}
									#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		case EXT_CLK_RISE	 :		Copy_u32TimerClk = EXT_CLOCK ;
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	9f ef       	ldi	r25, 0xFF	; 255
    1804:	af ef       	ldi	r26, 0xFF	; 255
    1806:	bf ef       	ldi	r27, 0xFF	; 255
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	ab 83       	std	Y+3, r26	; 0x03
    180e:	bc 83       	std	Y+4, r27	; 0x04
									if( Copy_u8TimerNum == TIMER0 )
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	88 3c       	cpi	r24, 0xC8	; 200
    1814:	49 f4       	brne	.+18     	; 0x1828 <Timer_u32TimerClock+0x264>
									{
										*Copy_pu8ClkSelectPrescalar = 7;
    1816:	ef 81       	ldd	r30, Y+7	; 0x07
    1818:	f8 85       	ldd	r31, Y+8	; 0x08
    181a:	87 e0       	ldi	r24, 0x07	; 7
    181c:	80 83       	st	Z, r24
    181e:	04 c0       	rjmp	.+8      	; 0x1828 <Timer_u32TimerClock+0x264>
										break;
									}
									#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		default:	Copy_u32TimerClk = 0;
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	1a 82       	std	Y+2, r1	; 0x02
    1824:	1b 82       	std	Y+3, r1	; 0x03
    1826:	1c 82       	std	Y+4, r1	; 0x04
					#warning "Unsupported Clock mode is selected , Timer is disabled"
	}

	return Copy_u32TimerClk ;
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	ab 81       	ldd	r26, Y+3	; 0x03
    182e:	bc 81       	ldd	r27, Y+4	; 0x04

}
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	2a 96       	adiw	r28, 0x0a	; 10
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <Timer_enuSetClkPrescaler>:
	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif

ES_t Timer_enuSetClkPrescaler( u8 Copy_u8TimerNum , u8 Copy_u8PrescalerValue )
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	2a 97       	sbiw	r28, 0x0a	; 10
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	88 87       	std	Y+8, r24	; 0x08
    185c:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8ClkSelectPrescaler = NO_CLK ;
    1862:	8a e0       	ldi	r24, 0x0A	; 10
    1864:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    1866:	e9 e5       	ldi	r30, 0x59	; 89
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32TimerClk = Timer_u32TimerClock( Copy_u8TimerNum , Copy_u8PrescalerValue , &Local_u8ClkSelectPrescaler ) ;
    186e:	9e 01       	movw	r18, r28
    1870:	29 5f       	subi	r18, 0xF9	; 249
    1872:	3f 4f       	sbci	r19, 0xFF	; 255
    1874:	88 85       	ldd	r24, Y+8	; 0x08
    1876:	69 85       	ldd	r22, Y+9	; 0x09
    1878:	a9 01       	movw	r20, r18
    187a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <Timer_u32TimerClock>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	9a 83       	std	Y+2, r25	; 0x02
    1886:	ab 83       	std	Y+3, r26	; 0x03
    1888:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u8TimerNum == TIMER0 )
    188a:	88 85       	ldd	r24, Y+8	; 0x08
    188c:	88 3c       	cpi	r24, 0xC8	; 200
    188e:	19 f5       	brne	.+70     	; 0x18d6 <Timer_enuSetClkPrescaler+0x90>
	{
		TIMSK &= ~( TC0_INT_EN_MASK ) ;								// Disable Timer0 Interrupts
    1890:	a9 e5       	ldi	r26, 0x59	; 89
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e9 e5       	ldi	r30, 0x59	; 89
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8c 7f       	andi	r24, 0xFC	; 252
    189c:	8c 93       	st	X, r24
		TCCR0 &= ~( CLK0_SEL_BITS_MASK ) ;							// Masking Clock Select bits
    189e:	a3 e5       	ldi	r26, 0x53	; 83
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e3 e5       	ldi	r30, 0x53	; 83
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	88 7f       	andi	r24, 0xF8	; 248
    18aa:	8c 93       	st	X, r24
		TCCR0 |= ( Local_u8ClkSelectPrescaler  << CLK0_SEL_BITS ) ;	// Setting New Prescaler
    18ac:	a3 e5       	ldi	r26, 0x53	; 83
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e3 e5       	ldi	r30, 0x53	; 83
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	90 81       	ld	r25, Z
    18b6:	8f 81       	ldd	r24, Y+7	; 0x07
    18b8:	89 2b       	or	r24, r25
    18ba:	8c 93       	st	X, r24
		Global_u32Timer0_Clk = Local_u32TimerClk ;					// Saving New Actual Timer0 Clock
    18bc:	89 81       	ldd	r24, Y+1	; 0x01
    18be:	9a 81       	ldd	r25, Y+2	; 0x02
    18c0:	ab 81       	ldd	r26, Y+3	; 0x03
    18c2:	bc 81       	ldd	r27, Y+4	; 0x04
    18c4:	80 93 25 02 	sts	0x0225, r24
    18c8:	90 93 26 02 	sts	0x0226, r25
    18cc:	a0 93 27 02 	sts	0x0227, r26
    18d0:	b0 93 28 02 	sts	0x0228, r27
    18d4:	28 c0       	rjmp	.+80     	; 0x1926 <Timer_enuSetClkPrescaler+0xe0>
#if Mask
		Timers[ TIMER0 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else if( Copy_u8TimerNum == TIMER2 )
    18d6:	88 85       	ldd	r24, Y+8	; 0x08
    18d8:	8b 3c       	cpi	r24, 0xCB	; 203
    18da:	19 f5       	brne	.+70     	; 0x1922 <Timer_enuSetClkPrescaler+0xdc>
	{
		TIMSK &= ~( TC2_INT_EN_MASK ) ;								// Disable Timer2 Interrupts
    18dc:	a9 e5       	ldi	r26, 0x59	; 89
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e9 e5       	ldi	r30, 0x59	; 89
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 73       	andi	r24, 0x3F	; 63
    18e8:	8c 93       	st	X, r24
		TCCR2 &= ~( CLK2_SEL_BITS_MASK );							// Masking Clock Select bits
    18ea:	a5 e4       	ldi	r26, 0x45	; 69
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e4       	ldi	r30, 0x45	; 69
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	88 7f       	andi	r24, 0xF8	; 248
    18f6:	8c 93       	st	X, r24
		TCCR2 |= ( Local_u8ClkSelectPrescaler  << CLK2_SEL_BITS );	// Setting New Prescaler
    18f8:	a5 e4       	ldi	r26, 0x45	; 69
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e5 e4       	ldi	r30, 0x45	; 69
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	90 81       	ld	r25, Z
    1902:	8f 81       	ldd	r24, Y+7	; 0x07
    1904:	89 2b       	or	r24, r25
    1906:	8c 93       	st	X, r24
		Global_u32Timer2_Clk = Local_u32TimerClk ;					// Saving New Actual Timer2 Clock
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	ab 81       	ldd	r26, Y+3	; 0x03
    190e:	bc 81       	ldd	r27, Y+4	; 0x04
    1910:	80 93 29 02 	sts	0x0229, r24
    1914:	90 93 2a 02 	sts	0x022A, r25
    1918:	a0 93 2b 02 	sts	0x022B, r26
    191c:	b0 93 2c 02 	sts	0x022C, r27
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <Timer_enuSetClkPrescaler+0xe0>
#if Mask
		Timers[ TIMER2 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1922:	82 e0       	ldi	r24, 0x02	; 2
    1924:	8e 83       	std	Y+6, r24	; 0x06

	TIMSK = Local_u8CopyTIMSK ;										// Re-setting Timer Interrupt Mask Register to its Status
    1926:	e9 e5       	ldi	r30, 0x59	; 89
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    192e:	8e 81       	ldd	r24, Y+6	; 0x06
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	19 f0       	breq	.+6      	; 0x193a <Timer_enuSetClkPrescaler+0xf4>
    1934:	8e 81       	ldd	r24, Y+6	; 0x06
    1936:	8a 87       	std	Y+10, r24	; 0x0a
    1938:	01 c0       	rjmp	.+2      	; 0x193c <Timer_enuSetClkPrescaler+0xf6>
    193a:	1a 86       	std	Y+10, r1	; 0x0a
    193c:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    193e:	2a 96       	adiw	r28, 0x0a	; 10
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <Timer_enuSetOCn_Mode>:
	}
	return Local_enuErrorState ;
}
#endif
ES_t Timer_enuSetOCn_Mode( u8 Copy_u8TimerNum , u8 Copy_u8COM_Mode )
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <Timer_enuSetOCn_Mode+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <Timer_enuSetOCn_Mode+0x8>
    1958:	0f 92       	push	r0
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
    195e:	8b 83       	std	Y+3, r24	; 0x03
    1960:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    1966:	e9 e5       	ldi	r30, 0x59	; 89
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 )
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	88 3c       	cpi	r24, 0xC8	; 200
    1972:	09 f5       	brne	.+66     	; 0x19b6 <Timer_enuSetOCn_Mode+0x66>
	{
		TIMSK &= ~( TC0_INT_EN_MASK ) ;													// Disable Timer0 Interrupts
    1974:	a9 e5       	ldi	r26, 0x59	; 89
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e9 e5       	ldi	r30, 0x59	; 89
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8c 7f       	andi	r24, 0xFC	; 252
    1980:	8c 93       	st	X, r24
		TCCR0 &= ~( COMP0_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
    1982:	a3 e5       	ldi	r26, 0x53	; 83
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e3 e5       	ldi	r30, 0x53	; 83
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	8f 7c       	andi	r24, 0xCF	; 207
    198e:	8c 93       	st	X, r24
		TCCR0 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP0_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
    1990:	a3 e5       	ldi	r26, 0x53	; 83
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e3 e5       	ldi	r30, 0x53	; 83
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	28 2f       	mov	r18, r24
    199c:	8c 81       	ldd	r24, Y+4	; 0x04
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	44 97       	sbiw	r24, 0x14	; 20
    19a4:	82 95       	swap	r24
    19a6:	92 95       	swap	r25
    19a8:	90 7f       	andi	r25, 0xF0	; 240
    19aa:	98 27       	eor	r25, r24
    19ac:	80 7f       	andi	r24, 0xF0	; 240
    19ae:	98 27       	eor	r25, r24
    19b0:	82 2b       	or	r24, r18
    19b2:	8c 93       	st	X, r24
    19b4:	26 c0       	rjmp	.+76     	; 0x1a02 <Timer_enuSetOCn_Mode+0xb2>
#if Mask
		Timers[ TIMER0 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
#endif
	}
	else if( Copy_u8TimerNum == TIMER2 )
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	8b 3c       	cpi	r24, 0xCB	; 203
    19ba:	09 f5       	brne	.+66     	; 0x19fe <Timer_enuSetOCn_Mode+0xae>
	{
		TIMSK &= ~( TC2_INT_EN_MASK ) ;													// Disable Timer2 Interrupts
    19bc:	a9 e5       	ldi	r26, 0x59	; 89
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e9 e5       	ldi	r30, 0x59	; 89
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8f 73       	andi	r24, 0x3F	; 63
    19c8:	8c 93       	st	X, r24
		TCCR2 &= ~( COMP2_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
    19ca:	a5 e4       	ldi	r26, 0x45	; 69
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e5 e4       	ldi	r30, 0x45	; 69
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8f 7c       	andi	r24, 0xCF	; 207
    19d6:	8c 93       	st	X, r24
		TCCR2 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP2_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
    19d8:	a5 e4       	ldi	r26, 0x45	; 69
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e4       	ldi	r30, 0x45	; 69
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	28 2f       	mov	r18, r24
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	44 97       	sbiw	r24, 0x14	; 20
    19ec:	82 95       	swap	r24
    19ee:	92 95       	swap	r25
    19f0:	90 7f       	andi	r25, 0xF0	; 240
    19f2:	98 27       	eor	r25, r24
    19f4:	80 7f       	andi	r24, 0xF0	; 240
    19f6:	98 27       	eor	r25, r24
    19f8:	82 2b       	or	r24, r18
    19fa:	8c 93       	st	X, r24
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <Timer_enuSetOCn_Mode+0xb2>
#if Mask
		Timers[ TIMER2 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	8a 83       	std	Y+2, r24	; 0x02

	TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    1a02:	e9 e5       	ldi	r30, 0x59	; 89
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	19 f0       	breq	.+6      	; 0x1a16 <Timer_enuSetOCn_Mode+0xc6>
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <Timer_enuSetOCn_Mode+0xc8>
    1a16:	1d 82       	std	Y+5, r1	; 0x05
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <Timer_enuSetTimer_Mode>:
	return Local_enuErrorState ;
}
#endif

ES_t Timer_enuSetTimer_Mode( u8 Copy_u8TimerNum , u8 Copy_u8WGM_Mode )
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	2d 97       	sbiw	r28, 0x0d	; 13
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	f8 94       	cli
    1a38:	de bf       	out	0x3e, r29	; 62
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	cd bf       	out	0x3d, r28	; 61
    1a3e:	8f 83       	std	Y+7, r24	; 0x07
    1a40:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8IntMask , Local_u8TCCR , Local_u8WGM_CTC_Bit ;
	bool ErrorFlag = FALSE ;
    1a46:	1a 82       	std	Y+2, r1	; 0x02


	if( Copy_u8WGM_Mode == WGM_NORMAL_MODE || Copy_u8WGM_Mode == WGM_CTC_MODE )
    1a48:	88 85       	ldd	r24, Y+8	; 0x08
    1a4a:	8e 31       	cpi	r24, 0x1E	; 30
    1a4c:	21 f0       	breq	.+8      	; 0x1a56 <Timer_enuSetTimer_Mode+0x2c>
    1a4e:	88 85       	ldd	r24, Y+8	; 0x08
    1a50:	80 32       	cpi	r24, 0x20	; 32
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <Timer_enuSetTimer_Mode+0x2c>
    1a54:	7d c0       	rjmp	.+250    	; 0x1b50 <Timer_enuSetTimer_Mode+0x126>
	{
		u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    1a56:	e9 e5       	ldi	r30, 0x59	; 89
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	89 83       	std	Y+1, r24	; 0x01

		switch( Copy_u8TimerNum )
    1a5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	3d 87       	std	Y+13, r19	; 0x0d
    1a66:	2c 87       	std	Y+12, r18	; 0x0c
    1a68:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a6a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a6c:	88 3c       	cpi	r24, 0xC8	; 200
    1a6e:	91 05       	cpc	r25, r1
    1a70:	31 f0       	breq	.+12     	; 0x1a7e <Timer_enuSetTimer_Mode+0x54>
    1a72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a74:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a76:	2b 3c       	cpi	r18, 0xCB	; 203
    1a78:	31 05       	cpc	r19, r1
    1a7a:	51 f0       	breq	.+20     	; 0x1a90 <Timer_enuSetTimer_Mode+0x66>
    1a7c:	12 c0       	rjmp	.+36     	; 0x1aa2 <Timer_enuSetTimer_Mode+0x78>
		{
			case TIMER0 : 	Local_u8IntMask = TC0_INT_EN_MASK ;
    1a7e:	83 e0       	ldi	r24, 0x03	; 3
    1a80:	8d 83       	std	Y+5, r24	; 0x05
							Local_u8TCCR = TCCR0 ;
    1a82:	e3 e5       	ldi	r30, 0x53	; 83
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	8c 83       	std	Y+4, r24	; 0x04
							Local_u8WGM_CTC_Bit = WGM01_BIT;
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
    1a8e:	0d c0       	rjmp	.+26     	; 0x1aaa <Timer_enuSetTimer_Mode+0x80>
							break;
			case TIMER2 : 	Local_u8IntMask = TC2_INT_EN_MASK ;
    1a90:	80 ec       	ldi	r24, 0xC0	; 192
    1a92:	8d 83       	std	Y+5, r24	; 0x05
							Local_u8TCCR = TCCR2 ;
    1a94:	e5 e4       	ldi	r30, 0x45	; 69
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	8c 83       	std	Y+4, r24	; 0x04
							Local_u8WGM_CTC_Bit = WGM21_BIT ;
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <Timer_enuSetTimer_Mode+0x80>
							break;
			default 	: 	Local_enuErrorState = ES_OUT_RANGE ;
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	8e 83       	std	Y+6, r24	; 0x06
							ErrorFlag = TRUE;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	8a 83       	std	Y+2, r24	; 0x02
		}
		if( ErrorFlag == FALSE )
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	88 23       	and	r24, r24
    1aae:	c9 f5       	brne	.+114    	; 0x1b22 <Timer_enuSetTimer_Mode+0xf8>
		{
			TIMSK &= ~( Local_u8IntMask );													// Clearing Timer Interrupts while changing Timer mode
    1ab0:	a9 e5       	ldi	r26, 0x59	; 89
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e9 e5       	ldi	r30, 0x59	; 89
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	98 2f       	mov	r25, r24
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	80 95       	com	r24
    1ac0:	89 23       	and	r24, r25
    1ac2:	8c 93       	st	X, r24
			switch ( Copy_u8WGM_Mode )
    1ac4:	88 85       	ldd	r24, Y+8	; 0x08
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	3b 87       	std	Y+11, r19	; 0x0b
    1acc:	2a 87       	std	Y+10, r18	; 0x0a
    1ace:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad2:	8e 31       	cpi	r24, 0x1E	; 30
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	31 f0       	breq	.+12     	; 0x1ae4 <Timer_enuSetTimer_Mode+0xba>
    1ad8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ada:	3b 85       	ldd	r19, Y+11	; 0x0b
    1adc:	20 32       	cpi	r18, 0x20	; 32
    1ade:	31 05       	cpc	r19, r1
    1ae0:	91 f0       	breq	.+36     	; 0x1b06 <Timer_enuSetTimer_Mode+0xdc>
    1ae2:	1f c0       	rjmp	.+62     	; 0x1b22 <Timer_enuSetTimer_Mode+0xf8>
			{
				case WGM_NORMAL_MODE 	: 	CLR_BIT( Local_u8TCCR , Local_u8WGM_CTC_Bit ) ;
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	28 2f       	mov	r18, r24
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	02 2e       	mov	r0, r18
    1af0:	02 c0       	rjmp	.+4      	; 0x1af6 <Timer_enuSetTimer_Mode+0xcc>
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	0a 94       	dec	r0
    1af8:	e2 f7       	brpl	.-8      	; 0x1af2 <Timer_enuSetTimer_Mode+0xc8>
    1afa:	98 2f       	mov	r25, r24
    1afc:	90 95       	com	r25
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	89 23       	and	r24, r25
    1b02:	8c 83       	std	Y+4, r24	; 0x04
    1b04:	0e c0       	rjmp	.+28     	; 0x1b22 <Timer_enuSetTimer_Mode+0xf8>
											break;
				case WGM_CTC_MODE 		: 	SET_BIT( Local_u8TCCR , Local_u8WGM_CTC_Bit ) ;
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <Timer_enuSetTimer_Mode+0xec>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	2a 95       	dec	r18
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <Timer_enuSetTimer_Mode+0xe8>
    1b1a:	98 2f       	mov	r25, r24
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	89 2b       	or	r24, r25
    1b20:	8c 83       	std	Y+4, r24	; 0x04
											break;
			}
		}
		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Original Status
    1b22:	e9 e5       	ldi	r30, 0x59	; 89
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	80 83       	st	Z, r24
		Timers[ Copy_u8TimerNum - TIMER0 ].WaveGenMode = Copy_u8WGM_Mode ;
    1b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 01       	movw	r18, r24
    1b32:	28 5c       	subi	r18, 0xC8	; 200
    1b34:	30 40       	sbci	r19, 0x00	; 0
    1b36:	c9 01       	movw	r24, r18
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	fc 01       	movw	r30, r24
    1b46:	e2 59       	subi	r30, 0x92	; 146
    1b48:	fe 4f       	sbci	r31, 0xFE	; 254
    1b4a:	88 85       	ldd	r24, Y+8	; 0x08
    1b4c:	80 83       	st	Z, r24
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <Timer_enuSetTimer_Mode+0x12a>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1b50:	82 e0       	ldi	r24, 0x02	; 2
    1b52:	8e 83       	std	Y+6, r24	; 0x06

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1b54:	8e 81       	ldd	r24, Y+6	; 0x06
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	19 f0       	breq	.+6      	; 0x1b60 <Timer_enuSetTimer_Mode+0x136>
    1b5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b5c:	39 87       	std	Y+9, r19	; 0x09
    1b5e:	01 c0       	rjmp	.+2      	; 0x1b62 <Timer_enuSetTimer_Mode+0x138>
    1b60:	19 86       	std	Y+9, r1	; 0x09
    1b62:	89 85       	ldd	r24, Y+9	; 0x09
}
    1b64:	2d 96       	adiw	r28, 0x0d	; 13
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <Timer_enuReset>:
	}
	return Local_enuErrorState ;
}
#endif
ES_t Timer_enuReset( u8 Copy_u8TimerNum )
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <Timer_enuReset+0x6>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <Timer_enuReset+0x8>
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
    1b82:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Temp = SREG ;									// Saving a Copy of AVR Status Register
    1b88:	ef e5       	ldi	r30, 0x5F	; 95
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;														// Disable All Interrupts while writing to Counter Register
    1b90:	f8 94       	cli

	if( Copy_u8TimerNum == TIMER0 )
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	88 3c       	cpi	r24, 0xC8	; 200
    1b96:	21 f4       	brne	.+8      	; 0x1ba0 <Timer_enuReset+0x2a>
	{
		TCNT0 = 0x00 ;
    1b98:	e2 e5       	ldi	r30, 0x52	; 82
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	10 82       	st	Z, r1
    1b9e:	09 c0       	rjmp	.+18     	; 0x1bb2 <Timer_enuReset+0x3c>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	8b 3c       	cpi	r24, 0xCB	; 203
    1ba4:	21 f4       	brne	.+8      	; 0x1bae <Timer_enuReset+0x38>
	{
		TCNT2 = 0x00 ;
    1ba6:	e4 e4       	ldi	r30, 0x44	; 68
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	10 82       	st	Z, r1
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <Timer_enuReset+0x3c>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	8a 83       	std	Y+2, r24	; 0x02

	SREG = Local_u8Temp;										// Re-setting AVR Status Register to its Status
    1bb2:	ef e5       	ldi	r30, 0x5F	; 95
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	19 f0       	breq	.+6      	; 0x1bc6 <Timer_enuReset+0x50>
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	8c 83       	std	Y+4, r24	; 0x04
    1bc4:	01 c0       	rjmp	.+2      	; 0x1bc8 <Timer_enuReset+0x52>
    1bc6:	1c 82       	std	Y+4, r1	; 0x04
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <Timer_enuPreLoad>:

ES_t Timer_enuPreLoad( u8 Copy_u8TimerNum , u8 Copy_u8PreLoad)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <Timer_enuPreLoad+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <Timer_enuPreLoad+0x8>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	8a 83       	std	Y+2, r24	; 0x02
    1be6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 )
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	88 3c       	cpi	r24, 0xC8	; 200
    1bf0:	29 f4       	brne	.+10     	; 0x1bfc <Timer_enuPreLoad+0x24>
	{
		TCNT0 = (u8)Copy_u8PreLoad ;
    1bf2:	e2 e5       	ldi	r30, 0x52	; 82
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	80 83       	st	Z, r24
    1bfa:	0a c0       	rjmp	.+20     	; 0x1c10 <Timer_enuPreLoad+0x38>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	8b 3c       	cpi	r24, 0xCB	; 203
    1c00:	29 f4       	brne	.+10     	; 0x1c0c <Timer_enuPreLoad+0x34>
	{
		TCNT2 = (u8)Copy_u8PreLoad ;
    1c02:	e4 e4       	ldi	r30, 0x44	; 68
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	80 83       	st	Z, r24
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <Timer_enuPreLoad+0x38>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	19 f0       	breq	.+6      	; 0x1c1c <Timer_enuPreLoad+0x44>
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	8c 83       	std	Y+4, r24	; 0x04
    1c1a:	01 c0       	rjmp	.+2      	; 0x1c1e <Timer_enuPreLoad+0x46>
    1c1c:	1c 82       	std	Y+4, r1	; 0x04
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	0f 90       	pop	r0
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <Timer_enuReadCounterValue>:

ES_t Timer_enuReadCounterValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <Timer_enuReadCounterValue+0x6>
    1c34:	00 d0       	rcall	.+0      	; 0x1c36 <Timer_enuReadCounterValue+0x8>
    1c36:	0f 92       	push	r0
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	8a 83       	std	Y+2, r24	; 0x02
    1c3e:	7c 83       	std	Y+4, r23	; 0x04
    1c40:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pCounterValue != NULL )
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	b9 f0       	breq	.+46     	; 0x1c7c <Timer_enuReadCounterValue+0x4e>
	{
		if( Copy_u8TimerNum == TIMER0 )
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	88 3c       	cpi	r24, 0xC8	; 200
    1c52:	39 f4       	brne	.+14     	; 0x1c62 <Timer_enuReadCounterValue+0x34>
		{
			*( (u8 *)Copy_pCounterValue ) = TCNT0 ;
    1c54:	eb 81       	ldd	r30, Y+3	; 0x03
    1c56:	fc 81       	ldd	r31, Y+4	; 0x04
    1c58:	a2 e5       	ldi	r26, 0x52	; 82
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	8c 91       	ld	r24, X
    1c5e:	80 83       	st	Z, r24
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <Timer_enuReadCounterValue+0x52>
		}
		else if( Copy_u8TimerNum == TIMER2 )
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	8b 3c       	cpi	r24, 0xCB	; 203
    1c66:	39 f4       	brne	.+14     	; 0x1c76 <Timer_enuReadCounterValue+0x48>
		{
			*( (u8 *)Copy_pCounterValue ) = TCNT2 ;
    1c68:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c6c:	a4 e4       	ldi	r26, 0x44	; 68
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	8c 91       	ld	r24, X
    1c72:	80 83       	st	Z, r24
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <Timer_enuReadCounterValue+0x52>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <Timer_enuReadCounterValue+0x52>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1c7c:	83 e0       	ldi	r24, 0x03	; 3
    1c7e:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	19 f0       	breq	.+6      	; 0x1c8c <Timer_enuReadCounterValue+0x5e>
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <Timer_enuReadCounterValue+0x60>
    1c8c:	1d 82       	std	Y+5, r1	; 0x05
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <Timer_enuSetOCRnValue>:

ES_t Timer_enuSetOCRnValue( u8 Copy_u8TimerNum , u8 Copy_u8OCRnValue )
{
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <Timer_enuSetOCRnValue+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <Timer_enuSetOCRnValue+0x8>
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	8a 83       	std	Y+2, r24	; 0x02
    1cae:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 && Copy_u8OCRnValue <= Timer0Max )
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	88 3c       	cpi	r24, 0xC8	; 200
    1cb8:	79 f4       	brne	.+30     	; 0x1cd8 <Timer_enuSetOCRnValue+0x38>
    1cba:	90 91 69 01 	lds	r25, 0x0169
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	98 17       	cp	r25, r24
    1cc2:	50 f0       	brcs	.+20     	; 0x1cd8 <Timer_enuSetOCRnValue+0x38>
	{
		OCR0 = Copy_u8OCRnValue ;
    1cc4:	ec e5       	ldi	r30, 0x5C	; 92
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	80 83       	st	Z, r24
		Global_u8OCR0_Value = OCR0 ;
    1ccc:	ec e5       	ldi	r30, 0x5C	; 92
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	80 93 23 02 	sts	0x0223, r24
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <Timer_enuSetOCRnValue+0x60>
	}
	else if( Copy_u8TimerNum == TIMER2 && Copy_u8OCRnValue <= Timer2Max )
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	8b 3c       	cpi	r24, 0xCB	; 203
    1cdc:	79 f4       	brne	.+30     	; 0x1cfc <Timer_enuSetOCRnValue+0x5c>
    1cde:	90 91 6a 01 	lds	r25, 0x016A
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	98 17       	cp	r25, r24
    1ce6:	50 f0       	brcs	.+20     	; 0x1cfc <Timer_enuSetOCRnValue+0x5c>
	{
		OCR2 = Copy_u8OCRnValue ;
    1ce8:	e3 e4       	ldi	r30, 0x43	; 67
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	80 83       	st	Z, r24
		Global_u8OCR2_Value = OCR2 ;
    1cf0:	e3 e4       	ldi	r30, 0x43	; 67
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 93 24 02 	sts	0x0224, r24
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <Timer_enuSetOCRnValue+0x60>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	19 f0       	breq	.+6      	; 0x1d0c <Timer_enuSetOCRnValue+0x6c>
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	8c 83       	std	Y+4, r24	; 0x04
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <Timer_enuSetOCRnValue+0x6e>
    1d0c:	1c 82       	std	Y+4, r1	; 0x04
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	0f 90       	pop	r0
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <Timer_enuReadOCRnValue>:

ES_t Timer_enuReadOCRnValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <Timer_enuReadOCRnValue+0x6>
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <Timer_enuReadOCRnValue+0x8>
    1d26:	0f 92       	push	r0
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	8a 83       	std	Y+2, r24	; 0x02
    1d2e:	7c 83       	std	Y+4, r23	; 0x04
    1d30:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	89 83       	std	Y+1, r24	; 0x01

		if( Copy_u8TimerNum == TIMER0 )
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	88 3c       	cpi	r24, 0xC8	; 200
    1d3a:	31 f4       	brne	.+12     	; 0x1d48 <Timer_enuReadOCRnValue+0x2a>
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR0_Value ;
    1d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d40:	80 91 23 02 	lds	r24, 0x0223
    1d44:	80 83       	st	Z, r24
    1d46:	0b c0       	rjmp	.+22     	; 0x1d5e <Timer_enuReadOCRnValue+0x40>
		}
		else if( Copy_u8TimerNum == TIMER2 )
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	8b 3c       	cpi	r24, 0xCB	; 203
    1d4c:	31 f4       	brne	.+12     	; 0x1d5a <Timer_enuReadOCRnValue+0x3c>
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR2_Value ;
    1d4e:	eb 81       	ldd	r30, Y+3	; 0x03
    1d50:	fc 81       	ldd	r31, Y+4	; 0x04
    1d52:	80 91 24 02 	lds	r24, 0x0224
    1d56:	80 83       	st	Z, r24
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <Timer_enuReadOCRnValue+0x40>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    1d5a:	82 e0       	ldi	r24, 0x02	; 2
    1d5c:	89 83       	std	Y+1, r24	; 0x01

		return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	19 f0       	breq	.+6      	; 0x1d6a <Timer_enuReadOCRnValue+0x4c>
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <Timer_enuReadOCRnValue+0x4e>
    1d6a:	1d 82       	std	Y+5, r1	; 0x05
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <Timer_enuInterruptEnable>:

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif
ES_t Timer_enuInterruptEnable( u8 Copy_u8TimerIntName)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	00 d0       	rcall	.+0      	; 0x1d84 <Timer_enuInterruptEnable+0x6>
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <Timer_enuInterruptEnable+0x8>
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	89 83       	std	Y+1, r24	; 0x01

	_CLI_ ;																// Disable ALL Interrupts
    1d92:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	28 2f       	mov	r18, r24
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	3d 83       	std	Y+5, r19	; 0x05
    1d9c:	2c 83       	std	Y+4, r18	; 0x04
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	9d 81       	ldd	r25, Y+5	; 0x05
    1da2:	82 34       	cpi	r24, 0x42	; 66
    1da4:	91 05       	cpc	r25, r1
    1da6:	31 f1       	breq	.+76     	; 0x1df4 <Timer_enuInterruptEnable+0x76>
    1da8:	2c 81       	ldd	r18, Y+4	; 0x04
    1daa:	3d 81       	ldd	r19, Y+5	; 0x05
    1dac:	23 34       	cpi	r18, 0x43	; 67
    1dae:	31 05       	cpc	r19, r1
    1db0:	5c f4       	brge	.+22     	; 0x1dc8 <Timer_enuInterruptEnable+0x4a>
    1db2:	8c 81       	ldd	r24, Y+4	; 0x04
    1db4:	9d 81       	ldd	r25, Y+5	; 0x05
    1db6:	8c 33       	cpi	r24, 0x3C	; 60
    1db8:	91 05       	cpc	r25, r1
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <Timer_enuInterruptEnable+0x56>
    1dbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1dbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc0:	2d 33       	cpi	r18, 0x3D	; 61
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	79 f0       	breq	.+30     	; 0x1de4 <Timer_enuInterruptEnable+0x66>
    1dc6:	26 c0       	rjmp	.+76     	; 0x1e14 <Timer_enuInterruptEnable+0x96>
    1dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dca:	9d 81       	ldd	r25, Y+5	; 0x05
    1dcc:	83 34       	cpi	r24, 0x43	; 67
    1dce:	91 05       	cpc	r25, r1
    1dd0:	c9 f0       	breq	.+50     	; 0x1e04 <Timer_enuInterruptEnable+0x86>
    1dd2:	20 c0       	rjmp	.+64     	; 0x1e14 <Timer_enuInterruptEnable+0x96>
	{
		case TOIE0	:	SET_BIT( TIMSK , TOIE0_BIT);
    1dd4:	a9 e5       	ldi	r26, 0x59	; 89
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e9 e5       	ldi	r30, 0x59	; 89
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	81 60       	ori	r24, 0x01	; 1
    1de0:	8c 93       	st	X, r24
    1de2:	1a c0       	rjmp	.+52     	; 0x1e18 <Timer_enuInterruptEnable+0x9a>
						break;
		case OCIE0	:	SET_BIT( TIMSK , OCIE0_BIT);
    1de4:	a9 e5       	ldi	r26, 0x59	; 89
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e9 e5       	ldi	r30, 0x59	; 89
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	82 60       	ori	r24, 0x02	; 2
    1df0:	8c 93       	st	X, r24
    1df2:	12 c0       	rjmp	.+36     	; 0x1e18 <Timer_enuInterruptEnable+0x9a>
						break;
		case TOIE2	:	SET_BIT( TIMSK , TOIE2_BIT);
    1df4:	a9 e5       	ldi	r26, 0x59	; 89
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e9 e5       	ldi	r30, 0x59	; 89
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	80 64       	ori	r24, 0x40	; 64
    1e00:	8c 93       	st	X, r24
    1e02:	0a c0       	rjmp	.+20     	; 0x1e18 <Timer_enuInterruptEnable+0x9a>
						break;
		case OCIE2	:	SET_BIT( TIMSK , OCIE2_BIT);
    1e04:	a9 e5       	ldi	r26, 0x59	; 89
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e9 e5       	ldi	r30, 0x59	; 89
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 68       	ori	r24, 0x80	; 128
    1e10:	8c 93       	st	X, r24
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <Timer_enuInterruptEnable+0x9a>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}
	_SEI_ ;																// Enable Global Interrupts
    1e18:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	19 f0       	breq	.+6      	; 0x1e26 <Timer_enuInterruptEnable+0xa8>
    1e20:	99 81       	ldd	r25, Y+1	; 0x01
    1e22:	9b 83       	std	Y+3, r25	; 0x03
    1e24:	01 c0       	rjmp	.+2      	; 0x1e28 <Timer_enuInterruptEnable+0xaa>
    1e26:	1b 82       	std	Y+3, r1	; 0x03
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <Timer_enuInterruptDisable>:

ES_t Timer_enuInterruptDisable( u8 Copy_u8TimerIntName)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <Timer_enuInterruptDisable+0x6>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <Timer_enuInterruptDisable+0x8>
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <Timer_enuInterruptDisable+0xa>
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
    1e48:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8SREG = SREG ;
    1e4e:	ef e5       	ldi	r30, 0x5F	; 95
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	89 83       	std	Y+1, r24	; 0x01
	_CLI_ ;																// Disable ALL Interrupts
    1e56:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	3e 83       	std	Y+6, r19	; 0x06
    1e60:	2d 83       	std	Y+5, r18	; 0x05
    1e62:	8d 81       	ldd	r24, Y+5	; 0x05
    1e64:	9e 81       	ldd	r25, Y+6	; 0x06
    1e66:	82 34       	cpi	r24, 0x42	; 66
    1e68:	91 05       	cpc	r25, r1
    1e6a:	31 f1       	breq	.+76     	; 0x1eb8 <Timer_enuInterruptDisable+0x7e>
    1e6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e70:	23 34       	cpi	r18, 0x43	; 67
    1e72:	31 05       	cpc	r19, r1
    1e74:	5c f4       	brge	.+22     	; 0x1e8c <Timer_enuInterruptDisable+0x52>
    1e76:	8d 81       	ldd	r24, Y+5	; 0x05
    1e78:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7a:	8c 33       	cpi	r24, 0x3C	; 60
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	61 f0       	breq	.+24     	; 0x1e98 <Timer_enuInterruptDisable+0x5e>
    1e80:	2d 81       	ldd	r18, Y+5	; 0x05
    1e82:	3e 81       	ldd	r19, Y+6	; 0x06
    1e84:	2d 33       	cpi	r18, 0x3D	; 61
    1e86:	31 05       	cpc	r19, r1
    1e88:	79 f0       	breq	.+30     	; 0x1ea8 <Timer_enuInterruptDisable+0x6e>
    1e8a:	26 c0       	rjmp	.+76     	; 0x1ed8 <Timer_enuInterruptDisable+0x9e>
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	83 34       	cpi	r24, 0x43	; 67
    1e92:	91 05       	cpc	r25, r1
    1e94:	c9 f0       	breq	.+50     	; 0x1ec8 <Timer_enuInterruptDisable+0x8e>
    1e96:	20 c0       	rjmp	.+64     	; 0x1ed8 <Timer_enuInterruptDisable+0x9e>
	{
		case TOIE0	:	CLR_BIT( TIMSK , TOIE0_BIT);
    1e98:	a9 e5       	ldi	r26, 0x59	; 89
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e9 e5       	ldi	r30, 0x59	; 89
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	8e 7f       	andi	r24, 0xFE	; 254
    1ea4:	8c 93       	st	X, r24
    1ea6:	1a c0       	rjmp	.+52     	; 0x1edc <Timer_enuInterruptDisable+0xa2>
						break;
		case OCIE0	:	CLR_BIT( TIMSK , OCIE0_BIT);
    1ea8:	a9 e5       	ldi	r26, 0x59	; 89
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	e9 e5       	ldi	r30, 0x59	; 89
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	80 81       	ld	r24, Z
    1eb2:	8d 7f       	andi	r24, 0xFD	; 253
    1eb4:	8c 93       	st	X, r24
    1eb6:	12 c0       	rjmp	.+36     	; 0x1edc <Timer_enuInterruptDisable+0xa2>
						break;
		case TOIE2	:	CLR_BIT( TIMSK , TOIE2_BIT);
    1eb8:	a9 e5       	ldi	r26, 0x59	; 89
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e9 e5       	ldi	r30, 0x59	; 89
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	8f 7b       	andi	r24, 0xBF	; 191
    1ec4:	8c 93       	st	X, r24
    1ec6:	0a c0       	rjmp	.+20     	; 0x1edc <Timer_enuInterruptDisable+0xa2>
						break;
		case OCIE2	:	CLR_BIT( TIMSK , OCIE2_BIT);
    1ec8:	a9 e5       	ldi	r26, 0x59	; 89
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e9 e5       	ldi	r30, 0x59	; 89
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	8f 77       	andi	r24, 0x7F	; 127
    1ed4:	8c 93       	st	X, r24
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <Timer_enuInterruptDisable+0xa2>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	8a 83       	std	Y+2, r24	; 0x02
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}

	SREG = Local_u8SREG ;												// Re-Setting Global Interrupts
    1edc:	ef e5       	ldi	r30, 0x5F	; 95
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	19 f0       	breq	.+6      	; 0x1ef0 <Timer_enuInterruptDisable+0xb6>
    1eea:	9a 81       	ldd	r25, Y+2	; 0x02
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	01 c0       	rjmp	.+2      	; 0x1ef2 <Timer_enuInterruptDisable+0xb8>
    1ef0:	1c 82       	std	Y+4, r1	; 0x04
    1ef2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ef4:	26 96       	adiw	r28, 0x06	; 6
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <Timer_enuCallBack>:
	return ( ( Local_u8Status)? TRUE : FALSE ) ;
}
#endif

ES_t Timer_enuCallBack( u8 Copy_u8TimerIntName , void (*Copy_pAppFun)(void) )
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	00 d0       	rcall	.+0      	; 0x1f0c <Timer_enuCallBack+0x6>
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <Timer_enuCallBack+0x8>
    1f0e:	0f 92       	push	r0
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	8b 83       	std	Y+3, r24	; 0x03
    1f16:	7d 83       	std	Y+5, r23	; 0x05
    1f18:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_OUT_RANGE;
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pAppFun != NULL )
    1f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f20:	9d 81       	ldd	r25, Y+5	; 0x05
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	41 f1       	breq	.+80     	; 0x1f76 <Timer_enuCallBack+0x70>
    1f26:	23 c0       	rjmp	.+70     	; 0x1f6e <Timer_enuCallBack+0x68>
	{
		for( u8 Local_u8Iter; Local_u8Iter < TIMERS_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrTimerPointers[Local_u8Iter].InterruptName == Copy_u8TimerIntName )
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	c9 01       	movw	r24, r18
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	82 0f       	add	r24, r18
    1f36:	93 1f       	adc	r25, r19
    1f38:	fc 01       	movw	r30, r24
    1f3a:	eb 58       	subi	r30, 0x8B	; 139
    1f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3e:	90 81       	ld	r25, Z
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	98 17       	cp	r25, r24
    1f44:	89 f4       	brne	.+34     	; 0x1f68 <Timer_enuCallBack+0x62>
			{
				Global_AstrTimerPointers[Local_u8Iter].ptrFun = Copy_pAppFun;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	c9 01       	movw	r24, r18
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	82 0f       	add	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	fc 01       	movw	r30, r24
    1f58:	ea 58       	subi	r30, 0x8A	; 138
    1f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK ;
    1f64:	1a 82       	std	Y+2, r1	; 0x02
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <Timer_enuCallBack+0x74>
{
	ES_t Local_enuErrorState = ES_OUT_RANGE;

	if( Copy_pAppFun != NULL )
	{
		for( u8 Local_u8Iter; Local_u8Iter < TIMERS_INTERRUPTS ; Local_u8Iter++ )
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	8f 5f       	subi	r24, 0xFF	; 255
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	84 30       	cpi	r24, 0x04	; 4
    1f72:	d0 f2       	brcs	.-76     	; 0x1f28 <Timer_enuCallBack+0x22>
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <Timer_enuCallBack+0x74>
				Local_enuErrorState = ES_OK ;
				break;
			}
		}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    1f76:	83 e0       	ldi	r24, 0x03	; 3
    1f78:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState ;
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <__vector_4>:
void __vector_5( void )__attribute__((signal));		/*	Timer2	Overflow Interrupt	ISR			*/
void __vector_10( void )__attribute__((signal));	/*	Timer0	Compare Match Interrupt	ISR		*/
void __vector_11( void )__attribute__((signal));	/*	Timer0	Overflow Interrupt	ISR			*/

void __vector_4( void )/*	OCIE2	*/
{
    1f8c:	1f 92       	push	r1
    1f8e:	0f 92       	push	r0
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	0f 92       	push	r0
    1f94:	11 24       	eor	r1, r1
    1f96:	2f 93       	push	r18
    1f98:	3f 93       	push	r19
    1f9a:	4f 93       	push	r20
    1f9c:	5f 93       	push	r21
    1f9e:	6f 93       	push	r22
    1fa0:	7f 93       	push	r23
    1fa2:	8f 93       	push	r24
    1fa4:	9f 93       	push	r25
    1fa6:	af 93       	push	r26
    1fa8:	bf 93       	push	r27
    1faa:	ef 93       	push	r30
    1fac:	ff 93       	push	r31
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[3].ptrFun != NULL )
    1fb6:	80 91 7f 01 	lds	r24, 0x017F
    1fba:	90 91 80 01 	lds	r25, 0x0180
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	29 f0       	breq	.+10     	; 0x1fcc <__vector_4+0x40>
	{
		(*Global_AstrTimerPointers[3].ptrFun)( );
    1fc2:	e0 91 7f 01 	lds	r30, 0x017F
    1fc6:	f0 91 80 01 	lds	r31, 0x0180
    1fca:	09 95       	icall
	}
}
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	ff 91       	pop	r31
    1fd2:	ef 91       	pop	r30
    1fd4:	bf 91       	pop	r27
    1fd6:	af 91       	pop	r26
    1fd8:	9f 91       	pop	r25
    1fda:	8f 91       	pop	r24
    1fdc:	7f 91       	pop	r23
    1fde:	6f 91       	pop	r22
    1fe0:	5f 91       	pop	r21
    1fe2:	4f 91       	pop	r20
    1fe4:	3f 91       	pop	r19
    1fe6:	2f 91       	pop	r18
    1fe8:	0f 90       	pop	r0
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	0f 90       	pop	r0
    1fee:	1f 90       	pop	r1
    1ff0:	18 95       	reti

00001ff2 <__vector_5>:

void __vector_5( void )/*	TOIE2	*/
{
    1ff2:	1f 92       	push	r1
    1ff4:	0f 92       	push	r0
    1ff6:	0f b6       	in	r0, 0x3f	; 63
    1ff8:	0f 92       	push	r0
    1ffa:	11 24       	eor	r1, r1
    1ffc:	2f 93       	push	r18
    1ffe:	3f 93       	push	r19
    2000:	4f 93       	push	r20
    2002:	5f 93       	push	r21
    2004:	6f 93       	push	r22
    2006:	7f 93       	push	r23
    2008:	8f 93       	push	r24
    200a:	9f 93       	push	r25
    200c:	af 93       	push	r26
    200e:	bf 93       	push	r27
    2010:	ef 93       	push	r30
    2012:	ff 93       	push	r31
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[2].ptrFun != NULL )
    201c:	80 91 7c 01 	lds	r24, 0x017C
    2020:	90 91 7d 01 	lds	r25, 0x017D
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	29 f0       	breq	.+10     	; 0x2032 <__vector_5+0x40>
	{
		(*Global_AstrTimerPointers[2].ptrFun)( );
    2028:	e0 91 7c 01 	lds	r30, 0x017C
    202c:	f0 91 7d 01 	lds	r31, 0x017D
    2030:	09 95       	icall
	}
}
    2032:	cf 91       	pop	r28
    2034:	df 91       	pop	r29
    2036:	ff 91       	pop	r31
    2038:	ef 91       	pop	r30
    203a:	bf 91       	pop	r27
    203c:	af 91       	pop	r26
    203e:	9f 91       	pop	r25
    2040:	8f 91       	pop	r24
    2042:	7f 91       	pop	r23
    2044:	6f 91       	pop	r22
    2046:	5f 91       	pop	r21
    2048:	4f 91       	pop	r20
    204a:	3f 91       	pop	r19
    204c:	2f 91       	pop	r18
    204e:	0f 90       	pop	r0
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	0f 90       	pop	r0
    2054:	1f 90       	pop	r1
    2056:	18 95       	reti

00002058 <__vector_10>:
void __vector_10( void )/*	OCIE0	*/
{
    2058:	1f 92       	push	r1
    205a:	0f 92       	push	r0
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	0f 92       	push	r0
    2060:	11 24       	eor	r1, r1
    2062:	2f 93       	push	r18
    2064:	3f 93       	push	r19
    2066:	4f 93       	push	r20
    2068:	5f 93       	push	r21
    206a:	6f 93       	push	r22
    206c:	7f 93       	push	r23
    206e:	8f 93       	push	r24
    2070:	9f 93       	push	r25
    2072:	af 93       	push	r26
    2074:	bf 93       	push	r27
    2076:	ef 93       	push	r30
    2078:	ff 93       	push	r31
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[1].ptrFun != NULL )
    2082:	80 91 79 01 	lds	r24, 0x0179
    2086:	90 91 7a 01 	lds	r25, 0x017A
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	29 f0       	breq	.+10     	; 0x2098 <__vector_10+0x40>
	{
		(*Global_AstrTimerPointers[1].ptrFun)( );
    208e:	e0 91 79 01 	lds	r30, 0x0179
    2092:	f0 91 7a 01 	lds	r31, 0x017A
    2096:	09 95       	icall
	}
}
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	ff 91       	pop	r31
    209e:	ef 91       	pop	r30
    20a0:	bf 91       	pop	r27
    20a2:	af 91       	pop	r26
    20a4:	9f 91       	pop	r25
    20a6:	8f 91       	pop	r24
    20a8:	7f 91       	pop	r23
    20aa:	6f 91       	pop	r22
    20ac:	5f 91       	pop	r21
    20ae:	4f 91       	pop	r20
    20b0:	3f 91       	pop	r19
    20b2:	2f 91       	pop	r18
    20b4:	0f 90       	pop	r0
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	0f 90       	pop	r0
    20ba:	1f 90       	pop	r1
    20bc:	18 95       	reti

000020be <__vector_11>:
void __vector_11( void )/*	TOIE0	*/
{
    20be:	1f 92       	push	r1
    20c0:	0f 92       	push	r0
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	0f 92       	push	r0
    20c6:	11 24       	eor	r1, r1
    20c8:	2f 93       	push	r18
    20ca:	3f 93       	push	r19
    20cc:	4f 93       	push	r20
    20ce:	5f 93       	push	r21
    20d0:	6f 93       	push	r22
    20d2:	7f 93       	push	r23
    20d4:	8f 93       	push	r24
    20d6:	9f 93       	push	r25
    20d8:	af 93       	push	r26
    20da:	bf 93       	push	r27
    20dc:	ef 93       	push	r30
    20de:	ff 93       	push	r31
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[0].ptrFun != NULL )
    20e8:	80 91 76 01 	lds	r24, 0x0176
    20ec:	90 91 77 01 	lds	r25, 0x0177
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	29 f0       	breq	.+10     	; 0x20fe <__vector_11+0x40>
	{
		(*Global_AstrTimerPointers[0].ptrFun)( );
    20f4:	e0 91 76 01 	lds	r30, 0x0176
    20f8:	f0 91 77 01 	lds	r31, 0x0177
    20fc:	09 95       	icall
	}
}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	ff 91       	pop	r31
    2104:	ef 91       	pop	r30
    2106:	bf 91       	pop	r27
    2108:	af 91       	pop	r26
    210a:	9f 91       	pop	r25
    210c:	8f 91       	pop	r24
    210e:	7f 91       	pop	r23
    2110:	6f 91       	pop	r22
    2112:	5f 91       	pop	r21
    2114:	4f 91       	pop	r20
    2116:	3f 91       	pop	r19
    2118:	2f 91       	pop	r18
    211a:	0f 90       	pop	r0
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	0f 90       	pop	r0
    2120:	1f 90       	pop	r1
    2122:	18 95       	reti

00002124 <PWM_enuInit>:
																	{ OCIE1A ,	NULL},
																};


ES_t PWM_enuInit( void )
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	29 97       	sbiw	r28, 0x09	; 9
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	8d 83       	std	Y+5, r24	; 0x05

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;
    213c:	1c 82       	std	Y+4, r1	; 0x04

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    213e:	1b 82       	std	Y+3, r1	; 0x03
    2140:	bb c1       	rjmp	.+886    	; 0x24b8 <PWM_enuInit+0x394>
	{
		if( PWMs[Local_u8Iter].TimerNum == TIMER1A || PWMs[Local_u8Iter].TimerNum == TIMER1B )
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	c9 01       	movw	r24, r18
    214a:	88 0f       	add	r24, r24
    214c:	99 1f       	adc	r25, r25
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	82 0f       	add	r24, r18
    2154:	93 1f       	adc	r25, r19
    2156:	fc 01       	movw	r30, r24
    2158:	ec 57       	subi	r30, 0x7C	; 124
    215a:	fe 4f       	sbci	r31, 0xFE	; 254
    215c:	80 81       	ld	r24, Z
    215e:	89 3c       	cpi	r24, 0xC9	; 201
    2160:	89 f0       	breq	.+34     	; 0x2184 <PWM_enuInit+0x60>
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	c9 01       	movw	r24, r18
    216a:	88 0f       	add	r24, r24
    216c:	99 1f       	adc	r25, r25
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	82 0f       	add	r24, r18
    2174:	93 1f       	adc	r25, r19
    2176:	fc 01       	movw	r30, r24
    2178:	ec 57       	subi	r30, 0x7C	; 124
    217a:	fe 4f       	sbci	r31, 0xFE	; 254
    217c:	80 81       	ld	r24, Z
    217e:	8a 3c       	cpi	r24, 0xCA	; 202
    2180:	09 f0       	breq	.+2      	; 0x2184 <PWM_enuInit+0x60>
    2182:	97 c1       	rjmp	.+814    	; 0x24b2 <PWM_enuInit+0x38e>
		{
			if( ! Local_u8Flag )
    2184:	8c 81       	ldd	r24, Y+4	; 0x04
    2186:	88 23       	and	r24, r24
    2188:	09 f0       	breq	.+2      	; 0x218c <PWM_enuInit+0x68>
    218a:	d2 c0       	rjmp	.+420    	; 0x2330 <PWM_enuInit+0x20c>
			{
				Local_u8Flag = 1 ;
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	8c 83       	std	Y+4, r24	; 0x04
				TIMSK &= ~( TC1_INT_EN_MASK ) ;				// Disable All Interrupts before setting all conditions
    2190:	a9 e5       	ldi	r26, 0x59	; 89
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e9 e5       	ldi	r30, 0x59	; 89
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	83 7c       	andi	r24, 0xC3	; 195
    219c:	8c 93       	st	X, r24
				TCCR1A = 0x00 ;								// Masks all bits in TCCR1A
    219e:	ef e4       	ldi	r30, 0x4F	; 79
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	10 82       	st	Z, r1
				TCCR1B = 0x00 ;								// Masks all bits in TCCR1B
    21a4:	ee e4       	ldi	r30, 0x4E	; 78
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	10 82       	st	Z, r1
				u8 Local_u8CopySREG = SREG ;
    21aa:	ef e5       	ldi	r30, 0x5F	; 95
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	8a 83       	std	Y+2, r24	; 0x02
				_CLI_;
    21b2:	f8 94       	cli
				OCR1AH = 0x00 ;								// Clears 1A HIGH-byte Output Compare Register
    21b4:	eb e4       	ldi	r30, 0x4B	; 75
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	10 82       	st	Z, r1
				OCR1AL = 0x00 ;								// Clears 1A LOW-byte Output Compare Register
    21ba:	ea e4       	ldi	r30, 0x4A	; 74
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	10 82       	st	Z, r1
				OCR1BH = 0x00 ;								// Clears 1B HIGH-byte Output Compare Register
    21c0:	e9 e4       	ldi	r30, 0x49	; 73
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	10 82       	st	Z, r1
				OCR1BL = 0x00 ;								// Clears 1B LOW-byte Output Compare Register
    21c6:	e8 e4       	ldi	r30, 0x48	; 72
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	10 82       	st	Z, r1
				SREG = Local_u8CopySREG ;
    21cc:	ef e5       	ldi	r30, 0x5F	; 95
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	80 83       	st	Z, r24

				/****************************************/
				/*			Set Clock Selection			*/
				/****************************************/
				Global_u32Timer1_Clk = PWM_u32TimerClock( TIMER1A , PWMs[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	c9 01       	movw	r24, r18
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	88 0f       	add	r24, r24
    21e2:	99 1f       	adc	r25, r25
    21e4:	82 0f       	add	r24, r18
    21e6:	93 1f       	adc	r25, r19
    21e8:	fc 01       	movw	r30, r24
    21ea:	eb 57       	subi	r30, 0x7B	; 123
    21ec:	fe 4f       	sbci	r31, 0xFE	; 254
    21ee:	90 81       	ld	r25, Z
    21f0:	9e 01       	movw	r18, r28
    21f2:	2a 5f       	subi	r18, 0xFA	; 250
    21f4:	3f 4f       	sbci	r19, 0xFF	; 255
    21f6:	89 ec       	ldi	r24, 0xC9	; 201
    21f8:	69 2f       	mov	r22, r25
    21fa:	a9 01       	movw	r20, r18
    21fc:	0e 94 73 12 	call	0x24e6	; 0x24e6 <PWM_u32TimerClock>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	80 93 33 02 	sts	0x0233, r24
    2208:	90 93 34 02 	sts	0x0234, r25
    220c:	a0 93 35 02 	sts	0x0235, r26
    2210:	b0 93 36 02 	sts	0x0236, r27
				TCCR1B |= ( Local_u8ClkSelect << CLK1_SEL_BITS );
    2214:	ae e4       	ldi	r26, 0x4E	; 78
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	ee e4       	ldi	r30, 0x4E	; 78
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	90 81       	ld	r25, Z
    221e:	8e 81       	ldd	r24, Y+6	; 0x06
    2220:	89 2b       	or	r24, r25
    2222:	8c 93       	st	X, r24

				/****************************************/
				/*		Set Waveform Generation Mode	*/
				/****************************************/
				if( PWMs[Local_u8Iter].WaveGenMode > WGM_MODE_00	&& PWMs[Local_u8Iter].WaveGenMode <= WGM_FAST_OCR1A	&&
    2224:	8b 81       	ldd	r24, Y+3	; 0x03
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	c9 01       	movw	r24, r18
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	82 0f       	add	r24, r18
    2236:	93 1f       	adc	r25, r19
    2238:	fc 01       	movw	r30, r24
    223a:	e9 57       	subi	r30, 0x79	; 121
    223c:	fe 4f       	sbci	r31, 0xFE	; 254
    223e:	80 81       	ld	r24, Z
    2240:	85 36       	cpi	r24, 0x65	; 101
    2242:	08 f4       	brcc	.+2      	; 0x2246 <PWM_enuInit+0x122>
    2244:	73 c0       	rjmp	.+230    	; 0x232c <PWM_enuInit+0x208>
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	c9 01       	movw	r24, r18
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	82 0f       	add	r24, r18
    2258:	93 1f       	adc	r25, r19
    225a:	fc 01       	movw	r30, r24
    225c:	e9 57       	subi	r30, 0x79	; 121
    225e:	fe 4f       	sbci	r31, 0xFE	; 254
    2260:	80 81       	ld	r24, Z
    2262:	84 37       	cpi	r24, 0x74	; 116
    2264:	08 f0       	brcs	.+2      	; 0x2268 <PWM_enuInit+0x144>
    2266:	62 c0       	rjmp	.+196    	; 0x232c <PWM_enuInit+0x208>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	c9 01       	movw	r24, r18
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	82 0f       	add	r24, r18
    227a:	93 1f       	adc	r25, r19
    227c:	fc 01       	movw	r30, r24
    227e:	e9 57       	subi	r30, 0x79	; 121
    2280:	fe 4f       	sbci	r31, 0xFE	; 254
    2282:	80 81       	ld	r24, Z
    2284:	88 36       	cpi	r24, 0x68	; 104
    2286:	09 f4       	brne	.+2      	; 0x228a <PWM_enuInit+0x166>
    2288:	51 c0       	rjmp	.+162    	; 0x232c <PWM_enuInit+0x208>
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	c9 01       	movw	r24, r18
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	82 0f       	add	r24, r18
    229c:	93 1f       	adc	r25, r19
    229e:	fc 01       	movw	r30, r24
    22a0:	e9 57       	subi	r30, 0x79	; 121
    22a2:	fe 4f       	sbci	r31, 0xFE	; 254
    22a4:	80 81       	ld	r24, Z
    22a6:	80 37       	cpi	r24, 0x70	; 112
    22a8:	09 f4       	brne	.+2      	; 0x22ac <PWM_enuInit+0x188>
    22aa:	40 c0       	rjmp	.+128    	; 0x232c <PWM_enuInit+0x208>
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	28 2f       	mov	r18, r24
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	c9 01       	movw	r24, r18
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	88 0f       	add	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	82 0f       	add	r24, r18
    22be:	93 1f       	adc	r25, r19
    22c0:	fc 01       	movw	r30, r24
    22c2:	e9 57       	subi	r30, 0x79	; 121
    22c4:	fe 4f       	sbci	r31, 0xFE	; 254
    22c6:	80 81       	ld	r24, Z
    22c8:	81 37       	cpi	r24, 0x71	; 113
    22ca:	81 f1       	breq	.+96     	; 0x232c <PWM_enuInit+0x208>
					PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_04	&& PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_12	&&
					PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_13	)
				{
					u8 Local_u8WGM = PWMs[Local_u8Iter].WaveGenMode - WGM_MODE_00 ;
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	c9 01       	movw	r24, r18
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	82 0f       	add	r24, r18
    22de:	93 1f       	adc	r25, r19
    22e0:	fc 01       	movw	r30, r24
    22e2:	e9 57       	subi	r30, 0x79	; 121
    22e4:	fe 4f       	sbci	r31, 0xFE	; 254
    22e6:	80 81       	ld	r24, Z
    22e8:	84 56       	subi	r24, 0x64	; 100
    22ea:	89 83       	std	Y+1, r24	; 0x01
					TCCR1A |= ( ( Local_u8WGM & _TWO_BITS_MASK_ ) << WGM1A_SEL_BITS );
    22ec:	af e4       	ldi	r26, 0x4F	; 79
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ef e4       	ldi	r30, 0x4F	; 79
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	98 2f       	mov	r25, r24
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	83 70       	andi	r24, 0x03	; 3
    22fc:	89 2b       	or	r24, r25
    22fe:	8c 93       	st	X, r24
					TCCR1B |= ( ( ( Local_u8WGM >> BIT1_MASK) & _TWO_BITS_MASK_ ) << WGM1B_SEL_BITS );
    2300:	ae e4       	ldi	r26, 0x4E	; 78
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	ee e4       	ldi	r30, 0x4E	; 78
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	28 2f       	mov	r18, r24
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	86 95       	lsr	r24
    2310:	86 95       	lsr	r24
    2312:	88 2f       	mov	r24, r24
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	83 70       	andi	r24, 0x03	; 3
    2318:	90 70       	andi	r25, 0x00	; 0
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	82 2b       	or	r24, r18
    2328:	8c 93       	st	X, r24
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <PWM_enuInit+0x20c>
				}
				else
				{
					Local_enuErrorState = ES_OUT_RANGE ;
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	8d 83       	std	Y+5, r24	; 0x05
				}
			}
			/****************************************/
			/*		Set Compare Output Mode			*/
			/****************************************/
			if( PWMs[Local_u8Iter].CompOutMode == COMP_NON_INVERTED ||
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	c9 01       	movw	r24, r18
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	fc 01       	movw	r30, r24
    2346:	ea 57       	subi	r30, 0x7A	; 122
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	80 81       	ld	r24, Z
    234c:	86 31       	cpi	r24, 0x16	; 22
    234e:	89 f0       	breq	.+34     	; 0x2372 <PWM_enuInit+0x24e>
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	c9 01       	movw	r24, r18
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	82 0f       	add	r24, r18
    2362:	93 1f       	adc	r25, r19
    2364:	fc 01       	movw	r30, r24
    2366:	ea 57       	subi	r30, 0x7A	; 122
    2368:	fe 4f       	sbci	r31, 0xFE	; 254
    236a:	80 81       	ld	r24, Z
    236c:	87 31       	cpi	r24, 0x17	; 23
    236e:	09 f0       	breq	.+2      	; 0x2372 <PWM_enuInit+0x24e>
    2370:	53 c0       	rjmp	.+166    	; 0x2418 <PWM_enuInit+0x2f4>
				PWMs[Local_u8Iter].CompOutMode == COMP_INVERTED		)
			{
				if( PWMs[Local_u8Iter].TimerNum == TIMER1A )
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	c9 01       	movw	r24, r18
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	82 0f       	add	r24, r18
    2384:	93 1f       	adc	r25, r19
    2386:	fc 01       	movw	r30, r24
    2388:	ec 57       	subi	r30, 0x7C	; 124
    238a:	fe 4f       	sbci	r31, 0xFE	; 254
    238c:	80 81       	ld	r24, Z
    238e:	89 3c       	cpi	r24, 0xC9	; 201
    2390:	19 f5       	brne	.+70     	; 0x23d8 <PWM_enuInit+0x2b4>
				{
					/****************************************/
					/*		Set 1A Compare Output Mode		*/
					/****************************************/
					TCCR1A |= ( ( PWMs[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COM1A_SEL_BITS );
    2392:	af e4       	ldi	r26, 0x4F	; 79
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	ef e4       	ldi	r30, 0x4F	; 79
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	48 2f       	mov	r20, r24
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	c9 01       	movw	r24, r18
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	88 0f       	add	r24, r24
    23ac:	99 1f       	adc	r25, r25
    23ae:	82 0f       	add	r24, r18
    23b0:	93 1f       	adc	r25, r19
    23b2:	fc 01       	movw	r30, r24
    23b4:	ea 57       	subi	r30, 0x7A	; 122
    23b6:	fe 4f       	sbci	r31, 0xFE	; 254
    23b8:	80 81       	ld	r24, Z
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	44 97       	sbiw	r24, 0x14	; 20
    23c0:	00 24       	eor	r0, r0
    23c2:	96 95       	lsr	r25
    23c4:	87 95       	ror	r24
    23c6:	07 94       	ror	r0
    23c8:	96 95       	lsr	r25
    23ca:	87 95       	ror	r24
    23cc:	07 94       	ror	r0
    23ce:	98 2f       	mov	r25, r24
    23d0:	80 2d       	mov	r24, r0
    23d2:	84 2b       	or	r24, r20
    23d4:	8c 93       	st	X, r24
    23d6:	22 c0       	rjmp	.+68     	; 0x241c <PWM_enuInit+0x2f8>
				else
				{
					/****************************************/
					/*		Set 1B Compare Output Mode		*/
					/****************************************/
					TCCR1A |= ( ( PWMs[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COM1B_SEL_BITS );
    23d8:	af e4       	ldi	r26, 0x4F	; 79
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ef e4       	ldi	r30, 0x4F	; 79
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	48 2f       	mov	r20, r24
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	c9 01       	movw	r24, r18
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	82 0f       	add	r24, r18
    23f6:	93 1f       	adc	r25, r19
    23f8:	fc 01       	movw	r30, r24
    23fa:	ea 57       	subi	r30, 0x7A	; 122
    23fc:	fe 4f       	sbci	r31, 0xFE	; 254
    23fe:	80 81       	ld	r24, Z
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	44 97       	sbiw	r24, 0x14	; 20
    2406:	82 95       	swap	r24
    2408:	92 95       	swap	r25
    240a:	90 7f       	andi	r25, 0xF0	; 240
    240c:	98 27       	eor	r25, r24
    240e:	80 7f       	andi	r24, 0xF0	; 240
    2410:	98 27       	eor	r25, r24
    2412:	84 2b       	or	r24, r20
    2414:	8c 93       	st	X, r24
    2416:	02 c0       	rjmp	.+4      	; 0x241c <PWM_enuInit+0x2f8>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	8d 83       	std	Y+5, r24	; 0x05
			}

			/****************************************/
			/*			Set Interrupt Mode			*/
			/****************************************/
			switch( PWMs[Local_u8Iter].InterruptMode )
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	c9 01       	movw	r24, r18
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	82 0f       	add	r24, r18
    242e:	93 1f       	adc	r25, r19
    2430:	fc 01       	movw	r30, r24
    2432:	e8 57       	subi	r30, 0x78	; 120
    2434:	fe 4f       	sbci	r31, 0xFE	; 254
    2436:	80 81       	ld	r24, Z
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	39 87       	std	Y+9, r19	; 0x09
    243e:	28 87       	std	Y+8, r18	; 0x08
    2440:	88 85       	ldd	r24, Y+8	; 0x08
    2442:	99 85       	ldd	r25, Y+9	; 0x09
    2444:	83 33       	cpi	r24, 0x33	; 51
    2446:	91 05       	cpc	r25, r1
    2448:	31 f0       	breq	.+12     	; 0x2456 <PWM_enuInit+0x332>
    244a:	28 85       	ldd	r18, Y+8	; 0x08
    244c:	39 85       	ldd	r19, Y+9	; 0x09
    244e:	24 33       	cpi	r18, 0x34	; 52
    2450:	31 05       	cpc	r19, r1
    2452:	49 f0       	breq	.+18     	; 0x2466 <PWM_enuInit+0x342>
    2454:	28 c0       	rjmp	.+80     	; 0x24a6 <PWM_enuInit+0x382>
			{
				case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1_BIT );				/*	Enable TOIE1 Interrupt */
    2456:	a9 e5       	ldi	r26, 0x59	; 89
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e9 e5       	ldi	r30, 0x59	; 89
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	84 60       	ori	r24, 0x04	; 4
    2462:	8c 93       	st	X, r24
    2464:	22 c0       	rjmp	.+68     	; 0x24aa <PWM_enuInit+0x386>
											break;
				case PWM_OUT_COMP_INT	:	if( PWMs[Local_u8Iter].TimerNum == TIMER1B )
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	c9 01       	movw	r24, r18
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	82 0f       	add	r24, r18
    2478:	93 1f       	adc	r25, r19
    247a:	fc 01       	movw	r30, r24
    247c:	ec 57       	subi	r30, 0x7C	; 124
    247e:	fe 4f       	sbci	r31, 0xFE	; 254
    2480:	80 81       	ld	r24, Z
    2482:	8a 3c       	cpi	r24, 0xCA	; 202
    2484:	41 f4       	brne	.+16     	; 0x2496 <PWM_enuInit+0x372>
											{
												SET_BIT( TIMSK , OCIE1B_BIT );			/*	Enable OCIE1B Interrupt */
    2486:	a9 e5       	ldi	r26, 0x59	; 89
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e9 e5       	ldi	r30, 0x59	; 89
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	88 60       	ori	r24, 0x08	; 8
    2492:	8c 93       	st	X, r24
    2494:	0a c0       	rjmp	.+20     	; 0x24aa <PWM_enuInit+0x386>
											}
											else
											{
												SET_BIT( TIMSK , OCIE1A_BIT );			/*	Enable OCIE1A Interrupt */
    2496:	a9 e5       	ldi	r26, 0x59	; 89
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e9 e5       	ldi	r30, 0x59	; 89
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	80 61       	ori	r24, 0x10	; 16
    24a2:	8c 93       	st	X, r24
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <PWM_enuInit+0x386>
											}
											break;
				default :	Local_enuErrorState = ES_OUT_RANGE ;
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	8d 83       	std	Y+5, r24	; 0x05
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	8b 83       	std	Y+3, r24	; 0x03
    24b0:	03 c0       	rjmp	.+6      	; 0x24b8 <PWM_enuInit+0x394>
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE ;
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	06 c0       	rjmp	.+12     	; 0x24c4 <PWM_enuInit+0x3a0>
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    24b8:	90 91 81 01 	lds	r25, 0x0181
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	89 17       	cp	r24, r25
    24c0:	08 f4       	brcc	.+2      	; 0x24c4 <PWM_enuInit+0x3a0>
    24c2:	3f ce       	rjmp	.-898    	; 0x2142 <PWM_enuInit+0x1e>
			#warning " PWM_Init(): Non Supported Timer Number , Initialization is terminated."
			break;
		}
	}

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	19 f0       	breq	.+6      	; 0x24d0 <PWM_enuInit+0x3ac>
    24ca:	3d 81       	ldd	r19, Y+5	; 0x05
    24cc:	3f 83       	std	Y+7, r19	; 0x07
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <PWM_enuInit+0x3ae>
    24d0:	1f 82       	std	Y+7, r1	; 0x07
    24d2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    24d4:	29 96       	adiw	r28, 0x09	; 9
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <PWM_u32TimerClock>:

static u32 PWM_u32TimerClock( u8 Copy_u8TimerNum ,u8 Copy_u8ClkSelectNum ,u8 *Copy_pu8ClkSelectPrescalar )
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	2a 97       	sbiw	r28, 0x0a	; 10
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	8d 83       	std	Y+5, r24	; 0x05
    24fc:	6e 83       	std	Y+6, r22	; 0x06
    24fe:	58 87       	std	Y+8, r21	; 0x08
    2500:	4f 83       	std	Y+7, r20	; 0x07
	u32 Copy_u32TimerClk = CPU_CLOCK;
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	94 e2       	ldi	r25, 0x24	; 36
    2506:	a4 ef       	ldi	r26, 0xF4	; 244
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	89 83       	std	Y+1, r24	; 0x01
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	ab 83       	std	Y+3, r26	; 0x03
    2510:	bc 83       	std	Y+4, r27	; 0x04


	switch( Copy_u8ClkSelectNum )
    2512:	8e 81       	ldd	r24, Y+6	; 0x06
    2514:	28 2f       	mov	r18, r24
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	3a 87       	std	Y+10, r19	; 0x0a
    251a:	29 87       	std	Y+9, r18	; 0x09
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	8e 30       	cpi	r24, 0x0E	; 14
    2522:	91 05       	cpc	r25, r1
    2524:	09 f4       	brne	.+2      	; 0x2528 <PWM_u32TimerClock+0x42>
    2526:	56 c0       	rjmp	.+172    	; 0x25d4 <PWM_u32TimerClock+0xee>
    2528:	29 85       	ldd	r18, Y+9	; 0x09
    252a:	3a 85       	ldd	r19, Y+10	; 0x0a
    252c:	2f 30       	cpi	r18, 0x0F	; 15
    252e:	31 05       	cpc	r19, r1
    2530:	84 f4       	brge	.+32     	; 0x2552 <PWM_u32TimerClock+0x6c>
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	8b 30       	cpi	r24, 0x0B	; 11
    2538:	91 05       	cpc	r25, r1
    253a:	91 f1       	breq	.+100    	; 0x25a0 <PWM_u32TimerClock+0xba>
    253c:	29 85       	ldd	r18, Y+9	; 0x09
    253e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2540:	2c 30       	cpi	r18, 0x0C	; 12
    2542:	31 05       	cpc	r19, r1
    2544:	91 f1       	breq	.+100    	; 0x25aa <PWM_u32TimerClock+0xc4>
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	8a 30       	cpi	r24, 0x0A	; 10
    254c:	91 05       	cpc	r25, r1
    254e:	01 f1       	breq	.+64     	; 0x2590 <PWM_u32TimerClock+0xaa>
    2550:	97 c0       	rjmp	.+302    	; 0x2680 <PWM_u32TimerClock+0x19a>
    2552:	29 85       	ldd	r18, Y+9	; 0x09
    2554:	3a 85       	ldd	r19, Y+10	; 0x0a
    2556:	21 31       	cpi	r18, 0x11	; 17
    2558:	31 05       	cpc	r19, r1
    255a:	09 f4       	brne	.+2      	; 0x255e <PWM_u32TimerClock+0x78>
    255c:	61 c0       	rjmp	.+194    	; 0x2620 <PWM_u32TimerClock+0x13a>
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	82 31       	cpi	r24, 0x12	; 18
    2564:	91 05       	cpc	r25, r1
    2566:	3c f4       	brge	.+14     	; 0x2576 <PWM_u32TimerClock+0x90>
    2568:	29 85       	ldd	r18, Y+9	; 0x09
    256a:	3a 85       	ldd	r19, Y+10	; 0x0a
    256c:	20 31       	cpi	r18, 0x10	; 16
    256e:	31 05       	cpc	r19, r1
    2570:	09 f4       	brne	.+2      	; 0x2574 <PWM_u32TimerClock+0x8e>
    2572:	45 c0       	rjmp	.+138    	; 0x25fe <PWM_u32TimerClock+0x118>
    2574:	85 c0       	rjmp	.+266    	; 0x2680 <PWM_u32TimerClock+0x19a>
    2576:	89 85       	ldd	r24, Y+9	; 0x09
    2578:	9a 85       	ldd	r25, Y+10	; 0x0a
    257a:	82 31       	cpi	r24, 0x12	; 18
    257c:	91 05       	cpc	r25, r1
    257e:	09 f4       	brne	.+2      	; 0x2582 <PWM_u32TimerClock+0x9c>
    2580:	65 c0       	rjmp	.+202    	; 0x264c <PWM_u32TimerClock+0x166>
    2582:	29 85       	ldd	r18, Y+9	; 0x09
    2584:	3a 85       	ldd	r19, Y+10	; 0x0a
    2586:	23 31       	cpi	r18, 0x13	; 19
    2588:	31 05       	cpc	r19, r1
    258a:	09 f4       	brne	.+2      	; 0x258e <PWM_u32TimerClock+0xa8>
    258c:	6c c0       	rjmp	.+216    	; 0x2666 <PWM_u32TimerClock+0x180>
    258e:	78 c0       	rjmp	.+240    	; 0x2680 <PWM_u32TimerClock+0x19a>
	{
		case PWM_NO_CLK		:	*Copy_pu8ClkSelectPrescalar = 0;
    2590:	ef 81       	ldd	r30, Y+7	; 0x07
    2592:	f8 85       	ldd	r31, Y+8	; 0x08
    2594:	10 82       	st	Z, r1
							Copy_u32TimerClk = 0 ;
    2596:	19 82       	std	Y+1, r1	; 0x01
    2598:	1a 82       	std	Y+2, r1	; 0x02
    259a:	1b 82       	std	Y+3, r1	; 0x03
    259c:	1c 82       	std	Y+4, r1	; 0x04
    259e:	74 c0       	rjmp	.+232    	; 0x2688 <PWM_u32TimerClock+0x1a2>
							break;
		case PWM_PRES_1		:	*Copy_pu8ClkSelectPrescalar = 1;
    25a0:	ef 81       	ldd	r30, Y+7	; 0x07
    25a2:	f8 85       	ldd	r31, Y+8	; 0x08
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	80 83       	st	Z, r24
    25a8:	6f c0       	rjmp	.+222    	; 0x2688 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_8 	:	*Copy_pu8ClkSelectPrescalar = 2;
    25aa:	ef 81       	ldd	r30, Y+7	; 0x07
    25ac:	f8 85       	ldd	r31, Y+8	; 0x08
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	80 83       	st	Z, r24
							Copy_u32TimerClk >>= 3 ;
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	ab 81       	ldd	r26, Y+3	; 0x03
    25b8:	bc 81       	ldd	r27, Y+4	; 0x04
    25ba:	68 94       	set
    25bc:	12 f8       	bld	r1, 2
    25be:	b6 95       	lsr	r27
    25c0:	a7 95       	ror	r26
    25c2:	97 95       	ror	r25
    25c4:	87 95       	ror	r24
    25c6:	16 94       	lsr	r1
    25c8:	d1 f7       	brne	.-12     	; 0x25be <PWM_u32TimerClock+0xd8>
    25ca:	89 83       	std	Y+1, r24	; 0x01
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	ab 83       	std	Y+3, r26	; 0x03
    25d0:	bc 83       	std	Y+4, r27	; 0x04
    25d2:	5a c0       	rjmp	.+180    	; 0x2688 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_64 	:	Copy_u32TimerClk >>= 6 ;
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	9a 81       	ldd	r25, Y+2	; 0x02
    25d8:	ab 81       	ldd	r26, Y+3	; 0x03
    25da:	bc 81       	ldd	r27, Y+4	; 0x04
    25dc:	68 94       	set
    25de:	15 f8       	bld	r1, 5
    25e0:	b6 95       	lsr	r27
    25e2:	a7 95       	ror	r26
    25e4:	97 95       	ror	r25
    25e6:	87 95       	ror	r24
    25e8:	16 94       	lsr	r1
    25ea:	d1 f7       	brne	.-12     	; 0x25e0 <PWM_u32TimerClock+0xfa>
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	ab 83       	std	Y+3, r26	; 0x03
    25f2:	bc 83       	std	Y+4, r27	; 0x04
							*Copy_pu8ClkSelectPrescalar = 3;
    25f4:	ef 81       	ldd	r30, Y+7	; 0x07
    25f6:	f8 85       	ldd	r31, Y+8	; 0x08
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	80 83       	st	Z, r24
    25fc:	45 c0       	rjmp	.+138    	; 0x2688 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_256	 :	Copy_u32TimerClk >>= 8 ;
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	9a 81       	ldd	r25, Y+2	; 0x02
    2602:	ab 81       	ldd	r26, Y+3	; 0x03
    2604:	bc 81       	ldd	r27, Y+4	; 0x04
    2606:	89 2f       	mov	r24, r25
    2608:	9a 2f       	mov	r25, r26
    260a:	ab 2f       	mov	r26, r27
    260c:	bb 27       	eor	r27, r27
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	ab 83       	std	Y+3, r26	; 0x03
    2614:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 6;
							//else
							*Copy_pu8ClkSelectPrescalar = 4;
    2616:	ef 81       	ldd	r30, Y+7	; 0x07
    2618:	f8 85       	ldd	r31, Y+8	; 0x08
    261a:	84 e0       	ldi	r24, 0x04	; 4
    261c:	80 83       	st	Z, r24
    261e:	34 c0       	rjmp	.+104    	; 0x2688 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_1024 :	Copy_u32TimerClk >>= 10 ;
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	ab 81       	ldd	r26, Y+3	; 0x03
    2626:	bc 81       	ldd	r27, Y+4	; 0x04
    2628:	07 2e       	mov	r0, r23
    262a:	7a e0       	ldi	r23, 0x0A	; 10
    262c:	b6 95       	lsr	r27
    262e:	a7 95       	ror	r26
    2630:	97 95       	ror	r25
    2632:	87 95       	ror	r24
    2634:	7a 95       	dec	r23
    2636:	d1 f7       	brne	.-12     	; 0x262c <PWM_u32TimerClock+0x146>
    2638:	70 2d       	mov	r23, r0
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	ab 83       	std	Y+3, r26	; 0x03
    2640:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 7;
							//else
							*Copy_pu8ClkSelectPrescalar = 5;
    2642:	ef 81       	ldd	r30, Y+7	; 0x07
    2644:	f8 85       	ldd	r31, Y+8	; 0x08
    2646:	85 e0       	ldi	r24, 0x05	; 5
    2648:	80 83       	st	Z, r24
    264a:	1e c0       	rjmp	.+60     	; 0x2688 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_EXT_CLK_FALL	 :		Copy_u32TimerClk = EXT_CLOCK ;
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	9f ef       	ldi	r25, 0xFF	; 255
    2650:	af ef       	ldi	r26, 0xFF	; 255
    2652:	bf ef       	ldi	r27, 0xFF	; 255
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	ab 83       	std	Y+3, r26	; 0x03
    265a:	bc 83       	std	Y+4, r27	; 0x04
									//if( Copy_u8TimerNum == TIMER0 || Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B || Copy_u8TimerNum == TIMER1 )
									//{
										*Copy_pu8ClkSelectPrescalar = 6;
    265c:	ef 81       	ldd	r30, Y+7	; 0x07
    265e:	f8 85       	ldd	r31, Y+8	; 0x08
    2660:	86 e0       	ldi	r24, 0x06	; 6
    2662:	80 83       	st	Z, r24
    2664:	11 c0       	rjmp	.+34     	; 0x2688 <PWM_u32TimerClock+0x1a2>
										//break;
									//}
									//#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		case PWM_EXT_CLK_RISE	 :		Copy_u32TimerClk = EXT_CLOCK ;
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	9f ef       	ldi	r25, 0xFF	; 255
    266a:	af ef       	ldi	r26, 0xFF	; 255
    266c:	bf ef       	ldi	r27, 0xFF	; 255
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	ab 83       	std	Y+3, r26	; 0x03
    2674:	bc 83       	std	Y+4, r27	; 0x04
									//if( Copy_u8TimerNum == TIMER0 || Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B || Copy_u8TimerNum == TIMER1 )
									//{
										*Copy_pu8ClkSelectPrescalar = 7;
    2676:	ef 81       	ldd	r30, Y+7	; 0x07
    2678:	f8 85       	ldd	r31, Y+8	; 0x08
    267a:	87 e0       	ldi	r24, 0x07	; 7
    267c:	80 83       	st	Z, r24
    267e:	04 c0       	rjmp	.+8      	; 0x2688 <PWM_u32TimerClock+0x1a2>
									//	break;
									//}
									//#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		default:	Copy_u32TimerClk = 0;
    2680:	19 82       	std	Y+1, r1	; 0x01
    2682:	1a 82       	std	Y+2, r1	; 0x02
    2684:	1b 82       	std	Y+3, r1	; 0x03
    2686:	1c 82       	std	Y+4, r1	; 0x04
					#warning "Unsupported Clock mode is selected , Timer is disabled"
	}

	return Copy_u32TimerClk ;
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	9a 81       	ldd	r25, Y+2	; 0x02
    268c:	ab 81       	ldd	r26, Y+3	; 0x03
    268e:	bc 81       	ldd	r27, Y+4	; 0x04

}
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	2a 96       	adiw	r28, 0x0a	; 10
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <PWM_enuSetClkPrescaler>:
	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif

ES_t PWM_enuSetClkPrescaler( u8 Copy_u8TimerNum , u8 Copy_u8PrescalerValue )
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	2a 97       	sbiw	r28, 0x0a	; 10
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
    26ba:	88 87       	std	Y+8, r24	; 0x08
    26bc:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8ClkSelectPrescaler = PWM_NO_CLK ;
    26c2:	8a e0       	ldi	r24, 0x0A	; 10
    26c4:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    26c6:	e9 e5       	ldi	r30, 0x59	; 89
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32TimerClk = PWM_u32TimerClock( Copy_u8TimerNum , Copy_u8PrescalerValue , &Local_u8ClkSelectPrescaler ) ;
    26ce:	9e 01       	movw	r18, r28
    26d0:	29 5f       	subi	r18, 0xF9	; 249
    26d2:	3f 4f       	sbci	r19, 0xFF	; 255
    26d4:	88 85       	ldd	r24, Y+8	; 0x08
    26d6:	69 85       	ldd	r22, Y+9	; 0x09
    26d8:	a9 01       	movw	r20, r18
    26da:	0e 94 73 12 	call	0x24e6	; 0x24e6 <PWM_u32TimerClock>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	ab 83       	std	Y+3, r26	; 0x03
    26e8:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    26ea:	88 85       	ldd	r24, Y+8	; 0x08
    26ec:	89 3c       	cpi	r24, 0xC9	; 201
    26ee:	19 f0       	breq	.+6      	; 0x26f6 <PWM_enuSetClkPrescaler+0x50>
    26f0:	88 85       	ldd	r24, Y+8	; 0x08
    26f2:	8a 3c       	cpi	r24, 0xCA	; 202
    26f4:	19 f5       	brne	.+70     	; 0x273c <PWM_enuSetClkPrescaler+0x96>
	{
		TIMSK &= ~( TC1_INT_EN_MASK ) ;								// Disable Timer1 Interrupts
    26f6:	a9 e5       	ldi	r26, 0x59	; 89
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e9 e5       	ldi	r30, 0x59	; 89
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	80 81       	ld	r24, Z
    2700:	83 7c       	andi	r24, 0xC3	; 195
    2702:	8c 93       	st	X, r24
		TCCR1B &= ~( CLK1_SEL_BITS_MASK );							// Masking Clock Select bits
    2704:	ae e4       	ldi	r26, 0x4E	; 78
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	ee e4       	ldi	r30, 0x4E	; 78
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	88 7f       	andi	r24, 0xF8	; 248
    2710:	8c 93       	st	X, r24
		TCCR1B |= ( Local_u8ClkSelectPrescaler  << CLK1_SEL_BITS );	// Setting New Prescaler
    2712:	ae e4       	ldi	r26, 0x4E	; 78
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	ee e4       	ldi	r30, 0x4E	; 78
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	90 81       	ld	r25, Z
    271c:	8f 81       	ldd	r24, Y+7	; 0x07
    271e:	89 2b       	or	r24, r25
    2720:	8c 93       	st	X, r24
		Global_u32Timer1_Clk = Local_u32TimerClk ;					// Saving New Actual Timer1 Clock
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	ab 81       	ldd	r26, Y+3	; 0x03
    2728:	bc 81       	ldd	r27, Y+4	; 0x04
    272a:	80 93 33 02 	sts	0x0233, r24
    272e:	90 93 34 02 	sts	0x0234, r25
    2732:	a0 93 35 02 	sts	0x0235, r26
    2736:	b0 93 36 02 	sts	0x0236, r27
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <PWM_enuSetClkPrescaler+0x9a>
#ifndef PWM
		PWMs[ TIMER1A - TIMER1A ].ClkSelect = Copy_u8PrescalerValue ;
		PWMs[ TIMER1B - TIMER1A ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	8e 83       	std	Y+6, r24	; 0x06

	TIMSK = Local_u8CopyTIMSK ;										// Re-setting Timer Interrupt Mask Register to its initial Status
    2740:	e9 e5       	ldi	r30, 0x59	; 89
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    2748:	8e 81       	ldd	r24, Y+6	; 0x06
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	19 f0       	breq	.+6      	; 0x2754 <PWM_enuSetClkPrescaler+0xae>
    274e:	8e 81       	ldd	r24, Y+6	; 0x06
    2750:	8a 87       	std	Y+10, r24	; 0x0a
    2752:	01 c0       	rjmp	.+2      	; 0x2756 <PWM_enuSetClkPrescaler+0xb0>
    2754:	1a 86       	std	Y+10, r1	; 0x0a
    2756:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2758:	2a 96       	adiw	r28, 0x0a	; 10
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	cf 91       	pop	r28
    2766:	df 91       	pop	r29
    2768:	08 95       	ret

0000276a <PWM_enuSetCOM_Mode>:

	return Local_enuErrorState ;
}
#endif
ES_t PWM_enuSetCOM_Mode( u8 Copy_u8TimerNum , u8 Copy_u8COM_Mode )
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	00 d0       	rcall	.+0      	; 0x2770 <PWM_enuSetCOM_Mode+0x6>
    2770:	00 d0       	rcall	.+0      	; 0x2772 <PWM_enuSetCOM_Mode+0x8>
    2772:	0f 92       	push	r0
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	8b 83       	std	Y+3, r24	; 0x03
    277a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    2780:	e9 e5       	ldi	r30, 0x59	; 89
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8COM_Mode == COMP_NON_INVERTED ||	Copy_u8COM_Mode == COMP_INVERTED )
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	86 31       	cpi	r24, 0x16	; 22
    278c:	21 f0       	breq	.+8      	; 0x2796 <PWM_enuSetCOM_Mode+0x2c>
    278e:	8c 81       	ldd	r24, Y+4	; 0x04
    2790:	87 31       	cpi	r24, 0x17	; 23
    2792:	09 f0       	breq	.+2      	; 0x2796 <PWM_enuSetCOM_Mode+0x2c>
    2794:	52 c0       	rjmp	.+164    	; 0x283a <PWM_enuSetCOM_Mode+0xd0>
	{
		if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	89 3c       	cpi	r24, 0xC9	; 201
    279a:	21 f0       	breq	.+8      	; 0x27a4 <PWM_enuSetCOM_Mode+0x3a>
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	8a 3c       	cpi	r24, 0xCA	; 202
    27a0:	09 f0       	breq	.+2      	; 0x27a4 <PWM_enuSetCOM_Mode+0x3a>
    27a2:	44 c0       	rjmp	.+136    	; 0x282c <PWM_enuSetCOM_Mode+0xc2>
		{
			TIMSK &= ~( TC1_INT_EN_MASK ) ;													// Disable Timer1 Interrupts
    27a4:	a9 e5       	ldi	r26, 0x59	; 89
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e9 e5       	ldi	r30, 0x59	; 89
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	83 7c       	andi	r24, 0xC3	; 195
    27b0:	8c 93       	st	X, r24
			if( Copy_u8TimerNum == TIMER1A )
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	89 3c       	cpi	r24, 0xC9	; 201
    27b6:	e9 f4       	brne	.+58     	; 0x27f2 <PWM_enuSetCOM_Mode+0x88>
			{
				TCCR1A &= ~( COM1A_SEL_BITS_MASK ) ;										// Masking COM Select bits
    27b8:	af e4       	ldi	r26, 0x4F	; 79
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	ef e4       	ldi	r30, 0x4F	; 79
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	8f 73       	andi	r24, 0x3F	; 63
    27c4:	8c 93       	st	X, r24
				TCCR1A |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COM1A_SEL_BITS ) ;			// Setting New Compare Output Mode
    27c6:	af e4       	ldi	r26, 0x4F	; 79
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	ef e4       	ldi	r30, 0x4F	; 79
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	28 2f       	mov	r18, r24
    27d2:	8c 81       	ldd	r24, Y+4	; 0x04
    27d4:	88 2f       	mov	r24, r24
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	44 97       	sbiw	r24, 0x14	; 20
    27da:	00 24       	eor	r0, r0
    27dc:	96 95       	lsr	r25
    27de:	87 95       	ror	r24
    27e0:	07 94       	ror	r0
    27e2:	96 95       	lsr	r25
    27e4:	87 95       	ror	r24
    27e6:	07 94       	ror	r0
    27e8:	98 2f       	mov	r25, r24
    27ea:	80 2d       	mov	r24, r0
    27ec:	82 2b       	or	r24, r18
    27ee:	8c 93       	st	X, r24
    27f0:	1f c0       	rjmp	.+62     	; 0x2830 <PWM_enuSetCOM_Mode+0xc6>
#ifndef PWM
				PWMs[ TIMER1A - TIMER1A ].CompOutMode = Copy_u8COM_Mode ;
#endif
			}
			else if( Copy_u8TimerNum == TIMER1B )
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	8a 3c       	cpi	r24, 0xCA	; 202
    27f6:	e1 f4       	brne	.+56     	; 0x2830 <PWM_enuSetCOM_Mode+0xc6>
			{
				TCCR1B &= ~( COM1B_SEL_BITS_MASK ) ;										// Masking COM Select bits
    27f8:	ae e4       	ldi	r26, 0x4E	; 78
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	ee e4       	ldi	r30, 0x4E	; 78
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	8f 7c       	andi	r24, 0xCF	; 207
    2804:	8c 93       	st	X, r24
				TCCR1B |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COM1B_SEL_BITS ) ;			// Setting New Compare Output Mode
    2806:	ae e4       	ldi	r26, 0x4E	; 78
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ee e4       	ldi	r30, 0x4E	; 78
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	28 2f       	mov	r18, r24
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	88 2f       	mov	r24, r24
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	44 97       	sbiw	r24, 0x14	; 20
    281a:	82 95       	swap	r24
    281c:	92 95       	swap	r25
    281e:	90 7f       	andi	r25, 0xF0	; 240
    2820:	98 27       	eor	r25, r24
    2822:	80 7f       	andi	r24, 0xF0	; 240
    2824:	98 27       	eor	r25, r24
    2826:	82 2b       	or	r24, r18
    2828:	8c 93       	st	X, r24
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <PWM_enuSetCOM_Mode+0xc6>
			else
			{
				#warning "Timer_enuSetCOM_Mode() : For setting COM mode please Specify TIMER1A / TIMER1B , TIMER1 choice is not allowed. No Action Taken. "
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    282c:	82 e0       	ldi	r24, 0x02	; 2
    282e:	8a 83       	std	Y+2, r24	; 0x02

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    2830:	e9 e5       	ldi	r30, 0x59	; 89
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	80 83       	st	Z, r24
    2838:	02 c0       	rjmp	.+4      	; 0x283e <PWM_enuSetCOM_Mode+0xd4>

	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE ;
    283a:	82 e0       	ldi	r24, 0x02	; 2
    283c:	8a 83       	std	Y+2, r24	; 0x02
		#warning "PWM_enuSetCOM_Mode(): Non Supported Compare Output mode, No Action Taken ."
	}


	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	81 30       	cpi	r24, 0x01	; 1
    2842:	19 f0       	breq	.+6      	; 0x284a <PWM_enuSetCOM_Mode+0xe0>
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	01 c0       	rjmp	.+2      	; 0x284c <PWM_enuSetCOM_Mode+0xe2>
    284a:	1d 82       	std	Y+5, r1	; 0x05
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <PWM_enuSetWGM_Mode>:
	return Local_enuErrorState ;
}
#endif

ES_t PWM_enuSetWGM_Mode( u8 Copy_u8TimerNum , u8 Copy_u8WGM_Mode )
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	00 d0       	rcall	.+0      	; 0x2864 <PWM_enuSetWGM_Mode+0x6>
    2864:	00 d0       	rcall	.+0      	; 0x2866 <PWM_enuSetWGM_Mode+0x8>
    2866:	00 d0       	rcall	.+0      	; 0x2868 <PWM_enuSetWGM_Mode+0xa>
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	8c 83       	std	Y+4, r24	; 0x04
    286e:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	8b 83       	std	Y+3, r24	; 0x03


	if( Copy_u8WGM_Mode > WGM_MODE_00	&& Copy_u8WGM_Mode <= WGM_FAST_OCR1A &&
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	85 36       	cpi	r24, 0x65	; 101
    2878:	08 f4       	brcc	.+2      	; 0x287c <PWM_enuSetWGM_Mode+0x1e>
    287a:	6a c0       	rjmp	.+212    	; 0x2950 <PWM_enuSetWGM_Mode+0xf2>
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	84 37       	cpi	r24, 0x74	; 116
    2880:	08 f0       	brcs	.+2      	; 0x2884 <PWM_enuSetWGM_Mode+0x26>
    2882:	66 c0       	rjmp	.+204    	; 0x2950 <PWM_enuSetWGM_Mode+0xf2>
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	88 36       	cpi	r24, 0x68	; 104
    2888:	09 f4       	brne	.+2      	; 0x288c <PWM_enuSetWGM_Mode+0x2e>
    288a:	62 c0       	rjmp	.+196    	; 0x2950 <PWM_enuSetWGM_Mode+0xf2>
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	80 37       	cpi	r24, 0x70	; 112
    2890:	09 f4       	brne	.+2      	; 0x2894 <PWM_enuSetWGM_Mode+0x36>
    2892:	5e c0       	rjmp	.+188    	; 0x2950 <PWM_enuSetWGM_Mode+0xf2>
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	81 37       	cpi	r24, 0x71	; 113
    2898:	09 f4       	brne	.+2      	; 0x289c <PWM_enuSetWGM_Mode+0x3e>
    289a:	5a c0       	rjmp	.+180    	; 0x2950 <PWM_enuSetWGM_Mode+0xf2>
		Copy_u8WGM_Mode != WGM_MODE_04	&& Copy_u8WGM_Mode != WGM_MODE_12 && Copy_u8WGM_Mode != WGM_MODE_13 )
	{

		u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    289c:	e9 e5       	ldi	r30, 0x59	; 89
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	8a 83       	std	Y+2, r24	; 0x02

		if( ( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B ) &&
    28a4:	8c 81       	ldd	r24, Y+4	; 0x04
    28a6:	89 3c       	cpi	r24, 0xC9	; 201
    28a8:	21 f0       	breq	.+8      	; 0x28b2 <PWM_enuSetWGM_Mode+0x54>
    28aa:	8c 81       	ldd	r24, Y+4	; 0x04
    28ac:	8a 3c       	cpi	r24, 0xCA	; 202
    28ae:	09 f0       	breq	.+2      	; 0x28b2 <PWM_enuSetWGM_Mode+0x54>
    28b0:	48 c0       	rjmp	.+144    	; 0x2942 <PWM_enuSetWGM_Mode+0xe4>
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	85 36       	cpi	r24, 0x65	; 101
    28b6:	08 f4       	brcc	.+2      	; 0x28ba <PWM_enuSetWGM_Mode+0x5c>
    28b8:	44 c0       	rjmp	.+136    	; 0x2942 <PWM_enuSetWGM_Mode+0xe4>
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
    28bc:	84 37       	cpi	r24, 0x74	; 116
    28be:	08 f0       	brcs	.+2      	; 0x28c2 <PWM_enuSetWGM_Mode+0x64>
    28c0:	40 c0       	rjmp	.+128    	; 0x2942 <PWM_enuSetWGM_Mode+0xe4>
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	88 36       	cpi	r24, 0x68	; 104
    28c6:	e9 f1       	breq	.+122    	; 0x2942 <PWM_enuSetWGM_Mode+0xe4>
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	80 37       	cpi	r24, 0x70	; 112
    28cc:	d1 f1       	breq	.+116    	; 0x2942 <PWM_enuSetWGM_Mode+0xe4>
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	81 37       	cpi	r24, 0x71	; 113
    28d2:	b9 f1       	breq	.+110    	; 0x2942 <PWM_enuSetWGM_Mode+0xe4>
			Copy_u8WGM_Mode > WGM_MODE_00	&& Copy_u8WGM_Mode <= WGM_FAST_OCR1A &&
			Copy_u8WGM_Mode != WGM_MODE_04	&& Copy_u8WGM_Mode != WGM_MODE_12 && Copy_u8WGM_Mode != WGM_MODE_13 )
		{
			u8 Local_u8WGM = Copy_u8WGM_Mode - WGM_MODE_00 ;
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	84 56       	subi	r24, 0x64	; 100
    28d8:	89 83       	std	Y+1, r24	; 0x01
			TIMSK &= ~( TC1_INT_EN_MASK ) ;													// Disable Timer1 Interrupts
    28da:	a9 e5       	ldi	r26, 0x59	; 89
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e9 e5       	ldi	r30, 0x59	; 89
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	83 7c       	andi	r24, 0xC3	; 195
    28e6:	8c 93       	st	X, r24
			TCCR1B &= ~( WGM1B_SEL_BITS_MASK );												// Masking WGM1B Select bits
    28e8:	ae e4       	ldi	r26, 0x4E	; 78
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	ee e4       	ldi	r30, 0x4E	; 78
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	87 7e       	andi	r24, 0xE7	; 231
    28f4:	8c 93       	st	X, r24
			TCCR1A |= ( ( Local_u8WGM & _TWO_BITS_MASK_ ) << WGM1A_SEL_BITS );				// Setting WGM10 & WGM11 Select bits
    28f6:	af e4       	ldi	r26, 0x4F	; 79
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	ef e4       	ldi	r30, 0x4F	; 79
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	98 2f       	mov	r25, r24
    2902:	89 81       	ldd	r24, Y+1	; 0x01
    2904:	83 70       	andi	r24, 0x03	; 3
    2906:	89 2b       	or	r24, r25
    2908:	8c 93       	st	X, r24
			TCCR1B |= ( ( ( Local_u8WGM >> BIT1_MASK) & _TWO_BITS_MASK_ ) << WGM1B_SEL_BITS );// Setting WGM12 & WGM13 Select bits
    290a:	ae e4       	ldi	r26, 0x4E	; 78
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	ee e4       	ldi	r30, 0x4E	; 78
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	28 2f       	mov	r18, r24
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	86 95       	lsr	r24
    291a:	86 95       	lsr	r24
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	83 70       	andi	r24, 0x03	; 3
    2922:	90 70       	andi	r25, 0x00	; 0
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	88 0f       	add	r24, r24
    292e:	99 1f       	adc	r25, r25
    2930:	82 2b       	or	r24, r18
    2932:	8c 93       	st	X, r24
			PWMs[ TIMER1A - TIMER1A ].WaveGenMode = Copy_u8WGM_Mode ;
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	80 93 87 01 	sts	0x0187, r24
			PWMs[ TIMER1B - TIMER1A ].WaveGenMode = Copy_u8WGM_Mode ;
    293a:	8d 81       	ldd	r24, Y+5	; 0x05
    293c:	80 93 8c 01 	sts	0x018C, r24
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <PWM_enuSetWGM_Mode+0xe8>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    2942:	82 e0       	ldi	r24, 0x02	; 2
    2944:	8b 83       	std	Y+3, r24	; 0x03

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    2946:	e9 e5       	ldi	r30, 0x59	; 89
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	80 83       	st	Z, r24
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <PWM_enuSetWGM_Mode+0xf6>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	8b 83       	std	Y+3, r24	; 0x03

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	81 30       	cpi	r24, 0x01	; 1
    2958:	19 f0       	breq	.+6      	; 0x2960 <PWM_enuSetWGM_Mode+0x102>
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	8e 83       	std	Y+6, r24	; 0x06
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <PWM_enuSetWGM_Mode+0x104>
    2960:	1e 82       	std	Y+6, r1	; 0x06
    2962:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2964:	26 96       	adiw	r28, 0x06	; 6
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <PWM_enuSetOCRnValue>:
	return Local_enuErrorState ;
}
#endif

ES_t PWM_enuSetOCRnValue( u8 Copy_u8TimerNum , u16 Copy_u16OCRnValue )
{
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	27 97       	sbiw	r28, 0x07	; 7
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	8c 83       	std	Y+4, r24	; 0x04
    298c:	7e 83       	std	Y+6, r23	; 0x06
    298e:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	8b 83       	std	Y+3, r24	; 0x03

	if( Copy_u8TimerNum == TIMER1A && Copy_u16OCRnValue <= Timer1Max )
    2994:	8c 81       	ldd	r24, Y+4	; 0x04
    2996:	89 3c       	cpi	r24, 0xC9	; 201
    2998:	21 f5       	brne	.+72     	; 0x29e2 <PWM_enuSetOCRnValue+0x6c>
    299a:	20 91 82 01 	lds	r18, 0x0182
    299e:	30 91 83 01 	lds	r19, 0x0183
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	9e 81       	ldd	r25, Y+6	; 0x06
    29a6:	28 17       	cp	r18, r24
    29a8:	39 07       	cpc	r19, r25
    29aa:	d8 f0       	brcs	.+54     	; 0x29e2 <PWM_enuSetOCRnValue+0x6c>
	{
		u8 Local_u8Temp = SREG ;
    29ac:	ef e5       	ldi	r30, 0x5F	; 95
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	8a 83       	std	Y+2, r24	; 0x02
		_CLI_;
    29b4:	f8 94       	cli
		OCR1AH  = Copy_u16OCRnValue >> 8 ;
    29b6:	eb e4       	ldi	r30, 0x4B	; 75
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	89 2f       	mov	r24, r25
    29c0:	99 27       	eor	r25, r25
    29c2:	80 83       	st	Z, r24
		OCR1AL 	= Copy_u16OCRnValue ;
    29c4:	ea e4       	ldi	r30, 0x4A	; 74
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	80 83       	st	Z, r24
		SREG = Local_u8Temp;
    29cc:	ef e5       	ldi	r30, 0x5F	; 95
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	80 83       	st	Z, r24
		Global_u16OCR1A_Value = Copy_u16OCRnValue ;
    29d4:	8d 81       	ldd	r24, Y+5	; 0x05
    29d6:	9e 81       	ldd	r25, Y+6	; 0x06
    29d8:	90 93 2e 02 	sts	0x022E, r25
    29dc:	80 93 2d 02 	sts	0x022D, r24
    29e0:	29 c0       	rjmp	.+82     	; 0x2a34 <PWM_enuSetOCRnValue+0xbe>
	}
	else if( Copy_u8TimerNum == TIMER1B && Copy_u16OCRnValue <= Timer1Max )
    29e2:	8c 81       	ldd	r24, Y+4	; 0x04
    29e4:	8a 3c       	cpi	r24, 0xCA	; 202
    29e6:	21 f5       	brne	.+72     	; 0x2a30 <PWM_enuSetOCRnValue+0xba>
    29e8:	20 91 82 01 	lds	r18, 0x0182
    29ec:	30 91 83 01 	lds	r19, 0x0183
    29f0:	8d 81       	ldd	r24, Y+5	; 0x05
    29f2:	9e 81       	ldd	r25, Y+6	; 0x06
    29f4:	28 17       	cp	r18, r24
    29f6:	39 07       	cpc	r19, r25
    29f8:	d8 f0       	brcs	.+54     	; 0x2a30 <PWM_enuSetOCRnValue+0xba>
	{
		u8 Local_u8Temp = SREG ;
    29fa:	ef e5       	ldi	r30, 0x5F	; 95
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	89 83       	std	Y+1, r24	; 0x01
		_CLI_;
    2a02:	f8 94       	cli
		OCR1BH  = Copy_u16OCRnValue >> 8 ;
    2a04:	e9 e4       	ldi	r30, 0x49	; 73
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0c:	89 2f       	mov	r24, r25
    2a0e:	99 27       	eor	r25, r25
    2a10:	80 83       	st	Z, r24
		OCR1BL 	= Copy_u16OCRnValue ;
    2a12:	e8 e4       	ldi	r30, 0x48	; 72
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	80 83       	st	Z, r24
		SREG = Local_u8Temp;
    2a1a:	ef e5       	ldi	r30, 0x5F	; 95
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	80 83       	st	Z, r24
		Global_u16OCR1B_Value = Copy_u16OCRnValue ;
    2a22:	8d 81       	ldd	r24, Y+5	; 0x05
    2a24:	9e 81       	ldd	r25, Y+6	; 0x06
    2a26:	90 93 30 02 	sts	0x0230, r25
    2a2a:	80 93 2f 02 	sts	0x022F, r24
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <PWM_enuSetOCRnValue+0xbe>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2a30:	82 e0       	ldi	r24, 0x02	; 2
    2a32:	8b 83       	std	Y+3, r24	; 0x03

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	81 30       	cpi	r24, 0x01	; 1
    2a38:	19 f0       	breq	.+6      	; 0x2a40 <PWM_enuSetOCRnValue+0xca>
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	8f 83       	std	Y+7, r24	; 0x07
    2a3e:	01 c0       	rjmp	.+2      	; 0x2a42 <PWM_enuSetOCRnValue+0xcc>
    2a40:	1f 82       	std	Y+7, r1	; 0x07
    2a42:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2a44:	27 96       	adiw	r28, 0x07	; 7
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	cf 91       	pop	r28
    2a52:	df 91       	pop	r29
    2a54:	08 95       	ret

00002a56 <PWM_enuSetICR1Value>:

		return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif
ES_t PWM_enuSetICR1Value( u16 Copy_u16ICR1Value )
{
    2a56:	df 93       	push	r29
    2a58:	cf 93       	push	r28
    2a5a:	00 d0       	rcall	.+0      	; 0x2a5c <PWM_enuSetICR1Value+0x6>
    2a5c:	0f 92       	push	r0
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	9b 83       	std	Y+3, r25	; 0x03
    2a64:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Temp = SREG ;
    2a66:	ef e5       	ldi	r30, 0x5F	; 95
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;
    2a6e:	f8 94       	cli
	ICR1H = Copy_u16ICR1Value >> 8 ;
    2a70:	e7 e4       	ldi	r30, 0x47	; 71
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	89 2f       	mov	r24, r25
    2a7a:	99 27       	eor	r25, r25
    2a7c:	80 83       	st	Z, r24
	ICR1L = Copy_u16ICR1Value ;
    2a7e:	e6 e4       	ldi	r30, 0x46	; 70
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	80 83       	st	Z, r24
	SREG = Local_u8Temp;
    2a86:	ef e5       	ldi	r30, 0x5F	; 95
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	80 83       	st	Z, r24
	Global_u16ICR1_Value = Copy_u16ICR1Value ;
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	9b 81       	ldd	r25, Y+3	; 0x03
    2a92:	90 93 32 02 	sts	0x0232, r25
    2a96:	80 93 31 02 	sts	0x0231, r24
	return ES_OK;
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	0f 90       	pop	r0
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <PWM_enuSetInterruptMode>:

ES_t PWM_enuSetInterruptMode( u8 Copy_u8TimerNum , u8 Copy_u8TimerInterruptMode )
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	27 97       	sbiw	r28, 0x07	; 7
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	8c 83       	std	Y+4, r24	; 0x04
    2abe:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	8b 83       	std	Y+3, r24	; 0x03

	if( ( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B ) &&
    2ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac6:	89 3c       	cpi	r24, 0xC9	; 201
    2ac8:	21 f0       	breq	.+8      	; 0x2ad2 <PWM_enuSetInterruptMode+0x2a>
    2aca:	8c 81       	ldd	r24, Y+4	; 0x04
    2acc:	8a 3c       	cpi	r24, 0xCA	; 202
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <PWM_enuSetInterruptMode+0x2a>
    2ad0:	7c c0       	rjmp	.+248    	; 0x2bca <PWM_enuSetInterruptMode+0x122>
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	83 33       	cpi	r24, 0x33	; 51
    2ad6:	21 f0       	breq	.+8      	; 0x2ae0 <PWM_enuSetInterruptMode+0x38>
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	84 33       	cpi	r24, 0x34	; 52
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <PWM_enuSetInterruptMode+0x38>
    2ade:	75 c0       	rjmp	.+234    	; 0x2bca <PWM_enuSetInterruptMode+0x122>
		( Copy_u8TimerInterruptMode == PWM_OVERFLOW_INT || Copy_u8TimerInterruptMode == PWM_OUT_COMP_INT ) )
	{
		u8 Local_u8Iter = 0 , Local_u8Updated = 0 ;
    2ae0:	1a 82       	std	Y+2, r1	; 0x02
    2ae2:	19 82       	std	Y+1, r1	; 0x01

		switch( Copy_u8TimerInterruptMode )
    2ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	3f 83       	std	Y+7, r19	; 0x07
    2aec:	2e 83       	std	Y+6, r18	; 0x06
    2aee:	8e 81       	ldd	r24, Y+6	; 0x06
    2af0:	9f 81       	ldd	r25, Y+7	; 0x07
    2af2:	83 33       	cpi	r24, 0x33	; 51
    2af4:	91 05       	cpc	r25, r1
    2af6:	31 f0       	breq	.+12     	; 0x2b04 <PWM_enuSetInterruptMode+0x5c>
    2af8:	2e 81       	ldd	r18, Y+6	; 0x06
    2afa:	3f 81       	ldd	r19, Y+7	; 0x07
    2afc:	24 33       	cpi	r18, 0x34	; 52
    2afe:	31 05       	cpc	r19, r1
    2b00:	21 f1       	breq	.+72     	; 0x2b4a <PWM_enuSetInterruptMode+0xa2>
    2b02:	35 c0       	rjmp	.+106    	; 0x2b6e <PWM_enuSetInterruptMode+0xc6>
		{
			case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1_BIT );					/*	Enable TOIE1 Interrupt */
    2b04:	a9 e5       	ldi	r26, 0x59	; 89
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e9 e5       	ldi	r30, 0x59	; 89
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	84 60       	ori	r24, 0x04	; 4
    2b10:	8c 93       	st	X, r24
										for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2b12:	1a 82       	std	Y+2, r1	; 0x02
    2b14:	12 c0       	rjmp	.+36     	; 0x2b3a <PWM_enuSetInterruptMode+0x92>
										{
											PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	28 2f       	mov	r18, r24
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	c9 01       	movw	r24, r18
    2b1e:	88 0f       	add	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	88 0f       	add	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	82 0f       	add	r24, r18
    2b28:	93 1f       	adc	r25, r19
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	e8 57       	subi	r30, 0x78	; 120
    2b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	80 83       	st	Z, r24
		u8 Local_u8Iter = 0 , Local_u8Updated = 0 ;

		switch( Copy_u8TimerInterruptMode )
		{
			case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1_BIT );					/*	Enable TOIE1 Interrupt */
										for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	8a 83       	std	Y+2, r24	; 0x02
    2b3a:	90 91 81 01 	lds	r25, 0x0181
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	89 17       	cp	r24, r25
    2b42:	48 f3       	brcs	.-46     	; 0x2b16 <PWM_enuSetInterruptMode+0x6e>
										{
											PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
										}
										Local_u8Updated = 1;
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	89 83       	std	Y+1, r24	; 0x01
    2b48:	12 c0       	rjmp	.+36     	; 0x2b6e <PWM_enuSetInterruptMode+0xc6>
										break;
			case PWM_OUT_COMP_INT	:	if( Copy_u8TimerNum == TIMER1B )
    2b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4c:	8a 3c       	cpi	r24, 0xCA	; 202
    2b4e:	41 f4       	brne	.+16     	; 0x2b60 <PWM_enuSetInterruptMode+0xb8>
										{
											SET_BIT( TIMSK , OCIE1B_BIT );				/*	Enable OCIE1B Interrupt */
    2b50:	a9 e5       	ldi	r26, 0x59	; 89
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e9 e5       	ldi	r30, 0x59	; 89
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	88 60       	ori	r24, 0x08	; 8
    2b5c:	8c 93       	st	X, r24
    2b5e:	07 c0       	rjmp	.+14     	; 0x2b6e <PWM_enuSetInterruptMode+0xc6>
										}
										else
										{
											SET_BIT( TIMSK , OCIE1A_BIT );				/*	Enable OCIE1A Interrupt */
    2b60:	a9 e5       	ldi	r26, 0x59	; 89
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	e9 e5       	ldi	r30, 0x59	; 89
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	80 81       	ld	r24, Z
    2b6a:	80 61       	ori	r24, 0x10	; 16
    2b6c:	8c 93       	st	X, r24
										}
										break;
		}
		if( !Local_u8Updated )
    2b6e:	89 81       	ldd	r24, Y+1	; 0x01
    2b70:	88 23       	and	r24, r24
    2b72:	69 f5       	brne	.+90     	; 0x2bce <PWM_enuSetInterruptMode+0x126>
		{
			for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2b74:	1a 82       	std	Y+2, r1	; 0x02
    2b76:	23 c0       	rjmp	.+70     	; 0x2bbe <PWM_enuSetInterruptMode+0x116>
			{
				if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	c9 01       	movw	r24, r18
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	82 0f       	add	r24, r18
    2b8a:	93 1f       	adc	r25, r19
    2b8c:	fc 01       	movw	r30, r24
    2b8e:	ec 57       	subi	r30, 0x7C	; 124
    2b90:	fe 4f       	sbci	r31, 0xFE	; 254
    2b92:	90 81       	ld	r25, Z
    2b94:	8c 81       	ldd	r24, Y+4	; 0x04
    2b96:	98 17       	cp	r25, r24
    2b98:	79 f4       	brne	.+30     	; 0x2bb8 <PWM_enuSetInterruptMode+0x110>
				{
					PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
    2b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9c:	28 2f       	mov	r18, r24
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	c9 01       	movw	r24, r18
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	82 0f       	add	r24, r18
    2bac:	93 1f       	adc	r25, r19
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e8 57       	subi	r30, 0x78	; 120
    2bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	80 83       	st	Z, r24
										}
										break;
		}
		if( !Local_u8Updated )
		{
			for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	8f 5f       	subi	r24, 0xFF	; 255
    2bbc:	8a 83       	std	Y+2, r24	; 0x02
    2bbe:	90 91 81 01 	lds	r25, 0x0181
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	89 17       	cp	r24, r25
    2bc6:	c0 f2       	brcs	.-80     	; 0x2b78 <PWM_enuSetInterruptMode+0xd0>
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <PWM_enuSetInterruptMode+0x126>
					PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
				}
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2bd0:	27 96       	adiw	r28, 0x07	; 7
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <PWM_enuGetInterruptMode>:

ES_t PWM_enuGetInterruptMode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerInterruptMode )
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <PWM_enuGetInterruptMode+0x6>
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <PWM_enuGetInterruptMode+0x8>
    2bea:	0f 92       	push	r0
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	8b 83       	std	Y+3, r24	; 0x03
    2bf2:	7d 83       	std	Y+5, r23	; 0x05
    2bf4:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pu8TimerInterruptMode != NULL )
    2bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfe:	00 97       	sbiw	r24, 0x00	; 0
    2c00:	b1 f1       	breq	.+108    	; 0x2c6e <PWM_enuGetInterruptMode+0x8c>
	{
		if( Copy_u8TimerNum == TIMER1A	|| Copy_u8TimerNum == TIMER1A )
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	89 3c       	cpi	r24, 0xC9	; 201
    2c06:	19 f0       	breq	.+6      	; 0x2c0e <PWM_enuGetInterruptMode+0x2c>
    2c08:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0a:	89 3c       	cpi	r24, 0xC9	; 201
    2c0c:	69 f5       	brne	.+90     	; 0x2c68 <PWM_enuGetInterruptMode+0x86>
		{
			for( u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2c0e:	19 82       	std	Y+1, r1	; 0x01
    2c10:	25 c0       	rjmp	.+74     	; 0x2c5c <PWM_enuGetInterruptMode+0x7a>
			{
				if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	c9 01       	movw	r24, r18
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	88 0f       	add	r24, r24
    2c20:	99 1f       	adc	r25, r25
    2c22:	82 0f       	add	r24, r18
    2c24:	93 1f       	adc	r25, r19
    2c26:	fc 01       	movw	r30, r24
    2c28:	ec 57       	subi	r30, 0x7C	; 124
    2c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c2c:	90 81       	ld	r25, Z
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	98 17       	cp	r25, r24
    2c32:	89 f4       	brne	.+34     	; 0x2c56 <PWM_enuGetInterruptMode+0x74>
				{
					*Copy_pu8TimerInterruptMode = PWMs[Local_u8Iter].InterruptMode ;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	c9 01       	movw	r24, r18
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	82 0f       	add	r24, r18
    2c46:	93 1f       	adc	r25, r19
    2c48:	fc 01       	movw	r30, r24
    2c4a:	e8 57       	subi	r30, 0x78	; 120
    2c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4e:	80 81       	ld	r24, Z
    2c50:	ec 81       	ldd	r30, Y+4	; 0x04
    2c52:	fd 81       	ldd	r31, Y+5	; 0x05
    2c54:	80 83       	st	Z, r24

	if( Copy_pu8TimerInterruptMode != NULL )
	{
		if( Copy_u8TimerNum == TIMER1A	|| Copy_u8TimerNum == TIMER1A )
		{
			for( u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	8f 5f       	subi	r24, 0xFF	; 255
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	90 91 81 01 	lds	r25, 0x0181
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	89 17       	cp	r24, r25
    2c64:	b0 f2       	brcs	.-84     	; 0x2c12 <PWM_enuGetInterruptMode+0x30>
    2c66:	05 c0       	rjmp	.+10     	; 0x2c72 <PWM_enuGetInterruptMode+0x90>
				{
					*Copy_pu8TimerInterruptMode = PWMs[Local_u8Iter].InterruptMode ;
				}
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	8a 83       	std	Y+2, r24	; 0x02
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <PWM_enuGetInterruptMode+0x90>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    2c6e:	83 e0       	ldi	r24, 0x03	; 3
    2c70:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <PWM_enuSetDutyCycle>:

ES_t PWM_enuSetDutyCycle( u8 Copy_u8TimerNum , f32 Copy_f32DutyCycle )
{
    2c84:	ef 92       	push	r14
    2c86:	ff 92       	push	r15
    2c88:	0f 93       	push	r16
    2c8a:	1f 93       	push	r17
    2c8c:	df 93       	push	r29
    2c8e:	cf 93       	push	r28
    2c90:	cd b7       	in	r28, 0x3d	; 61
    2c92:	de b7       	in	r29, 0x3e	; 62
    2c94:	6d 97       	sbiw	r28, 0x1d	; 29
    2c96:	0f b6       	in	r0, 0x3f	; 63
    2c98:	f8 94       	cli
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	cd bf       	out	0x3d, r28	; 61
    2ca0:	8c 87       	std	Y+12, r24	; 0x0c
    2ca2:	4d 87       	std	Y+13, r20	; 0x0d
    2ca4:	5e 87       	std	Y+14, r21	; 0x0e
    2ca6:	6f 87       	std	Y+15, r22	; 0x0f
    2ca8:	78 8b       	std	Y+16, r23	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	8b 87       	std	Y+11, r24	; 0x0b

	u8 Local_u8TimerWGM_Mode , Local_u8TimerCOM_Mode , Local_u8Flag = 0 ;
    2cae:	18 86       	std	Y+8, r1	; 0x08
	u16 Local_u16TimerTop , Local_u16OCRValue ;

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    2cb0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cb2:	89 3c       	cpi	r24, 0xC9	; 201
    2cb4:	21 f0       	breq	.+8      	; 0x2cbe <PWM_enuSetDutyCycle+0x3a>
    2cb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cb8:	8a 3c       	cpi	r24, 0xCA	; 202
    2cba:	09 f0       	breq	.+2      	; 0x2cbe <PWM_enuSetDutyCycle+0x3a>
    2cbc:	62 c7       	rjmp	.+3780   	; 0x3b82 <PWM_enuSetDutyCycle+0xefe>
	{
		for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2cbe:	1b 82       	std	Y+3, r1	; 0x03
    2cc0:	32 c0       	rjmp	.+100    	; 0x2d26 <PWM_enuSetDutyCycle+0xa2>
		{
			if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	28 2f       	mov	r18, r24
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	c9 01       	movw	r24, r18
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	88 0f       	add	r24, r24
    2cd0:	99 1f       	adc	r25, r25
    2cd2:	82 0f       	add	r24, r18
    2cd4:	93 1f       	adc	r25, r19
    2cd6:	fc 01       	movw	r30, r24
    2cd8:	ec 57       	subi	r30, 0x7C	; 124
    2cda:	fe 4f       	sbci	r31, 0xFE	; 254
    2cdc:	90 81       	ld	r25, Z
    2cde:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ce0:	98 17       	cp	r25, r24
    2ce2:	f1 f4       	brne	.+60     	; 0x2d20 <PWM_enuSetDutyCycle+0x9c>
			{
				Local_u8TimerWGM_Mode = PWMs[Local_u8Iter].WaveGenMode ;
    2ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	c9 01       	movw	r24, r18
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	88 0f       	add	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	82 0f       	add	r24, r18
    2cf6:	93 1f       	adc	r25, r19
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	e9 57       	subi	r30, 0x79	; 121
    2cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfe:	80 81       	ld	r24, Z
    2d00:	8a 87       	std	Y+10, r24	; 0x0a
				Local_u8TimerCOM_Mode = PWMs[Local_u8Iter].CompOutMode ;
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	c9 01       	movw	r24, r18
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	88 0f       	add	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	82 0f       	add	r24, r18
    2d14:	93 1f       	adc	r25, r19
    2d16:	fc 01       	movw	r30, r24
    2d18:	ea 57       	subi	r30, 0x7A	; 122
    2d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1c:	80 81       	ld	r24, Z
    2d1e:	89 87       	std	Y+9, r24	; 0x09
	u8 Local_u8TimerWGM_Mode , Local_u8TimerCOM_Mode , Local_u8Flag = 0 ;
	u16 Local_u16TimerTop , Local_u16OCRValue ;

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
	{
		for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2d20:	8b 81       	ldd	r24, Y+3	; 0x03
    2d22:	8f 5f       	subi	r24, 0xFF	; 255
    2d24:	8b 83       	std	Y+3, r24	; 0x03
    2d26:	90 91 81 01 	lds	r25, 0x0181
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	89 17       	cp	r24, r25
    2d2e:	48 f2       	brcs	.-110    	; 0x2cc2 <PWM_enuSetDutyCycle+0x3e>
			{
				Local_u8TimerWGM_Mode = PWMs[Local_u8Iter].WaveGenMode ;
				Local_u8TimerCOM_Mode = PWMs[Local_u8Iter].CompOutMode ;
			}
		}
		switch( Local_u8TimerWGM_Mode )
    2d30:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	3d 8f       	std	Y+29, r19	; 0x1d
    2d38:	2c 8f       	std	Y+28, r18	; 0x1c
    2d3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d3e:	8b 36       	cpi	r24, 0x6B	; 107
    2d40:	91 05       	cpc	r25, r1
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <PWM_enuSetDutyCycle+0xc2>
    2d44:	03 c3       	rjmp	.+1542   	; 0x334c <PWM_enuSetDutyCycle+0x6c8>
    2d46:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2d48:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2d4a:	2c 36       	cpi	r18, 0x6C	; 108
    2d4c:	31 05       	cpc	r19, r1
    2d4e:	2c f5       	brge	.+74     	; 0x2d9a <PWM_enuSetDutyCycle+0x116>
    2d50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d52:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d54:	87 36       	cpi	r24, 0x67	; 103
    2d56:	91 05       	cpc	r25, r1
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <PWM_enuSetDutyCycle+0xd8>
    2d5a:	8a c2       	rjmp	.+1300   	; 0x3270 <PWM_enuSetDutyCycle+0x5ec>
    2d5c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2d5e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2d60:	28 36       	cpi	r18, 0x68	; 104
    2d62:	31 05       	cpc	r19, r1
    2d64:	6c f4       	brge	.+26     	; 0x2d80 <PWM_enuSetDutyCycle+0xfc>
    2d66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d68:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d6a:	85 36       	cpi	r24, 0x65	; 101
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <PWM_enuSetDutyCycle+0xee>
    2d70:	3f c0       	rjmp	.+126    	; 0x2df0 <PWM_enuSetDutyCycle+0x16c>
    2d72:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2d74:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2d76:	26 36       	cpi	r18, 0x66	; 102
    2d78:	31 05       	cpc	r19, r1
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <PWM_enuSetDutyCycle+0xfa>
    2d7c:	59 c1       	rjmp	.+690    	; 0x3030 <PWM_enuSetDutyCycle+0x3ac>
    2d7e:	be c6       	rjmp	.+3452   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2d80:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d82:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d84:	89 36       	cpi	r24, 0x69	; 105
    2d86:	91 05       	cpc	r25, r1
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <PWM_enuSetDutyCycle+0x108>
    2d8a:	a0 c0       	rjmp	.+320    	; 0x2ecc <PWM_enuSetDutyCycle+0x248>
    2d8c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2d8e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2d90:	2a 36       	cpi	r18, 0x6A	; 106
    2d92:	31 05       	cpc	r19, r1
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <PWM_enuSetDutyCycle+0x114>
    2d96:	ba c1       	rjmp	.+884    	; 0x310c <PWM_enuSetDutyCycle+0x488>
    2d98:	b1 c6       	rjmp	.+3426   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2d9a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d9c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d9e:	8e 36       	cpi	r24, 0x6E	; 110
    2da0:	91 05       	cpc	r25, r1
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <PWM_enuSetDutyCycle+0x122>
    2da4:	f5 c3       	rjmp	.+2026   	; 0x3590 <PWM_enuSetDutyCycle+0x90c>
    2da6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2da8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2daa:	2f 36       	cpi	r18, 0x6F	; 111
    2dac:	31 05       	cpc	r19, r1
    2dae:	6c f4       	brge	.+26     	; 0x2dca <PWM_enuSetDutyCycle+0x146>
    2db0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2db2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2db4:	8c 36       	cpi	r24, 0x6C	; 108
    2db6:	91 05       	cpc	r25, r1
    2db8:	09 f4       	brne	.+2      	; 0x2dbc <PWM_enuSetDutyCycle+0x138>
    2dba:	7a c3       	rjmp	.+1780   	; 0x34b0 <PWM_enuSetDutyCycle+0x82c>
    2dbc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2dbe:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2dc0:	2d 36       	cpi	r18, 0x6D	; 109
    2dc2:	31 05       	cpc	r19, r1
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <PWM_enuSetDutyCycle+0x144>
    2dc6:	08 c5       	rjmp	.+2576   	; 0x37d8 <PWM_enuSetDutyCycle+0xb54>
    2dc8:	99 c6       	rjmp	.+3378   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2dca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dce:	82 37       	cpi	r24, 0x72	; 114
    2dd0:	91 05       	cpc	r25, r1
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <PWM_enuSetDutyCycle+0x152>
    2dd4:	4d c4       	rjmp	.+2202   	; 0x3670 <PWM_enuSetDutyCycle+0x9ec>
    2dd6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2dd8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2dda:	23 37       	cpi	r18, 0x73	; 115
    2ddc:	31 05       	cpc	r19, r1
    2dde:	09 f4       	brne	.+2      	; 0x2de2 <PWM_enuSetDutyCycle+0x15e>
    2de0:	db c5       	rjmp	.+2998   	; 0x3998 <PWM_enuSetDutyCycle+0xd14>
    2de2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2de4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2de6:	8f 36       	cpi	r24, 0x6F	; 111
    2de8:	91 05       	cpc	r25, r1
    2dea:	09 f4       	brne	.+2      	; 0x2dee <PWM_enuSetDutyCycle+0x16a>
    2dec:	65 c5       	rjmp	.+2762   	; 0x38b8 <PWM_enuSetDutyCycle+0xc34>
    2dee:	86 c6       	rjmp	.+3340   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
		{
			case WGM_PC_8_bit	:	Local_u16TimerTop = EIGHT_BIT_TOP ;
    2df0:	8f ef       	ldi	r24, 0xFF	; 255
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	9f 83       	std	Y+7, r25	; 0x07
    2df6:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	86 31       	cpi	r24, 0x16	; 22
    2dfc:	41 f5       	brne	.+80     	; 0x2e4e <PWM_enuSetDutyCycle+0x1ca>
    2dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2e00:	9f 81       	ldd	r25, Y+7	; 0x07
    2e02:	cc 01       	movw	r24, r24
    2e04:	a0 e0       	ldi	r26, 0x00	; 0
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e1a:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e1c:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e1e:	58 89       	ldd	r21, Y+16	; 0x10
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	48 ec       	ldi	r20, 0xC8	; 200
    2e32:	52 e4       	ldi	r21, 0x42	; 66
    2e34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9d 83       	std	Y+5, r25	; 0x05
    2e4a:	8c 83       	std	Y+4, r24	; 0x04
    2e4c:	57 c6       	rjmp	.+3246   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	87 31       	cpi	r24, 0x17	; 23
    2e52:	09 f0       	breq	.+2      	; 0x2e56 <PWM_enuSetDutyCycle+0x1d2>
    2e54:	53 c6       	rjmp	.+3238   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2e56:	8e 81       	ldd	r24, Y+6	; 0x06
    2e58:	9f 81       	ldd	r25, Y+7	; 0x07
    2e5a:	cc 01       	movw	r24, r24
    2e5c:	a0 e0       	ldi	r26, 0x00	; 0
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    2e68:	7b 01       	movw	r14, r22
    2e6a:	8c 01       	movw	r16, r24
    2e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6e:	9f 81       	ldd	r25, Y+7	; 0x07
    2e70:	cc 01       	movw	r24, r24
    2e72:	a0 e0       	ldi	r26, 0x00	; 0
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	bc 01       	movw	r22, r24
    2e78:	cd 01       	movw	r24, r26
    2e7a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cb 01       	movw	r24, r22
    2e82:	bc 01       	movw	r22, r24
    2e84:	cd 01       	movw	r24, r26
    2e86:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e88:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e8a:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e8c:	58 89       	ldd	r21, Y+16	; 0x10
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	48 ec       	ldi	r20, 0xC8	; 200
    2ea0:	52 ec       	ldi	r21, 0xC2	; 194
    2ea2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	9c 01       	movw	r18, r24
    2eac:	ad 01       	movw	r20, r26
    2eae:	c8 01       	movw	r24, r16
    2eb0:	b7 01       	movw	r22, r14
    2eb2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	bc 01       	movw	r22, r24
    2ebc:	cd 01       	movw	r24, r26
    2ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec2:	dc 01       	movw	r26, r24
    2ec4:	cb 01       	movw	r24, r22
    2ec6:	9d 83       	std	Y+5, r25	; 0x05
    2ec8:	8c 83       	std	Y+4, r24	; 0x04
    2eca:	18 c6       	rjmp	.+3120   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_8_bit	:	Local_u16TimerTop = EIGHT_BIT_TOP ;
    2ecc:	8f ef       	ldi	r24, 0xFF	; 255
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9f 83       	std	Y+7, r25	; 0x07
    2ed2:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	86 31       	cpi	r24, 0x16	; 22
    2ed8:	b9 f4       	brne	.+46     	; 0x2f08 <PWM_enuSetDutyCycle+0x284>
    2eda:	1b 8e       	std	Y+27, r1	; 0x1b
    2edc:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ede:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee2:	98 89       	ldd	r25, Y+16	; 0x10
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2ef0:	88 23       	and	r24, r24
    2ef2:	11 f4       	brne	.+4      	; 0x2ef8 <PWM_enuSetDutyCycle+0x274>
    2ef4:	91 e0       	ldi	r25, 0x01	; 1
    2ef6:	9b 8f       	std	Y+27, r25	; 0x1b
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2efc:	82 27       	eor	r24, r18
    2efe:	88 23       	and	r24, r24
    2f00:	19 f4       	brne	.+6      	; 0x2f08 <PWM_enuSetDutyCycle+0x284>
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	88 87       	std	Y+8, r24	; 0x08
    2f06:	fa c5       	rjmp	.+3060   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	87 31       	cpi	r24, 0x17	; 23
    2f0c:	b9 f4       	brne	.+46     	; 0x2f3c <PWM_enuSetDutyCycle+0x2b8>
    2f0e:	1a 8e       	std	Y+26, r1	; 0x1a
    2f10:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f12:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f16:	98 89       	ldd	r25, Y+16	; 0x10
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	48 ec       	ldi	r20, 0xC8	; 200
    2f1e:	52 e4       	ldi	r21, 0x42	; 66
    2f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2f24:	88 23       	and	r24, r24
    2f26:	11 f4       	brne	.+4      	; 0x2f2c <PWM_enuSetDutyCycle+0x2a8>
    2f28:	31 e0       	ldi	r19, 0x01	; 1
    2f2a:	3a 8f       	std	Y+26, r19	; 0x1a
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f30:	89 27       	eor	r24, r25
    2f32:	88 23       	and	r24, r24
    2f34:	19 f4       	brne	.+6      	; 0x2f3c <PWM_enuSetDutyCycle+0x2b8>
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	88 87       	std	Y+8, r24	; 0x08
    2f3a:	e0 c5       	rjmp	.+3008   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2f3c:	89 85       	ldd	r24, Y+9	; 0x09
    2f3e:	86 31       	cpi	r24, 0x16	; 22
    2f40:	a9 f5       	brne	.+106    	; 0x2fac <PWM_enuSetDutyCycle+0x328>
    2f42:	8e 81       	ldd	r24, Y+6	; 0x06
    2f44:	9f 81       	ldd	r25, Y+7	; 0x07
    2f46:	cc 01       	movw	r24, r24
    2f48:	a0 e0       	ldi	r26, 0x00	; 0
    2f4a:	b0 e0       	ldi	r27, 0x00	; 0
    2f4c:	01 96       	adiw	r24, 0x01	; 1
    2f4e:	a1 1d       	adc	r26, r1
    2f50:	b1 1d       	adc	r27, r1
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f64:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f66:	4f 85       	ldd	r20, Y+15	; 0x0f
    2f68:	58 89       	ldd	r21, Y+16	; 0x10
    2f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	20 e0       	ldi	r18, 0x00	; 0
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	48 ec       	ldi	r20, 0xC8	; 200
    2f7c:	52 e4       	ldi	r21, 0x42	; 66
    2f7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	bc 01       	movw	r22, r24
    2f88:	cd 01       	movw	r24, r26
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e8       	ldi	r20, 0x80	; 128
    2f90:	5f e3       	ldi	r21, 0x3F	; 63
    2f92:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9d 83       	std	Y+5, r25	; 0x05
    2fa8:	8c 83       	std	Y+4, r24	; 0x04
    2faa:	a8 c5       	rjmp	.+2896   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2fac:	89 85       	ldd	r24, Y+9	; 0x09
    2fae:	87 31       	cpi	r24, 0x17	; 23
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <PWM_enuSetDutyCycle+0x330>
    2fb2:	a4 c5       	rjmp	.+2888   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    2fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb8:	cc 01       	movw	r24, r24
    2fba:	a0 e0       	ldi	r26, 0x00	; 0
    2fbc:	b0 e0       	ldi	r27, 0x00	; 0
    2fbe:	bc 01       	movw	r22, r24
    2fc0:	cd 01       	movw	r24, r26
    2fc2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    2fc6:	7b 01       	movw	r14, r22
    2fc8:	8c 01       	movw	r16, r24
    2fca:	8e 81       	ldd	r24, Y+6	; 0x06
    2fcc:	9f 81       	ldd	r25, Y+7	; 0x07
    2fce:	cc 01       	movw	r24, r24
    2fd0:	a0 e0       	ldi	r26, 0x00	; 0
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	01 96       	adiw	r24, 0x01	; 1
    2fd6:	a1 1d       	adc	r26, r1
    2fd8:	b1 1d       	adc	r27, r1
    2fda:	bc 01       	movw	r22, r24
    2fdc:	cd 01       	movw	r24, r26
    2fde:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	bc 01       	movw	r22, r24
    2fe8:	cd 01       	movw	r24, r26
    2fea:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fec:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fee:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ff0:	58 89       	ldd	r21, Y+16	; 0x10
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	48 ec       	ldi	r20, 0xC8	; 200
    3004:	52 ec       	ldi	r21, 0xC2	; 194
    3006:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	9c 01       	movw	r18, r24
    3010:	ad 01       	movw	r20, r26
    3012:	c8 01       	movw	r24, r16
    3014:	b7 01       	movw	r22, r14
    3016:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	bc 01       	movw	r22, r24
    3020:	cd 01       	movw	r24, r26
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	9d 83       	std	Y+5, r25	; 0x05
    302c:	8c 83       	std	Y+4, r24	; 0x04
    302e:	66 c5       	rjmp	.+2764   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_9_bit	:	Local_u16TimerTop = NINE_BIT_TOP ;
    3030:	8f ef       	ldi	r24, 0xFF	; 255
    3032:	91 e0       	ldi	r25, 0x01	; 1
    3034:	9f 83       	std	Y+7, r25	; 0x07
    3036:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    3038:	89 85       	ldd	r24, Y+9	; 0x09
    303a:	86 31       	cpi	r24, 0x16	; 22
    303c:	41 f5       	brne	.+80     	; 0x308e <PWM_enuSetDutyCycle+0x40a>
    303e:	8e 81       	ldd	r24, Y+6	; 0x06
    3040:	9f 81       	ldd	r25, Y+7	; 0x07
    3042:	cc 01       	movw	r24, r24
    3044:	a0 e0       	ldi	r26, 0x00	; 0
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	2d 85       	ldd	r18, Y+13	; 0x0d
    305a:	3e 85       	ldd	r19, Y+14	; 0x0e
    305c:	4f 85       	ldd	r20, Y+15	; 0x0f
    305e:	58 89       	ldd	r21, Y+16	; 0x10
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	48 ec       	ldi	r20, 0xC8	; 200
    3072:	52 e4       	ldi	r21, 0x42	; 66
    3074:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	bc 01       	movw	r22, r24
    307e:	cd 01       	movw	r24, r26
    3080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	9d 83       	std	Y+5, r25	; 0x05
    308a:	8c 83       	std	Y+4, r24	; 0x04
    308c:	37 c5       	rjmp	.+2670   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	87 31       	cpi	r24, 0x17	; 23
    3092:	09 f0       	breq	.+2      	; 0x3096 <PWM_enuSetDutyCycle+0x412>
    3094:	33 c5       	rjmp	.+2662   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3096:	8e 81       	ldd	r24, Y+6	; 0x06
    3098:	9f 81       	ldd	r25, Y+7	; 0x07
    309a:	cc 01       	movw	r24, r24
    309c:	a0 e0       	ldi	r26, 0x00	; 0
    309e:	b0 e0       	ldi	r27, 0x00	; 0
    30a0:	bc 01       	movw	r22, r24
    30a2:	cd 01       	movw	r24, r26
    30a4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    30a8:	7b 01       	movw	r14, r22
    30aa:	8c 01       	movw	r16, r24
    30ac:	8e 81       	ldd	r24, Y+6	; 0x06
    30ae:	9f 81       	ldd	r25, Y+7	; 0x07
    30b0:	cc 01       	movw	r24, r24
    30b2:	a0 e0       	ldi	r26, 0x00	; 0
    30b4:	b0 e0       	ldi	r27, 0x00	; 0
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	bc 01       	movw	r22, r24
    30c4:	cd 01       	movw	r24, r26
    30c6:	2d 85       	ldd	r18, Y+13	; 0x0d
    30c8:	3e 85       	ldd	r19, Y+14	; 0x0e
    30ca:	4f 85       	ldd	r20, Y+15	; 0x0f
    30cc:	58 89       	ldd	r21, Y+16	; 0x10
    30ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	bc 01       	movw	r22, r24
    30d8:	cd 01       	movw	r24, r26
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	48 ec       	ldi	r20, 0xC8	; 200
    30e0:	52 ec       	ldi	r21, 0xC2	; 194
    30e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	9c 01       	movw	r18, r24
    30ec:	ad 01       	movw	r20, r26
    30ee:	c8 01       	movw	r24, r16
    30f0:	b7 01       	movw	r22, r14
    30f2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	bc 01       	movw	r22, r24
    30fc:	cd 01       	movw	r24, r26
    30fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9d 83       	std	Y+5, r25	; 0x05
    3108:	8c 83       	std	Y+4, r24	; 0x04
    310a:	f8 c4       	rjmp	.+2544   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_9_bit	:	Local_u16TimerTop = NINE_BIT_TOP ;
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	91 e0       	ldi	r25, 0x01	; 1
    3110:	9f 83       	std	Y+7, r25	; 0x07
    3112:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    3114:	89 85       	ldd	r24, Y+9	; 0x09
    3116:	86 31       	cpi	r24, 0x16	; 22
    3118:	b9 f4       	brne	.+46     	; 0x3148 <PWM_enuSetDutyCycle+0x4c4>
    311a:	19 8e       	std	Y+25, r1	; 0x19
    311c:	6d 85       	ldd	r22, Y+13	; 0x0d
    311e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3120:	8f 85       	ldd	r24, Y+15	; 0x0f
    3122:	98 89       	ldd	r25, Y+16	; 0x10
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3130:	88 23       	and	r24, r24
    3132:	11 f4       	brne	.+4      	; 0x3138 <PWM_enuSetDutyCycle+0x4b4>
    3134:	21 e0       	ldi	r18, 0x01	; 1
    3136:	29 8f       	std	Y+25, r18	; 0x19
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	39 8d       	ldd	r19, Y+25	; 0x19
    313c:	83 27       	eor	r24, r19
    313e:	88 23       	and	r24, r24
    3140:	19 f4       	brne	.+6      	; 0x3148 <PWM_enuSetDutyCycle+0x4c4>
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	88 87       	std	Y+8, r24	; 0x08
    3146:	da c4       	rjmp	.+2484   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3148:	89 85       	ldd	r24, Y+9	; 0x09
    314a:	87 31       	cpi	r24, 0x17	; 23
    314c:	b9 f4       	brne	.+46     	; 0x317c <PWM_enuSetDutyCycle+0x4f8>
    314e:	18 8e       	std	Y+24, r1	; 0x18
    3150:	6d 85       	ldd	r22, Y+13	; 0x0d
    3152:	7e 85       	ldd	r23, Y+14	; 0x0e
    3154:	8f 85       	ldd	r24, Y+15	; 0x0f
    3156:	98 89       	ldd	r25, Y+16	; 0x10
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	48 ec       	ldi	r20, 0xC8	; 200
    315e:	52 e4       	ldi	r21, 0x42	; 66
    3160:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3164:	88 23       	and	r24, r24
    3166:	11 f4       	brne	.+4      	; 0x316c <PWM_enuSetDutyCycle+0x4e8>
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	88 8f       	std	Y+24, r24	; 0x18
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	98 8d       	ldd	r25, Y+24	; 0x18
    3170:	89 27       	eor	r24, r25
    3172:	88 23       	and	r24, r24
    3174:	19 f4       	brne	.+6      	; 0x317c <PWM_enuSetDutyCycle+0x4f8>
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	88 87       	std	Y+8, r24	; 0x08
    317a:	c0 c4       	rjmp	.+2432   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    317c:	89 85       	ldd	r24, Y+9	; 0x09
    317e:	86 31       	cpi	r24, 0x16	; 22
    3180:	a9 f5       	brne	.+106    	; 0x31ec <PWM_enuSetDutyCycle+0x568>
    3182:	8e 81       	ldd	r24, Y+6	; 0x06
    3184:	9f 81       	ldd	r25, Y+7	; 0x07
    3186:	cc 01       	movw	r24, r24
    3188:	a0 e0       	ldi	r26, 0x00	; 0
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	a1 1d       	adc	r26, r1
    3190:	b1 1d       	adc	r27, r1
    3192:	bc 01       	movw	r22, r24
    3194:	cd 01       	movw	r24, r26
    3196:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	bc 01       	movw	r22, r24
    31a0:	cd 01       	movw	r24, r26
    31a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    31a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    31a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    31a8:	58 89       	ldd	r21, Y+16	; 0x10
    31aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	bc 01       	movw	r22, r24
    31b4:	cd 01       	movw	r24, r26
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	48 ec       	ldi	r20, 0xC8	; 200
    31bc:	52 e4       	ldi	r21, 0x42	; 66
    31be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	bc 01       	movw	r22, r24
    31c8:	cd 01       	movw	r24, r26
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9d 83       	std	Y+5, r25	; 0x05
    31e8:	8c 83       	std	Y+4, r24	; 0x04
    31ea:	88 c4       	rjmp	.+2320   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    31ec:	89 85       	ldd	r24, Y+9	; 0x09
    31ee:	87 31       	cpi	r24, 0x17	; 23
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <PWM_enuSetDutyCycle+0x570>
    31f2:	84 c4       	rjmp	.+2312   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    31f4:	8e 81       	ldd	r24, Y+6	; 0x06
    31f6:	9f 81       	ldd	r25, Y+7	; 0x07
    31f8:	cc 01       	movw	r24, r24
    31fa:	a0 e0       	ldi	r26, 0x00	; 0
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	bc 01       	movw	r22, r24
    3200:	cd 01       	movw	r24, r26
    3202:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3206:	7b 01       	movw	r14, r22
    3208:	8c 01       	movw	r16, r24
    320a:	8e 81       	ldd	r24, Y+6	; 0x06
    320c:	9f 81       	ldd	r25, Y+7	; 0x07
    320e:	cc 01       	movw	r24, r24
    3210:	a0 e0       	ldi	r26, 0x00	; 0
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	01 96       	adiw	r24, 0x01	; 1
    3216:	a1 1d       	adc	r26, r1
    3218:	b1 1d       	adc	r27, r1
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	2d 85       	ldd	r18, Y+13	; 0x0d
    322c:	3e 85       	ldd	r19, Y+14	; 0x0e
    322e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3230:	58 89       	ldd	r21, Y+16	; 0x10
    3232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	48 ec       	ldi	r20, 0xC8	; 200
    3244:	52 ec       	ldi	r21, 0xC2	; 194
    3246:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	9c 01       	movw	r18, r24
    3250:	ad 01       	movw	r20, r26
    3252:	c8 01       	movw	r24, r16
    3254:	b7 01       	movw	r22, r14
    3256:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	9d 83       	std	Y+5, r25	; 0x05
    326c:	8c 83       	std	Y+4, r24	; 0x04
    326e:	46 c4       	rjmp	.+2188   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_10_bit	:	Local_u16TimerTop = TEN_BIT_TOP ;
    3270:	8f ef       	ldi	r24, 0xFF	; 255
    3272:	93 e0       	ldi	r25, 0x03	; 3
    3274:	9f 83       	std	Y+7, r25	; 0x07
    3276:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    3278:	89 85       	ldd	r24, Y+9	; 0x09
    327a:	86 31       	cpi	r24, 0x16	; 22
    327c:	41 f5       	brne	.+80     	; 0x32ce <PWM_enuSetDutyCycle+0x64a>
    327e:	8e 81       	ldd	r24, Y+6	; 0x06
    3280:	9f 81       	ldd	r25, Y+7	; 0x07
    3282:	cc 01       	movw	r24, r24
    3284:	a0 e0       	ldi	r26, 0x00	; 0
    3286:	b0 e0       	ldi	r27, 0x00	; 0
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	bc 01       	movw	r22, r24
    3296:	cd 01       	movw	r24, r26
    3298:	2d 85       	ldd	r18, Y+13	; 0x0d
    329a:	3e 85       	ldd	r19, Y+14	; 0x0e
    329c:	4f 85       	ldd	r20, Y+15	; 0x0f
    329e:	58 89       	ldd	r21, Y+16	; 0x10
    32a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	bc 01       	movw	r22, r24
    32aa:	cd 01       	movw	r24, r26
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	48 ec       	ldi	r20, 0xC8	; 200
    32b2:	52 e4       	ldi	r21, 0x42	; 66
    32b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	bc 01       	movw	r22, r24
    32be:	cd 01       	movw	r24, r26
    32c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	9d 83       	std	Y+5, r25	; 0x05
    32ca:	8c 83       	std	Y+4, r24	; 0x04
    32cc:	17 c4       	rjmp	.+2094   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    32ce:	89 85       	ldd	r24, Y+9	; 0x09
    32d0:	87 31       	cpi	r24, 0x17	; 23
    32d2:	09 f0       	breq	.+2      	; 0x32d6 <PWM_enuSetDutyCycle+0x652>
    32d4:	13 c4       	rjmp	.+2086   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    32d6:	8e 81       	ldd	r24, Y+6	; 0x06
    32d8:	9f 81       	ldd	r25, Y+7	; 0x07
    32da:	cc 01       	movw	r24, r24
    32dc:	a0 e0       	ldi	r26, 0x00	; 0
    32de:	b0 e0       	ldi	r27, 0x00	; 0
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    32e8:	7b 01       	movw	r14, r22
    32ea:	8c 01       	movw	r16, r24
    32ec:	8e 81       	ldd	r24, Y+6	; 0x06
    32ee:	9f 81       	ldd	r25, Y+7	; 0x07
    32f0:	cc 01       	movw	r24, r24
    32f2:	a0 e0       	ldi	r26, 0x00	; 0
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	2d 85       	ldd	r18, Y+13	; 0x0d
    3308:	3e 85       	ldd	r19, Y+14	; 0x0e
    330a:	4f 85       	ldd	r20, Y+15	; 0x0f
    330c:	58 89       	ldd	r21, Y+16	; 0x10
    330e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	bc 01       	movw	r22, r24
    3318:	cd 01       	movw	r24, r26
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	48 ec       	ldi	r20, 0xC8	; 200
    3320:	52 ec       	ldi	r21, 0xC2	; 194
    3322:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9c 01       	movw	r18, r24
    332c:	ad 01       	movw	r20, r26
    332e:	c8 01       	movw	r24, r16
    3330:	b7 01       	movw	r22, r14
    3332:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9d 83       	std	Y+5, r25	; 0x05
    3348:	8c 83       	std	Y+4, r24	; 0x04
    334a:	d8 c3       	rjmp	.+1968   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_10_bit:	Local_u16TimerTop = TEN_BIT_TOP ;
    334c:	8f ef       	ldi	r24, 0xFF	; 255
    334e:	93 e0       	ldi	r25, 0x03	; 3
    3350:	9f 83       	std	Y+7, r25	; 0x07
    3352:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    3354:	89 85       	ldd	r24, Y+9	; 0x09
    3356:	86 31       	cpi	r24, 0x16	; 22
    3358:	b9 f4       	brne	.+46     	; 0x3388 <PWM_enuSetDutyCycle+0x704>
    335a:	1f 8a       	std	Y+23, r1	; 0x17
    335c:	6d 85       	ldd	r22, Y+13	; 0x0d
    335e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3360:	8f 85       	ldd	r24, Y+15	; 0x0f
    3362:	98 89       	ldd	r25, Y+16	; 0x10
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	50 e0       	ldi	r21, 0x00	; 0
    336c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3370:	88 23       	and	r24, r24
    3372:	11 f4       	brne	.+4      	; 0x3378 <PWM_enuSetDutyCycle+0x6f4>
    3374:	21 e0       	ldi	r18, 0x01	; 1
    3376:	2f 8b       	std	Y+23, r18	; 0x17
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	3f 89       	ldd	r19, Y+23	; 0x17
    337c:	83 27       	eor	r24, r19
    337e:	88 23       	and	r24, r24
    3380:	19 f4       	brne	.+6      	; 0x3388 <PWM_enuSetDutyCycle+0x704>
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	88 87       	std	Y+8, r24	; 0x08
    3386:	ba c3       	rjmp	.+1908   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3388:	89 85       	ldd	r24, Y+9	; 0x09
    338a:	87 31       	cpi	r24, 0x17	; 23
    338c:	b9 f4       	brne	.+46     	; 0x33bc <PWM_enuSetDutyCycle+0x738>
    338e:	1e 8a       	std	Y+22, r1	; 0x16
    3390:	6d 85       	ldd	r22, Y+13	; 0x0d
    3392:	7e 85       	ldd	r23, Y+14	; 0x0e
    3394:	8f 85       	ldd	r24, Y+15	; 0x0f
    3396:	98 89       	ldd	r25, Y+16	; 0x10
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	48 ec       	ldi	r20, 0xC8	; 200
    339e:	52 e4       	ldi	r21, 0x42	; 66
    33a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    33a4:	88 23       	and	r24, r24
    33a6:	11 f4       	brne	.+4      	; 0x33ac <PWM_enuSetDutyCycle+0x728>
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	8e 8b       	std	Y+22, r24	; 0x16
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	9e 89       	ldd	r25, Y+22	; 0x16
    33b0:	89 27       	eor	r24, r25
    33b2:	88 23       	and	r24, r24
    33b4:	19 f4       	brne	.+6      	; 0x33bc <PWM_enuSetDutyCycle+0x738>
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	88 87       	std	Y+8, r24	; 0x08
    33ba:	a0 c3       	rjmp	.+1856   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    33bc:	89 85       	ldd	r24, Y+9	; 0x09
    33be:	86 31       	cpi	r24, 0x16	; 22
    33c0:	a9 f5       	brne	.+106    	; 0x342c <PWM_enuSetDutyCycle+0x7a8>
    33c2:	8e 81       	ldd	r24, Y+6	; 0x06
    33c4:	9f 81       	ldd	r25, Y+7	; 0x07
    33c6:	cc 01       	movw	r24, r24
    33c8:	a0 e0       	ldi	r26, 0x00	; 0
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	a1 1d       	adc	r26, r1
    33d0:	b1 1d       	adc	r27, r1
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	bc 01       	movw	r22, r24
    33e0:	cd 01       	movw	r24, r26
    33e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    33e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    33e6:	4f 85       	ldd	r20, Y+15	; 0x0f
    33e8:	58 89       	ldd	r21, Y+16	; 0x10
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	48 ec       	ldi	r20, 0xC8	; 200
    33fc:	52 e4       	ldi	r21, 0x42	; 66
    33fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	bc 01       	movw	r22, r24
    3408:	cd 01       	movw	r24, r26
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	40 e8       	ldi	r20, 0x80	; 128
    3410:	5f e3       	ldi	r21, 0x3F	; 63
    3412:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	bc 01       	movw	r22, r24
    341c:	cd 01       	movw	r24, r26
    341e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	9d 83       	std	Y+5, r25	; 0x05
    3428:	8c 83       	std	Y+4, r24	; 0x04
    342a:	68 c3       	rjmp	.+1744   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    342c:	89 85       	ldd	r24, Y+9	; 0x09
    342e:	87 31       	cpi	r24, 0x17	; 23
    3430:	09 f0       	breq	.+2      	; 0x3434 <PWM_enuSetDutyCycle+0x7b0>
    3432:	64 c3       	rjmp	.+1736   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3434:	8e 81       	ldd	r24, Y+6	; 0x06
    3436:	9f 81       	ldd	r25, Y+7	; 0x07
    3438:	cc 01       	movw	r24, r24
    343a:	a0 e0       	ldi	r26, 0x00	; 0
    343c:	b0 e0       	ldi	r27, 0x00	; 0
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3446:	7b 01       	movw	r14, r22
    3448:	8c 01       	movw	r16, r24
    344a:	8e 81       	ldd	r24, Y+6	; 0x06
    344c:	9f 81       	ldd	r25, Y+7	; 0x07
    344e:	cc 01       	movw	r24, r24
    3450:	a0 e0       	ldi	r26, 0x00	; 0
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	01 96       	adiw	r24, 0x01	; 1
    3456:	a1 1d       	adc	r26, r1
    3458:	b1 1d       	adc	r27, r1
    345a:	bc 01       	movw	r22, r24
    345c:	cd 01       	movw	r24, r26
    345e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	bc 01       	movw	r22, r24
    3468:	cd 01       	movw	r24, r26
    346a:	2d 85       	ldd	r18, Y+13	; 0x0d
    346c:	3e 85       	ldd	r19, Y+14	; 0x0e
    346e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3470:	58 89       	ldd	r21, Y+16	; 0x10
    3472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	bc 01       	movw	r22, r24
    347c:	cd 01       	movw	r24, r26
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	48 ec       	ldi	r20, 0xC8	; 200
    3484:	52 ec       	ldi	r21, 0xC2	; 194
    3486:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	9c 01       	movw	r18, r24
    3490:	ad 01       	movw	r20, r26
    3492:	c8 01       	movw	r24, r16
    3494:	b7 01       	movw	r22, r14
    3496:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	bc 01       	movw	r22, r24
    34a0:	cd 01       	movw	r24, r26
    34a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	9d 83       	std	Y+5, r25	; 0x05
    34ac:	8c 83       	std	Y+4, r24	; 0x04
    34ae:	26 c3       	rjmp	.+1612   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PFC_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    34b0:	80 91 31 02 	lds	r24, 0x0231
    34b4:	90 91 32 02 	lds	r25, 0x0232
    34b8:	9f 83       	std	Y+7, r25	; 0x07
    34ba:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR ;
    34bc:	89 85       	ldd	r24, Y+9	; 0x09
    34be:	86 31       	cpi	r24, 0x16	; 22
    34c0:	41 f5       	brne	.+80     	; 0x3512 <PWM_enuSetDutyCycle+0x88e>
    34c2:	8e 81       	ldd	r24, Y+6	; 0x06
    34c4:	9f 81       	ldd	r25, Y+7	; 0x07
    34c6:	cc 01       	movw	r24, r24
    34c8:	a0 e0       	ldi	r26, 0x00	; 0
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	bc 01       	movw	r22, r24
    34ce:	cd 01       	movw	r24, r26
    34d0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    34de:	3e 85       	ldd	r19, Y+14	; 0x0e
    34e0:	4f 85       	ldd	r20, Y+15	; 0x0f
    34e2:	58 89       	ldd	r21, Y+16	; 0x10
    34e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	bc 01       	movw	r22, r24
    34ee:	cd 01       	movw	r24, r26
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	48 ec       	ldi	r20, 0xC8	; 200
    34f6:	52 e4       	ldi	r21, 0x42	; 66
    34f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3508:	dc 01       	movw	r26, r24
    350a:	cb 01       	movw	r24, r22
    350c:	9d 83       	std	Y+5, r25	; 0x05
    350e:	8c 83       	std	Y+4, r24	; 0x04
    3510:	f5 c2       	rjmp	.+1514   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3512:	89 85       	ldd	r24, Y+9	; 0x09
    3514:	87 31       	cpi	r24, 0x17	; 23
    3516:	09 f0       	breq	.+2      	; 0x351a <PWM_enuSetDutyCycle+0x896>
    3518:	f1 c2       	rjmp	.+1506   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    351a:	8e 81       	ldd	r24, Y+6	; 0x06
    351c:	9f 81       	ldd	r25, Y+7	; 0x07
    351e:	cc 01       	movw	r24, r24
    3520:	a0 e0       	ldi	r26, 0x00	; 0
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    352c:	7b 01       	movw	r14, r22
    352e:	8c 01       	movw	r16, r24
    3530:	8e 81       	ldd	r24, Y+6	; 0x06
    3532:	9f 81       	ldd	r25, Y+7	; 0x07
    3534:	cc 01       	movw	r24, r24
    3536:	a0 e0       	ldi	r26, 0x00	; 0
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	bc 01       	movw	r22, r24
    353c:	cd 01       	movw	r24, r26
    353e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	2d 85       	ldd	r18, Y+13	; 0x0d
    354c:	3e 85       	ldd	r19, Y+14	; 0x0e
    354e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3550:	58 89       	ldd	r21, Y+16	; 0x10
    3552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	bc 01       	movw	r22, r24
    355c:	cd 01       	movw	r24, r26
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	48 ec       	ldi	r20, 0xC8	; 200
    3564:	52 ec       	ldi	r21, 0xC2	; 194
    3566:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	9c 01       	movw	r18, r24
    3570:	ad 01       	movw	r20, r26
    3572:	c8 01       	movw	r24, r16
    3574:	b7 01       	movw	r22, r14
    3576:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	bc 01       	movw	r22, r24
    3580:	cd 01       	movw	r24, r26
    3582:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	9d 83       	std	Y+5, r25	; 0x05
    358c:	8c 83       	std	Y+4, r24	; 0x04
    358e:	b6 c2       	rjmp	.+1388   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    3590:	80 91 31 02 	lds	r24, 0x0231
    3594:	90 91 32 02 	lds	r25, 0x0232
    3598:	9f 83       	std	Y+7, r25	; 0x07
    359a:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    359c:	89 85       	ldd	r24, Y+9	; 0x09
    359e:	86 31       	cpi	r24, 0x16	; 22
    35a0:	41 f5       	brne	.+80     	; 0x35f2 <PWM_enuSetDutyCycle+0x96e>
    35a2:	8e 81       	ldd	r24, Y+6	; 0x06
    35a4:	9f 81       	ldd	r25, Y+7	; 0x07
    35a6:	cc 01       	movw	r24, r24
    35a8:	a0 e0       	ldi	r26, 0x00	; 0
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	bc 01       	movw	r22, r24
    35ba:	cd 01       	movw	r24, r26
    35bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    35be:	3e 85       	ldd	r19, Y+14	; 0x0e
    35c0:	4f 85       	ldd	r20, Y+15	; 0x0f
    35c2:	58 89       	ldd	r21, Y+16	; 0x10
    35c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c8:	dc 01       	movw	r26, r24
    35ca:	cb 01       	movw	r24, r22
    35cc:	bc 01       	movw	r22, r24
    35ce:	cd 01       	movw	r24, r26
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	48 ec       	ldi	r20, 0xC8	; 200
    35d6:	52 e4       	ldi	r21, 0x42	; 66
    35d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	bc 01       	movw	r22, r24
    35e2:	cd 01       	movw	r24, r26
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	9d 83       	std	Y+5, r25	; 0x05
    35ee:	8c 83       	std	Y+4, r24	; 0x04
    35f0:	85 c2       	rjmp	.+1290   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    35f2:	89 85       	ldd	r24, Y+9	; 0x09
    35f4:	87 31       	cpi	r24, 0x17	; 23
    35f6:	09 f0       	breq	.+2      	; 0x35fa <PWM_enuSetDutyCycle+0x976>
    35f8:	81 c2       	rjmp	.+1282   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    35fa:	8e 81       	ldd	r24, Y+6	; 0x06
    35fc:	9f 81       	ldd	r25, Y+7	; 0x07
    35fe:	cc 01       	movw	r24, r24
    3600:	a0 e0       	ldi	r26, 0x00	; 0
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    360c:	7b 01       	movw	r14, r22
    360e:	8c 01       	movw	r16, r24
    3610:	8e 81       	ldd	r24, Y+6	; 0x06
    3612:	9f 81       	ldd	r25, Y+7	; 0x07
    3614:	cc 01       	movw	r24, r24
    3616:	a0 e0       	ldi	r26, 0x00	; 0
    3618:	b0 e0       	ldi	r27, 0x00	; 0
    361a:	bc 01       	movw	r22, r24
    361c:	cd 01       	movw	r24, r26
    361e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	bc 01       	movw	r22, r24
    3628:	cd 01       	movw	r24, r26
    362a:	2d 85       	ldd	r18, Y+13	; 0x0d
    362c:	3e 85       	ldd	r19, Y+14	; 0x0e
    362e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3630:	58 89       	ldd	r21, Y+16	; 0x10
    3632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	bc 01       	movw	r22, r24
    363c:	cd 01       	movw	r24, r26
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	48 ec       	ldi	r20, 0xC8	; 200
    3644:	52 ec       	ldi	r21, 0xC2	; 194
    3646:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	9c 01       	movw	r18, r24
    3650:	ad 01       	movw	r20, r26
    3652:	c8 01       	movw	r24, r16
    3654:	b7 01       	movw	r22, r14
    3656:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    365a:	dc 01       	movw	r26, r24
    365c:	cb 01       	movw	r24, r22
    365e:	bc 01       	movw	r22, r24
    3660:	cd 01       	movw	r24, r26
    3662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	9d 83       	std	Y+5, r25	; 0x05
    366c:	8c 83       	std	Y+4, r24	; 0x04
    366e:	46 c2       	rjmp	.+1164   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    3670:	80 91 31 02 	lds	r24, 0x0231
    3674:	90 91 32 02 	lds	r25, 0x0232
    3678:	9f 83       	std	Y+7, r25	; 0x07
    367a:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	86 31       	cpi	r24, 0x16	; 22
    3680:	b9 f4       	brne	.+46     	; 0x36b0 <PWM_enuSetDutyCycle+0xa2c>
    3682:	1d 8a       	std	Y+21, r1	; 0x15
    3684:	6d 85       	ldd	r22, Y+13	; 0x0d
    3686:	7e 85       	ldd	r23, Y+14	; 0x0e
    3688:	8f 85       	ldd	r24, Y+15	; 0x0f
    368a:	98 89       	ldd	r25, Y+16	; 0x10
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	50 e0       	ldi	r21, 0x00	; 0
    3694:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3698:	88 23       	and	r24, r24
    369a:	11 f4       	brne	.+4      	; 0x36a0 <PWM_enuSetDutyCycle+0xa1c>
    369c:	21 e0       	ldi	r18, 0x01	; 1
    369e:	2d 8b       	std	Y+21, r18	; 0x15
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	3d 89       	ldd	r19, Y+21	; 0x15
    36a4:	83 27       	eor	r24, r19
    36a6:	88 23       	and	r24, r24
    36a8:	19 f4       	brne	.+6      	; 0x36b0 <PWM_enuSetDutyCycle+0xa2c>
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	88 87       	std	Y+8, r24	; 0x08
    36ae:	26 c2       	rjmp	.+1100   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    36b0:	89 85       	ldd	r24, Y+9	; 0x09
    36b2:	87 31       	cpi	r24, 0x17	; 23
    36b4:	b9 f4       	brne	.+46     	; 0x36e4 <PWM_enuSetDutyCycle+0xa60>
    36b6:	1c 8a       	std	Y+20, r1	; 0x14
    36b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    36ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    36bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    36be:	98 89       	ldd	r25, Y+16	; 0x10
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	48 ec       	ldi	r20, 0xC8	; 200
    36c6:	52 e4       	ldi	r21, 0x42	; 66
    36c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    36cc:	88 23       	and	r24, r24
    36ce:	11 f4       	brne	.+4      	; 0x36d4 <PWM_enuSetDutyCycle+0xa50>
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	8c 8b       	std	Y+20, r24	; 0x14
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	9c 89       	ldd	r25, Y+20	; 0x14
    36d8:	89 27       	eor	r24, r25
    36da:	88 23       	and	r24, r24
    36dc:	19 f4       	brne	.+6      	; 0x36e4 <PWM_enuSetDutyCycle+0xa60>
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	88 87       	std	Y+8, r24	; 0x08
    36e2:	0c c2       	rjmp	.+1048   	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    36e4:	89 85       	ldd	r24, Y+9	; 0x09
    36e6:	86 31       	cpi	r24, 0x16	; 22
    36e8:	a9 f5       	brne	.+106    	; 0x3754 <PWM_enuSetDutyCycle+0xad0>
    36ea:	8e 81       	ldd	r24, Y+6	; 0x06
    36ec:	9f 81       	ldd	r25, Y+7	; 0x07
    36ee:	cc 01       	movw	r24, r24
    36f0:	a0 e0       	ldi	r26, 0x00	; 0
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	01 96       	adiw	r24, 0x01	; 1
    36f6:	a1 1d       	adc	r26, r1
    36f8:	b1 1d       	adc	r27, r1
    36fa:	bc 01       	movw	r22, r24
    36fc:	cd 01       	movw	r24, r26
    36fe:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	bc 01       	movw	r22, r24
    3708:	cd 01       	movw	r24, r26
    370a:	2d 85       	ldd	r18, Y+13	; 0x0d
    370c:	3e 85       	ldd	r19, Y+14	; 0x0e
    370e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3710:	58 89       	ldd	r21, Y+16	; 0x10
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	bc 01       	movw	r22, r24
    371c:	cd 01       	movw	r24, r26
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	48 ec       	ldi	r20, 0xC8	; 200
    3724:	52 e4       	ldi	r21, 0x42	; 66
    3726:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    372a:	dc 01       	movw	r26, r24
    372c:	cb 01       	movw	r24, r22
    372e:	bc 01       	movw	r22, r24
    3730:	cd 01       	movw	r24, r26
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	9d 83       	std	Y+5, r25	; 0x05
    3750:	8c 83       	std	Y+4, r24	; 0x04
    3752:	d4 c1       	rjmp	.+936    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3754:	89 85       	ldd	r24, Y+9	; 0x09
    3756:	87 31       	cpi	r24, 0x17	; 23
    3758:	09 f0       	breq	.+2      	; 0x375c <PWM_enuSetDutyCycle+0xad8>
    375a:	d0 c1       	rjmp	.+928    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    375c:	8e 81       	ldd	r24, Y+6	; 0x06
    375e:	9f 81       	ldd	r25, Y+7	; 0x07
    3760:	cc 01       	movw	r24, r24
    3762:	a0 e0       	ldi	r26, 0x00	; 0
    3764:	b0 e0       	ldi	r27, 0x00	; 0
    3766:	bc 01       	movw	r22, r24
    3768:	cd 01       	movw	r24, r26
    376a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    376e:	7b 01       	movw	r14, r22
    3770:	8c 01       	movw	r16, r24
    3772:	8e 81       	ldd	r24, Y+6	; 0x06
    3774:	9f 81       	ldd	r25, Y+7	; 0x07
    3776:	cc 01       	movw	r24, r24
    3778:	a0 e0       	ldi	r26, 0x00	; 0
    377a:	b0 e0       	ldi	r27, 0x00	; 0
    377c:	01 96       	adiw	r24, 0x01	; 1
    377e:	a1 1d       	adc	r26, r1
    3780:	b1 1d       	adc	r27, r1
    3782:	bc 01       	movw	r22, r24
    3784:	cd 01       	movw	r24, r26
    3786:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    378a:	dc 01       	movw	r26, r24
    378c:	cb 01       	movw	r24, r22
    378e:	bc 01       	movw	r22, r24
    3790:	cd 01       	movw	r24, r26
    3792:	2d 85       	ldd	r18, Y+13	; 0x0d
    3794:	3e 85       	ldd	r19, Y+14	; 0x0e
    3796:	4f 85       	ldd	r20, Y+15	; 0x0f
    3798:	58 89       	ldd	r21, Y+16	; 0x10
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	48 ec       	ldi	r20, 0xC8	; 200
    37ac:	52 ec       	ldi	r21, 0xC2	; 194
    37ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	9c 01       	movw	r18, r24
    37b8:	ad 01       	movw	r20, r26
    37ba:	c8 01       	movw	r24, r16
    37bc:	b7 01       	movw	r22, r14
    37be:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	9d 83       	std	Y+5, r25	; 0x05
    37d4:	8c 83       	std	Y+4, r24	; 0x04
    37d6:	92 c1       	rjmp	.+804    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PFC_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    37d8:	80 91 2d 02 	lds	r24, 0x022D
    37dc:	90 91 2e 02 	lds	r25, 0x022E
    37e0:	9f 83       	std	Y+7, r25	; 0x07
    37e2:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    37e4:	89 85       	ldd	r24, Y+9	; 0x09
    37e6:	86 31       	cpi	r24, 0x16	; 22
    37e8:	41 f5       	brne	.+80     	; 0x383a <PWM_enuSetDutyCycle+0xbb6>
    37ea:	8e 81       	ldd	r24, Y+6	; 0x06
    37ec:	9f 81       	ldd	r25, Y+7	; 0x07
    37ee:	cc 01       	movw	r24, r24
    37f0:	a0 e0       	ldi	r26, 0x00	; 0
    37f2:	b0 e0       	ldi	r27, 0x00	; 0
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	bc 01       	movw	r22, r24
    3802:	cd 01       	movw	r24, r26
    3804:	2d 85       	ldd	r18, Y+13	; 0x0d
    3806:	3e 85       	ldd	r19, Y+14	; 0x0e
    3808:	4f 85       	ldd	r20, Y+15	; 0x0f
    380a:	58 89       	ldd	r21, Y+16	; 0x10
    380c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3810:	dc 01       	movw	r26, r24
    3812:	cb 01       	movw	r24, r22
    3814:	bc 01       	movw	r22, r24
    3816:	cd 01       	movw	r24, r26
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	48 ec       	ldi	r20, 0xC8	; 200
    381e:	52 e4       	ldi	r21, 0x42	; 66
    3820:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3824:	dc 01       	movw	r26, r24
    3826:	cb 01       	movw	r24, r22
    3828:	bc 01       	movw	r22, r24
    382a:	cd 01       	movw	r24, r26
    382c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3830:	dc 01       	movw	r26, r24
    3832:	cb 01       	movw	r24, r22
    3834:	9d 83       	std	Y+5, r25	; 0x05
    3836:	8c 83       	std	Y+4, r24	; 0x04
    3838:	61 c1       	rjmp	.+706    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    383a:	89 85       	ldd	r24, Y+9	; 0x09
    383c:	87 31       	cpi	r24, 0x17	; 23
    383e:	09 f0       	breq	.+2      	; 0x3842 <PWM_enuSetDutyCycle+0xbbe>
    3840:	5d c1       	rjmp	.+698    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3842:	8e 81       	ldd	r24, Y+6	; 0x06
    3844:	9f 81       	ldd	r25, Y+7	; 0x07
    3846:	cc 01       	movw	r24, r24
    3848:	a0 e0       	ldi	r26, 0x00	; 0
    384a:	b0 e0       	ldi	r27, 0x00	; 0
    384c:	bc 01       	movw	r22, r24
    384e:	cd 01       	movw	r24, r26
    3850:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3854:	7b 01       	movw	r14, r22
    3856:	8c 01       	movw	r16, r24
    3858:	8e 81       	ldd	r24, Y+6	; 0x06
    385a:	9f 81       	ldd	r25, Y+7	; 0x07
    385c:	cc 01       	movw	r24, r24
    385e:	a0 e0       	ldi	r26, 0x00	; 0
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	bc 01       	movw	r22, r24
    3864:	cd 01       	movw	r24, r26
    3866:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	bc 01       	movw	r22, r24
    3870:	cd 01       	movw	r24, r26
    3872:	2d 85       	ldd	r18, Y+13	; 0x0d
    3874:	3e 85       	ldd	r19, Y+14	; 0x0e
    3876:	4f 85       	ldd	r20, Y+15	; 0x0f
    3878:	58 89       	ldd	r21, Y+16	; 0x10
    387a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	bc 01       	movw	r22, r24
    3884:	cd 01       	movw	r24, r26
    3886:	20 e0       	ldi	r18, 0x00	; 0
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	48 ec       	ldi	r20, 0xC8	; 200
    388c:	52 ec       	ldi	r21, 0xC2	; 194
    388e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3892:	dc 01       	movw	r26, r24
    3894:	cb 01       	movw	r24, r22
    3896:	9c 01       	movw	r18, r24
    3898:	ad 01       	movw	r20, r26
    389a:	c8 01       	movw	r24, r16
    389c:	b7 01       	movw	r22, r14
    389e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	bc 01       	movw	r22, r24
    38a8:	cd 01       	movw	r24, r26
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	9d 83       	std	Y+5, r25	; 0x05
    38b4:	8c 83       	std	Y+4, r24	; 0x04
    38b6:	22 c1       	rjmp	.+580    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    38b8:	80 91 2d 02 	lds	r24, 0x022D
    38bc:	90 91 2e 02 	lds	r25, 0x022E
    38c0:	9f 83       	std	Y+7, r25	; 0x07
    38c2:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	86 31       	cpi	r24, 0x16	; 22
    38c8:	41 f5       	brne	.+80     	; 0x391a <PWM_enuSetDutyCycle+0xc96>
    38ca:	8e 81       	ldd	r24, Y+6	; 0x06
    38cc:	9f 81       	ldd	r25, Y+7	; 0x07
    38ce:	cc 01       	movw	r24, r24
    38d0:	a0 e0       	ldi	r26, 0x00	; 0
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	bc 01       	movw	r22, r24
    38d6:	cd 01       	movw	r24, r26
    38d8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	bc 01       	movw	r22, r24
    38e2:	cd 01       	movw	r24, r26
    38e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    38e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    38e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    38ea:	58 89       	ldd	r21, Y+16	; 0x10
    38ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	bc 01       	movw	r22, r24
    38f6:	cd 01       	movw	r24, r26
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	48 ec       	ldi	r20, 0xC8	; 200
    38fe:	52 e4       	ldi	r21, 0x42	; 66
    3900:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3904:	dc 01       	movw	r26, r24
    3906:	cb 01       	movw	r24, r22
    3908:	bc 01       	movw	r22, r24
    390a:	cd 01       	movw	r24, r26
    390c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3910:	dc 01       	movw	r26, r24
    3912:	cb 01       	movw	r24, r22
    3914:	9d 83       	std	Y+5, r25	; 0x05
    3916:	8c 83       	std	Y+4, r24	; 0x04
    3918:	f1 c0       	rjmp	.+482    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    391a:	89 85       	ldd	r24, Y+9	; 0x09
    391c:	87 31       	cpi	r24, 0x17	; 23
    391e:	09 f0       	breq	.+2      	; 0x3922 <PWM_enuSetDutyCycle+0xc9e>
    3920:	ed c0       	rjmp	.+474    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3922:	8e 81       	ldd	r24, Y+6	; 0x06
    3924:	9f 81       	ldd	r25, Y+7	; 0x07
    3926:	cc 01       	movw	r24, r24
    3928:	a0 e0       	ldi	r26, 0x00	; 0
    392a:	b0 e0       	ldi	r27, 0x00	; 0
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3934:	7b 01       	movw	r14, r22
    3936:	8c 01       	movw	r16, r24
    3938:	8e 81       	ldd	r24, Y+6	; 0x06
    393a:	9f 81       	ldd	r25, Y+7	; 0x07
    393c:	cc 01       	movw	r24, r24
    393e:	a0 e0       	ldi	r26, 0x00	; 0
    3940:	b0 e0       	ldi	r27, 0x00	; 0
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	bc 01       	movw	r22, r24
    3950:	cd 01       	movw	r24, r26
    3952:	2d 85       	ldd	r18, Y+13	; 0x0d
    3954:	3e 85       	ldd	r19, Y+14	; 0x0e
    3956:	4f 85       	ldd	r20, Y+15	; 0x0f
    3958:	58 89       	ldd	r21, Y+16	; 0x10
    395a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	bc 01       	movw	r22, r24
    3964:	cd 01       	movw	r24, r26
    3966:	20 e0       	ldi	r18, 0x00	; 0
    3968:	30 e0       	ldi	r19, 0x00	; 0
    396a:	48 ec       	ldi	r20, 0xC8	; 200
    396c:	52 ec       	ldi	r21, 0xC2	; 194
    396e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3972:	dc 01       	movw	r26, r24
    3974:	cb 01       	movw	r24, r22
    3976:	9c 01       	movw	r18, r24
    3978:	ad 01       	movw	r20, r26
    397a:	c8 01       	movw	r24, r16
    397c:	b7 01       	movw	r22, r14
    397e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	bc 01       	movw	r22, r24
    3988:	cd 01       	movw	r24, r26
    398a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	9d 83       	std	Y+5, r25	; 0x05
    3994:	8c 83       	std	Y+4, r24	; 0x04
    3996:	b2 c0       	rjmp	.+356    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    3998:	80 91 2d 02 	lds	r24, 0x022D
    399c:	90 91 2e 02 	lds	r25, 0x022E
    39a0:	9f 83       	std	Y+7, r25	; 0x07
    39a2:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    39a4:	89 85       	ldd	r24, Y+9	; 0x09
    39a6:	86 31       	cpi	r24, 0x16	; 22
    39a8:	b9 f4       	brne	.+46     	; 0x39d8 <PWM_enuSetDutyCycle+0xd54>
    39aa:	1b 8a       	std	Y+19, r1	; 0x13
    39ac:	6d 85       	ldd	r22, Y+13	; 0x0d
    39ae:	7e 85       	ldd	r23, Y+14	; 0x0e
    39b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b2:	98 89       	ldd	r25, Y+16	; 0x10
    39b4:	20 e0       	ldi	r18, 0x00	; 0
    39b6:	30 e0       	ldi	r19, 0x00	; 0
    39b8:	40 e0       	ldi	r20, 0x00	; 0
    39ba:	50 e0       	ldi	r21, 0x00	; 0
    39bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    39c0:	88 23       	and	r24, r24
    39c2:	11 f4       	brne	.+4      	; 0x39c8 <PWM_enuSetDutyCycle+0xd44>
    39c4:	21 e0       	ldi	r18, 0x01	; 1
    39c6:	2b 8b       	std	Y+19, r18	; 0x13
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	3b 89       	ldd	r19, Y+19	; 0x13
    39cc:	83 27       	eor	r24, r19
    39ce:	88 23       	and	r24, r24
    39d0:	19 f4       	brne	.+6      	; 0x39d8 <PWM_enuSetDutyCycle+0xd54>
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	88 87       	std	Y+8, r24	; 0x08
    39d6:	92 c0       	rjmp	.+292    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    39d8:	89 85       	ldd	r24, Y+9	; 0x09
    39da:	87 31       	cpi	r24, 0x17	; 23
    39dc:	b9 f4       	brne	.+46     	; 0x3a0c <PWM_enuSetDutyCycle+0xd88>
    39de:	1a 8a       	std	Y+18, r1	; 0x12
    39e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    39e2:	7e 85       	ldd	r23, Y+14	; 0x0e
    39e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e6:	98 89       	ldd	r25, Y+16	; 0x10
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	48 ec       	ldi	r20, 0xC8	; 200
    39ee:	52 e4       	ldi	r21, 0x42	; 66
    39f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    39f4:	88 23       	and	r24, r24
    39f6:	11 f4       	brne	.+4      	; 0x39fc <PWM_enuSetDutyCycle+0xd78>
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	8a 8b       	std	Y+18, r24	; 0x12
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	9a 89       	ldd	r25, Y+18	; 0x12
    3a00:	89 27       	eor	r24, r25
    3a02:	88 23       	and	r24, r24
    3a04:	19 f4       	brne	.+6      	; 0x3a0c <PWM_enuSetDutyCycle+0xd88>
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	88 87       	std	Y+8, r24	; 0x08
    3a0a:	78 c0       	rjmp	.+240    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3a0c:	89 85       	ldd	r24, Y+9	; 0x09
    3a0e:	86 31       	cpi	r24, 0x16	; 22
    3a10:	a9 f5       	brne	.+106    	; 0x3a7c <PWM_enuSetDutyCycle+0xdf8>
    3a12:	8e 81       	ldd	r24, Y+6	; 0x06
    3a14:	9f 81       	ldd	r25, Y+7	; 0x07
    3a16:	cc 01       	movw	r24, r24
    3a18:	a0 e0       	ldi	r26, 0x00	; 0
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	01 96       	adiw	r24, 0x01	; 1
    3a1e:	a1 1d       	adc	r26, r1
    3a20:	b1 1d       	adc	r27, r1
    3a22:	bc 01       	movw	r22, r24
    3a24:	cd 01       	movw	r24, r26
    3a26:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a34:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a36:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a38:	58 89       	ldd	r21, Y+16	; 0x10
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	bc 01       	movw	r22, r24
    3a44:	cd 01       	movw	r24, r26
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	48 ec       	ldi	r20, 0xC8	; 200
    3a4c:	52 e4       	ldi	r21, 0x42	; 66
    3a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	bc 01       	movw	r22, r24
    3a58:	cd 01       	movw	r24, r26
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e8       	ldi	r20, 0x80	; 128
    3a60:	5f e3       	ldi	r21, 0x3F	; 63
    3a62:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	bc 01       	movw	r22, r24
    3a6c:	cd 01       	movw	r24, r26
    3a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	9d 83       	std	Y+5, r25	; 0x05
    3a78:	8c 83       	std	Y+4, r24	; 0x04
    3a7a:	40 c0       	rjmp	.+128    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3a7c:	89 85       	ldd	r24, Y+9	; 0x09
    3a7e:	87 31       	cpi	r24, 0x17	; 23
    3a80:	e9 f5       	brne	.+122    	; 0x3afc <PWM_enuSetDutyCycle+0xe78>
    3a82:	8e 81       	ldd	r24, Y+6	; 0x06
    3a84:	9f 81       	ldd	r25, Y+7	; 0x07
    3a86:	cc 01       	movw	r24, r24
    3a88:	a0 e0       	ldi	r26, 0x00	; 0
    3a8a:	b0 e0       	ldi	r27, 0x00	; 0
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	cd 01       	movw	r24, r26
    3a90:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3a94:	7b 01       	movw	r14, r22
    3a96:	8c 01       	movw	r16, r24
    3a98:	8e 81       	ldd	r24, Y+6	; 0x06
    3a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3a9c:	cc 01       	movw	r24, r24
    3a9e:	a0 e0       	ldi	r26, 0x00	; 0
    3aa0:	b0 e0       	ldi	r27, 0x00	; 0
    3aa2:	01 96       	adiw	r24, 0x01	; 1
    3aa4:	a1 1d       	adc	r26, r1
    3aa6:	b1 1d       	adc	r27, r1
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	bc 01       	movw	r22, r24
    3ab6:	cd 01       	movw	r24, r26
    3ab8:	2d 85       	ldd	r18, Y+13	; 0x0d
    3aba:	3e 85       	ldd	r19, Y+14	; 0x0e
    3abc:	4f 85       	ldd	r20, Y+15	; 0x0f
    3abe:	58 89       	ldd	r21, Y+16	; 0x10
    3ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	bc 01       	movw	r22, r24
    3aca:	cd 01       	movw	r24, r26
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	48 ec       	ldi	r20, 0xC8	; 200
    3ad2:	52 ec       	ldi	r21, 0xC2	; 194
    3ad4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	9c 01       	movw	r18, r24
    3ade:	ad 01       	movw	r20, r26
    3ae0:	c8 01       	movw	r24, r16
    3ae2:	b7 01       	movw	r22, r14
    3ae4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	9d 83       	std	Y+5, r25	; 0x05
    3afa:	8c 83       	std	Y+4, r24	; 0x04
									break;
		}

		if( !Local_u8Flag )
    3afc:	88 85       	ldd	r24, Y+8	; 0x08
    3afe:	88 23       	and	r24, r24
    3b00:	09 f0       	breq	.+2      	; 0x3b04 <PWM_enuSetDutyCycle+0xe80>
    3b02:	3c c0       	rjmp	.+120    	; 0x3b7c <PWM_enuSetDutyCycle+0xef8>
		{
			if( Copy_u8TimerNum == TIMER1A )
    3b04:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b06:	89 3c       	cpi	r24, 0xC9	; 201
    3b08:	d9 f4       	brne	.+54     	; 0x3b40 <PWM_enuSetDutyCycle+0xebc>
			{
				u8 Local_u8Temp = SREG ;
    3b0a:	ef e5       	ldi	r30, 0x5F	; 95
    3b0c:	f0 e0       	ldi	r31, 0x00	; 0
    3b0e:	80 81       	ld	r24, Z
    3b10:	8a 83       	std	Y+2, r24	; 0x02
				_CLI_;
    3b12:	f8 94       	cli
				OCR1AH  = Local_u16OCRValue >> _BYTE_SHIFT_ ;
    3b14:	eb e4       	ldi	r30, 0x4B	; 75
    3b16:	f0 e0       	ldi	r31, 0x00	; 0
    3b18:	8c 81       	ldd	r24, Y+4	; 0x04
    3b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b1c:	89 2f       	mov	r24, r25
    3b1e:	99 27       	eor	r25, r25
    3b20:	80 83       	st	Z, r24
				OCR1AL 	= Local_u16OCRValue ;
    3b22:	ea e4       	ldi	r30, 0x4A	; 74
    3b24:	f0 e0       	ldi	r31, 0x00	; 0
    3b26:	8c 81       	ldd	r24, Y+4	; 0x04
    3b28:	80 83       	st	Z, r24
				SREG = Local_u8Temp;
    3b2a:	ef e5       	ldi	r30, 0x5F	; 95
    3b2c:	f0 e0       	ldi	r31, 0x00	; 0
    3b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b30:	80 83       	st	Z, r24
				Global_u16OCR1A_Value = Local_u16OCRValue ;
    3b32:	8c 81       	ldd	r24, Y+4	; 0x04
    3b34:	9d 81       	ldd	r25, Y+5	; 0x05
    3b36:	90 93 2e 02 	sts	0x022E, r25
    3b3a:	80 93 2d 02 	sts	0x022D, r24
    3b3e:	23 c0       	rjmp	.+70     	; 0x3b86 <PWM_enuSetDutyCycle+0xf02>
			}
			else if( Copy_u8TimerNum == TIMER1B )
    3b40:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b42:	8a 3c       	cpi	r24, 0xCA	; 202
    3b44:	01 f5       	brne	.+64     	; 0x3b86 <PWM_enuSetDutyCycle+0xf02>
			{
				u8 Local_u8Temp = SREG ;
    3b46:	ef e5       	ldi	r30, 0x5F	; 95
    3b48:	f0 e0       	ldi	r31, 0x00	; 0
    3b4a:	80 81       	ld	r24, Z
    3b4c:	89 83       	std	Y+1, r24	; 0x01
				_CLI_;
    3b4e:	f8 94       	cli
				OCR1BH  = Local_u16OCRValue >> _BYTE_SHIFT_ ;
    3b50:	e9 e4       	ldi	r30, 0x49	; 73
    3b52:	f0 e0       	ldi	r31, 0x00	; 0
    3b54:	8c 81       	ldd	r24, Y+4	; 0x04
    3b56:	9d 81       	ldd	r25, Y+5	; 0x05
    3b58:	89 2f       	mov	r24, r25
    3b5a:	99 27       	eor	r25, r25
    3b5c:	80 83       	st	Z, r24
				OCR1BL 	= Local_u16OCRValue ;
    3b5e:	e8 e4       	ldi	r30, 0x48	; 72
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	8c 81       	ldd	r24, Y+4	; 0x04
    3b64:	80 83       	st	Z, r24
				SREG = Local_u8Temp;
    3b66:	ef e5       	ldi	r30, 0x5F	; 95
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	80 83       	st	Z, r24
				Global_u16OCR1B_Value = Local_u16OCRValue ;
    3b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3b70:	9d 81       	ldd	r25, Y+5	; 0x05
    3b72:	90 93 30 02 	sts	0x0230, r25
    3b76:	80 93 2f 02 	sts	0x022F, r24
    3b7a:	05 c0       	rjmp	.+10     	; 0x3b86 <PWM_enuSetDutyCycle+0xf02>
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    3b7c:	82 e0       	ldi	r24, 0x02	; 2
    3b7e:	8b 87       	std	Y+11, r24	; 0x0b
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <PWM_enuSetDutyCycle+0xf02>
			#warning " PWM_enuSetDutyCycle(): Requested Duty Cycle Can NOT be reached in this mode "
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    3b82:	82 e0       	ldi	r24, 0x02	; 2
    3b84:	8b 87       	std	Y+11, r24	; 0x0b

	return ( Local_enuErrorState == ES_NOK ? ES_OK : Local_enuErrorState ) ;
    3b86:	8b 85       	ldd	r24, Y+11	; 0x0b
    3b88:	81 30       	cpi	r24, 0x01	; 1
    3b8a:	19 f0       	breq	.+6      	; 0x3b92 <PWM_enuSetDutyCycle+0xf0e>
    3b8c:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b8e:	29 8b       	std	Y+17, r18	; 0x11
    3b90:	01 c0       	rjmp	.+2      	; 0x3b94 <PWM_enuSetDutyCycle+0xf10>
    3b92:	19 8a       	std	Y+17, r1	; 0x11
    3b94:	89 89       	ldd	r24, Y+17	; 0x11
}
    3b96:	6d 96       	adiw	r28, 0x1d	; 29
    3b98:	0f b6       	in	r0, 0x3f	; 63
    3b9a:	f8 94       	cli
    3b9c:	de bf       	out	0x3e, r29	; 62
    3b9e:	0f be       	out	0x3f, r0	; 63
    3ba0:	cd bf       	out	0x3d, r28	; 61
    3ba2:	cf 91       	pop	r28
    3ba4:	df 91       	pop	r29
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	ff 90       	pop	r15
    3bac:	ef 90       	pop	r14
    3bae:	08 95       	ret

00003bb0 <PWM_enuInterruptEnable>:

ES_t PWM_enuInterruptEnable( u8 Copy_u8TimerIntName)
{
    3bb0:	df 93       	push	r29
    3bb2:	cf 93       	push	r28
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <PWM_enuInterruptEnable+0x6>
    3bb6:	00 d0       	rcall	.+0      	; 0x3bb8 <PWM_enuInterruptEnable+0x8>
    3bb8:	0f 92       	push	r0
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	89 83       	std	Y+1, r24	; 0x01

	_CLI_;														// Disable all Interrupts
    3bc4:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    3bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc8:	28 2f       	mov	r18, r24
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	3d 83       	std	Y+5, r19	; 0x05
    3bce:	2c 83       	std	Y+4, r18	; 0x04
    3bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bd4:	8f 33       	cpi	r24, 0x3F	; 63
    3bd6:	91 05       	cpc	r25, r1
    3bd8:	91 f0       	breq	.+36     	; 0x3bfe <PWM_enuInterruptEnable+0x4e>
    3bda:	2c 81       	ldd	r18, Y+4	; 0x04
    3bdc:	3d 81       	ldd	r19, Y+5	; 0x05
    3bde:	20 34       	cpi	r18, 0x40	; 64
    3be0:	31 05       	cpc	r19, r1
    3be2:	a9 f0       	breq	.+42     	; 0x3c0e <PWM_enuInterruptEnable+0x5e>
    3be4:	8c 81       	ldd	r24, Y+4	; 0x04
    3be6:	9d 81       	ldd	r25, Y+5	; 0x05
    3be8:	8e 33       	cpi	r24, 0x3E	; 62
    3bea:	91 05       	cpc	r25, r1
    3bec:	c1 f4       	brne	.+48     	; 0x3c1e <PWM_enuInterruptEnable+0x6e>
	{
		case TOIE1	:	SET_BIT( TIMSK , TOIE1_BIT);
    3bee:	a9 e5       	ldi	r26, 0x59	; 89
    3bf0:	b0 e0       	ldi	r27, 0x00	; 0
    3bf2:	e9 e5       	ldi	r30, 0x59	; 89
    3bf4:	f0 e0       	ldi	r31, 0x00	; 0
    3bf6:	80 81       	ld	r24, Z
    3bf8:	84 60       	ori	r24, 0x04	; 4
    3bfa:	8c 93       	st	X, r24
    3bfc:	12 c0       	rjmp	.+36     	; 0x3c22 <PWM_enuInterruptEnable+0x72>
						break;
		case OCIE1B	:	SET_BIT( TIMSK , OCIE1B_BIT);
    3bfe:	a9 e5       	ldi	r26, 0x59	; 89
    3c00:	b0 e0       	ldi	r27, 0x00	; 0
    3c02:	e9 e5       	ldi	r30, 0x59	; 89
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	80 81       	ld	r24, Z
    3c08:	88 60       	ori	r24, 0x08	; 8
    3c0a:	8c 93       	st	X, r24
    3c0c:	0a c0       	rjmp	.+20     	; 0x3c22 <PWM_enuInterruptEnable+0x72>
						break;
		case OCIE1A	:	SET_BIT( TIMSK , OCIE1A_BIT);
    3c0e:	a9 e5       	ldi	r26, 0x59	; 89
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	e9 e5       	ldi	r30, 0x59	; 89
    3c14:	f0 e0       	ldi	r31, 0x00	; 0
    3c16:	80 81       	ld	r24, Z
    3c18:	80 61       	ori	r24, 0x10	; 16
    3c1a:	8c 93       	st	X, r24
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <PWM_enuInterruptEnable+0x72>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    3c1e:	82 e0       	ldi	r24, 0x02	; 2
    3c20:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}
	_SEI_;													// Enable ALL Interrupts
    3c22:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
    3c26:	81 30       	cpi	r24, 0x01	; 1
    3c28:	19 f0       	breq	.+6      	; 0x3c30 <PWM_enuInterruptEnable+0x80>
    3c2a:	99 81       	ldd	r25, Y+1	; 0x01
    3c2c:	9b 83       	std	Y+3, r25	; 0x03
    3c2e:	01 c0       	rjmp	.+2      	; 0x3c32 <PWM_enuInterruptEnable+0x82>
    3c30:	1b 82       	std	Y+3, r1	; 0x03
    3c32:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3c34:	0f 90       	pop	r0
    3c36:	0f 90       	pop	r0
    3c38:	0f 90       	pop	r0
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	08 95       	ret

00003c44 <PWM_enuInterruptDisable>:

ES_t PWM_enuInterruptDisable( u8 Copy_u8TimerIntName)
{
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	00 d0       	rcall	.+0      	; 0x3c4a <PWM_enuInterruptDisable+0x6>
    3c4a:	00 d0       	rcall	.+0      	; 0x3c4c <PWM_enuInterruptDisable+0x8>
    3c4c:	0f 92       	push	r0
    3c4e:	cd b7       	in	r28, 0x3d	; 61
    3c50:	de b7       	in	r29, 0x3e	; 62
    3c52:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	89 83       	std	Y+1, r24	; 0x01

	_CLI_;																// Disable ALL Interrupts
    3c58:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    3c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c5c:	28 2f       	mov	r18, r24
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	3d 83       	std	Y+5, r19	; 0x05
    3c62:	2c 83       	std	Y+4, r18	; 0x04
    3c64:	8c 81       	ldd	r24, Y+4	; 0x04
    3c66:	9d 81       	ldd	r25, Y+5	; 0x05
    3c68:	8f 33       	cpi	r24, 0x3F	; 63
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	91 f0       	breq	.+36     	; 0x3c92 <PWM_enuInterruptDisable+0x4e>
    3c6e:	2c 81       	ldd	r18, Y+4	; 0x04
    3c70:	3d 81       	ldd	r19, Y+5	; 0x05
    3c72:	20 34       	cpi	r18, 0x40	; 64
    3c74:	31 05       	cpc	r19, r1
    3c76:	a9 f0       	breq	.+42     	; 0x3ca2 <PWM_enuInterruptDisable+0x5e>
    3c78:	8c 81       	ldd	r24, Y+4	; 0x04
    3c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c7c:	8e 33       	cpi	r24, 0x3E	; 62
    3c7e:	91 05       	cpc	r25, r1
    3c80:	c1 f4       	brne	.+48     	; 0x3cb2 <PWM_enuInterruptDisable+0x6e>
	{
		case TOIE1	:	CLR_BIT( TIMSK , TOIE1_BIT);
    3c82:	a9 e5       	ldi	r26, 0x59	; 89
    3c84:	b0 e0       	ldi	r27, 0x00	; 0
    3c86:	e9 e5       	ldi	r30, 0x59	; 89
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	80 81       	ld	r24, Z
    3c8c:	8b 7f       	andi	r24, 0xFB	; 251
    3c8e:	8c 93       	st	X, r24
    3c90:	12 c0       	rjmp	.+36     	; 0x3cb6 <PWM_enuInterruptDisable+0x72>
						break;
		case OCIE1B	:	CLR_BIT( TIMSK , OCIE1B_BIT);
    3c92:	a9 e5       	ldi	r26, 0x59	; 89
    3c94:	b0 e0       	ldi	r27, 0x00	; 0
    3c96:	e9 e5       	ldi	r30, 0x59	; 89
    3c98:	f0 e0       	ldi	r31, 0x00	; 0
    3c9a:	80 81       	ld	r24, Z
    3c9c:	87 7f       	andi	r24, 0xF7	; 247
    3c9e:	8c 93       	st	X, r24
    3ca0:	0a c0       	rjmp	.+20     	; 0x3cb6 <PWM_enuInterruptDisable+0x72>
						break;
		case OCIE1A	:	CLR_BIT( TIMSK , OCIE1A_BIT);
    3ca2:	a9 e5       	ldi	r26, 0x59	; 89
    3ca4:	b0 e0       	ldi	r27, 0x00	; 0
    3ca6:	e9 e5       	ldi	r30, 0x59	; 89
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	80 81       	ld	r24, Z
    3cac:	8f 7e       	andi	r24, 0xEF	; 239
    3cae:	8c 93       	st	X, r24
    3cb0:	02 c0       	rjmp	.+4      	; 0x3cb6 <PWM_enuInterruptDisable+0x72>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    3cb2:	82 e0       	ldi	r24, 0x02	; 2
    3cb4:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}

	_SEI_;																// Re-Enable Global Interrupt
    3cb6:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	81 30       	cpi	r24, 0x01	; 1
    3cbc:	19 f0       	breq	.+6      	; 0x3cc4 <PWM_enuInterruptDisable+0x80>
    3cbe:	99 81       	ldd	r25, Y+1	; 0x01
    3cc0:	9b 83       	std	Y+3, r25	; 0x03
    3cc2:	01 c0       	rjmp	.+2      	; 0x3cc6 <PWM_enuInterruptDisable+0x82>
    3cc4:	1b 82       	std	Y+3, r1	; 0x03
    3cc6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	cf 91       	pop	r28
    3cd4:	df 91       	pop	r29
    3cd6:	08 95       	ret

00003cd8 <PWM_enuCallBack>:
	return ( ( Local_u8Status )? TRUE : FALSE ) ;
}
#endif

ES_t PWM_enuCallBack( u8 Copy_u8TimerIntName , void (*Copy_pAppFun)(void) )
{
    3cd8:	df 93       	push	r29
    3cda:	cf 93       	push	r28
    3cdc:	00 d0       	rcall	.+0      	; 0x3cde <PWM_enuCallBack+0x6>
    3cde:	00 d0       	rcall	.+0      	; 0x3ce0 <PWM_enuCallBack+0x8>
    3ce0:	00 d0       	rcall	.+0      	; 0x3ce2 <PWM_enuCallBack+0xa>
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	8c 83       	std	Y+4, r24	; 0x04
    3ce8:	7e 83       	std	Y+6, r23	; 0x06
    3cea:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	8b 83       	std	Y+3, r24	; 0x03

	u8 found = 0 ;
    3cf0:	1a 82       	std	Y+2, r1	; 0x02

	if( Copy_pAppFun != NULL )
    3cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cf6:	00 97       	sbiw	r24, 0x00	; 0
    3cf8:	79 f1       	breq	.+94     	; 0x3d58 <PWM_enuCallBack+0x80>
    3cfa:	25 c0       	rjmp	.+74     	; 0x3d46 <PWM_enuCallBack+0x6e>
	{
		for( u8 Local_u8Iter; Local_u8Iter < PWM_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrPWM_Pointers[Local_u8Iter].InterruptName == Copy_u8TimerIntName )
    3cfc:	89 81       	ldd	r24, Y+1	; 0x01
    3cfe:	28 2f       	mov	r18, r24
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	c9 01       	movw	r24, r18
    3d04:	88 0f       	add	r24, r24
    3d06:	99 1f       	adc	r25, r25
    3d08:	82 0f       	add	r24, r18
    3d0a:	93 1f       	adc	r25, r19
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	e2 57       	subi	r30, 0x72	; 114
    3d10:	fe 4f       	sbci	r31, 0xFE	; 254
    3d12:	90 81       	ld	r25, Z
    3d14:	8c 81       	ldd	r24, Y+4	; 0x04
    3d16:	98 17       	cp	r25, r24
    3d18:	99 f4       	brne	.+38     	; 0x3d40 <PWM_enuCallBack+0x68>
			{
				Global_AstrPWM_Pointers[Local_u8Iter].ptrFun = Copy_pAppFun;
    3d1a:	89 81       	ldd	r24, Y+1	; 0x01
    3d1c:	28 2f       	mov	r18, r24
    3d1e:	30 e0       	ldi	r19, 0x00	; 0
    3d20:	c9 01       	movw	r24, r18
    3d22:	88 0f       	add	r24, r24
    3d24:	99 1f       	adc	r25, r25
    3d26:	82 0f       	add	r24, r18
    3d28:	93 1f       	adc	r25, r19
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	e1 57       	subi	r30, 0x71	; 113
    3d2e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d30:	8d 81       	ldd	r24, Y+5	; 0x05
    3d32:	9e 81       	ldd	r25, Y+6	; 0x06
    3d34:	91 83       	std	Z+1, r25	; 0x01
    3d36:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK ;
    3d38:	1b 82       	std	Y+3, r1	; 0x03
				found = 1;
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	8a 83       	std	Y+2, r24	; 0x02
    3d3e:	06 c0       	rjmp	.+12     	; 0x3d4c <PWM_enuCallBack+0x74>

	u8 found = 0 ;

	if( Copy_pAppFun != NULL )
	{
		for( u8 Local_u8Iter; Local_u8Iter < PWM_INTERRUPTS ; Local_u8Iter++ )
    3d40:	89 81       	ldd	r24, Y+1	; 0x01
    3d42:	8f 5f       	subi	r24, 0xFF	; 255
    3d44:	89 83       	std	Y+1, r24	; 0x01
    3d46:	89 81       	ldd	r24, Y+1	; 0x01
    3d48:	83 30       	cpi	r24, 0x03	; 3
    3d4a:	c0 f2       	brcs	.-80     	; 0x3cfc <PWM_enuCallBack+0x24>
				Local_enuErrorState = ES_OK ;
				found = 1;
				break;
			}
		}
		if(!found) Local_enuErrorState = ES_OUT_RANGE ;
    3d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4e:	88 23       	and	r24, r24
    3d50:	29 f4       	brne	.+10     	; 0x3d5c <PWM_enuCallBack+0x84>
    3d52:	82 e0       	ldi	r24, 0x02	; 2
    3d54:	8b 83       	std	Y+3, r24	; 0x03
    3d56:	02 c0       	rjmp	.+4      	; 0x3d5c <PWM_enuCallBack+0x84>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    3d58:	83 e0       	ldi	r24, 0x03	; 3
    3d5a:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    3d5c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3d5e:	26 96       	adiw	r28, 0x06	; 6
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	cf 91       	pop	r28
    3d6c:	df 91       	pop	r29
    3d6e:	08 95       	ret

00003d70 <__vector_7>:
void __vector_8( void )__attribute__((signal));		/*	Timer1	Compare Match B Interrupt ISR	*/
void __vector_9( void )__attribute__((signal));		/*	Timer1	Overflow Interrupt	ISR			*/


void __vector_7( void )/*	OCIE1A	*/
{
    3d70:	1f 92       	push	r1
    3d72:	0f 92       	push	r0
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	0f 92       	push	r0
    3d78:	11 24       	eor	r1, r1
    3d7a:	2f 93       	push	r18
    3d7c:	3f 93       	push	r19
    3d7e:	4f 93       	push	r20
    3d80:	5f 93       	push	r21
    3d82:	6f 93       	push	r22
    3d84:	7f 93       	push	r23
    3d86:	8f 93       	push	r24
    3d88:	9f 93       	push	r25
    3d8a:	af 93       	push	r26
    3d8c:	bf 93       	push	r27
    3d8e:	ef 93       	push	r30
    3d90:	ff 93       	push	r31
    3d92:	df 93       	push	r29
    3d94:	cf 93       	push	r28
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[2].ptrFun != NULL )
    3d9a:	80 91 95 01 	lds	r24, 0x0195
    3d9e:	90 91 96 01 	lds	r25, 0x0196
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	29 f0       	breq	.+10     	; 0x3db0 <__vector_7+0x40>
	{
		(*Global_AstrPWM_Pointers[2].ptrFun)( );
    3da6:	e0 91 95 01 	lds	r30, 0x0195
    3daa:	f0 91 96 01 	lds	r31, 0x0196
    3dae:	09 95       	icall
	}
}
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	ff 91       	pop	r31
    3db6:	ef 91       	pop	r30
    3db8:	bf 91       	pop	r27
    3dba:	af 91       	pop	r26
    3dbc:	9f 91       	pop	r25
    3dbe:	8f 91       	pop	r24
    3dc0:	7f 91       	pop	r23
    3dc2:	6f 91       	pop	r22
    3dc4:	5f 91       	pop	r21
    3dc6:	4f 91       	pop	r20
    3dc8:	3f 91       	pop	r19
    3dca:	2f 91       	pop	r18
    3dcc:	0f 90       	pop	r0
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	0f 90       	pop	r0
    3dd2:	1f 90       	pop	r1
    3dd4:	18 95       	reti

00003dd6 <__vector_8>:
void __vector_8( void )/*	OCIE1B	*/
{
    3dd6:	1f 92       	push	r1
    3dd8:	0f 92       	push	r0
    3dda:	0f b6       	in	r0, 0x3f	; 63
    3ddc:	0f 92       	push	r0
    3dde:	11 24       	eor	r1, r1
    3de0:	2f 93       	push	r18
    3de2:	3f 93       	push	r19
    3de4:	4f 93       	push	r20
    3de6:	5f 93       	push	r21
    3de8:	6f 93       	push	r22
    3dea:	7f 93       	push	r23
    3dec:	8f 93       	push	r24
    3dee:	9f 93       	push	r25
    3df0:	af 93       	push	r26
    3df2:	bf 93       	push	r27
    3df4:	ef 93       	push	r30
    3df6:	ff 93       	push	r31
    3df8:	df 93       	push	r29
    3dfa:	cf 93       	push	r28
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[1].ptrFun != NULL )
    3e00:	80 91 92 01 	lds	r24, 0x0192
    3e04:	90 91 93 01 	lds	r25, 0x0193
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	29 f0       	breq	.+10     	; 0x3e16 <__vector_8+0x40>
	{
		(*Global_AstrPWM_Pointers[1].ptrFun)( );
    3e0c:	e0 91 92 01 	lds	r30, 0x0192
    3e10:	f0 91 93 01 	lds	r31, 0x0193
    3e14:	09 95       	icall
	}
}
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	ff 91       	pop	r31
    3e1c:	ef 91       	pop	r30
    3e1e:	bf 91       	pop	r27
    3e20:	af 91       	pop	r26
    3e22:	9f 91       	pop	r25
    3e24:	8f 91       	pop	r24
    3e26:	7f 91       	pop	r23
    3e28:	6f 91       	pop	r22
    3e2a:	5f 91       	pop	r21
    3e2c:	4f 91       	pop	r20
    3e2e:	3f 91       	pop	r19
    3e30:	2f 91       	pop	r18
    3e32:	0f 90       	pop	r0
    3e34:	0f be       	out	0x3f, r0	; 63
    3e36:	0f 90       	pop	r0
    3e38:	1f 90       	pop	r1
    3e3a:	18 95       	reti

00003e3c <__vector_9>:
void __vector_9( void )/*	TOIE1	*/
{
    3e3c:	1f 92       	push	r1
    3e3e:	0f 92       	push	r0
    3e40:	0f b6       	in	r0, 0x3f	; 63
    3e42:	0f 92       	push	r0
    3e44:	11 24       	eor	r1, r1
    3e46:	2f 93       	push	r18
    3e48:	3f 93       	push	r19
    3e4a:	4f 93       	push	r20
    3e4c:	5f 93       	push	r21
    3e4e:	6f 93       	push	r22
    3e50:	7f 93       	push	r23
    3e52:	8f 93       	push	r24
    3e54:	9f 93       	push	r25
    3e56:	af 93       	push	r26
    3e58:	bf 93       	push	r27
    3e5a:	ef 93       	push	r30
    3e5c:	ff 93       	push	r31
    3e5e:	df 93       	push	r29
    3e60:	cf 93       	push	r28
    3e62:	cd b7       	in	r28, 0x3d	; 61
    3e64:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[0].ptrFun != NULL )
    3e66:	80 91 8f 01 	lds	r24, 0x018F
    3e6a:	90 91 90 01 	lds	r25, 0x0190
    3e6e:	00 97       	sbiw	r24, 0x00	; 0
    3e70:	29 f0       	breq	.+10     	; 0x3e7c <__vector_9+0x40>
	{
		(*Global_AstrPWM_Pointers[0].ptrFun)( );
    3e72:	e0 91 8f 01 	lds	r30, 0x018F
    3e76:	f0 91 90 01 	lds	r31, 0x0190
    3e7a:	09 95       	icall
	}
}
    3e7c:	cf 91       	pop	r28
    3e7e:	df 91       	pop	r29
    3e80:	ff 91       	pop	r31
    3e82:	ef 91       	pop	r30
    3e84:	bf 91       	pop	r27
    3e86:	af 91       	pop	r26
    3e88:	9f 91       	pop	r25
    3e8a:	8f 91       	pop	r24
    3e8c:	7f 91       	pop	r23
    3e8e:	6f 91       	pop	r22
    3e90:	5f 91       	pop	r21
    3e92:	4f 91       	pop	r20
    3e94:	3f 91       	pop	r19
    3e96:	2f 91       	pop	r18
    3e98:	0f 90       	pop	r0
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	0f 90       	pop	r0
    3e9e:	1f 90       	pop	r1
    3ea0:	18 95       	reti

00003ea2 <EXTI_enuInit>:

extern 	EXTI_t EXTI_AstrEXTI_Config[] ;


ES_t EXTI_enuInit(void)
{
    3ea2:	df 93       	push	r29
    3ea4:	cf 93       	push	r28
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	2e 97       	sbiw	r28, 0x0e	; 14
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	f8 94       	cli
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	0f be       	out	0x3f, r0	; 63
    3eb4:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    3eb6:	81 e0       	ldi	r24, 0x01	; 1
    3eb8:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    3eba:	19 82       	std	Y+1, r1	; 0x01
    3ebc:	93 c1       	rjmp	.+806    	; 0x41e4 <EXTI_enuInit+0x342>
	{
		if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT0 )						/********************************************************************/
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	28 2f       	mov	r18, r24
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	c9 01       	movw	r24, r18
    3ec6:	88 0f       	add	r24, r24
    3ec8:	99 1f       	adc	r25, r25
    3eca:	82 0f       	add	r24, r18
    3ecc:	93 1f       	adc	r25, r19
    3ece:	fc 01       	movw	r30, r24
    3ed0:	e8 56       	subi	r30, 0x68	; 104
    3ed2:	fe 4f       	sbci	r31, 0xFE	; 254
    3ed4:	80 81       	ld	r24, Z
    3ed6:	8d 33       	cpi	r24, 0x3D	; 61
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <EXTI_enuInit+0x3a>
    3eda:	82 c0       	rjmp	.+260    	; 0x3fe0 <EXTI_enuInit+0x13e>
		{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	_TWO_BITS_MASK_	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    3edc:	a5 e5       	ldi	r26, 0x55	; 85
    3ede:	b0 e0       	ldi	r27, 0x00	; 0
    3ee0:	e5 e5       	ldi	r30, 0x55	; 85
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	80 81       	ld	r24, Z
    3ee6:	8c 7f       	andi	r24, 0xFC	; 252
    3ee8:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	28 2f       	mov	r18, r24
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	c9 01       	movw	r24, r18
    3ef2:	88 0f       	add	r24, r24
    3ef4:	99 1f       	adc	r25, r25
    3ef6:	82 0f       	add	r24, r18
    3ef8:	93 1f       	adc	r25, r19
    3efa:	fc 01       	movw	r30, r24
    3efc:	e7 56       	subi	r30, 0x67	; 103
    3efe:	fe 4f       	sbci	r31, 0xFE	; 254
    3f00:	80 81       	ld	r24, Z
    3f02:	28 2f       	mov	r18, r24
    3f04:	30 e0       	ldi	r19, 0x00	; 0
    3f06:	3e 87       	std	Y+14, r19	; 0x0e
    3f08:	2d 87       	std	Y+13, r18	; 0x0d
    3f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f0e:	88 33       	cpi	r24, 0x38	; 56
    3f10:	91 05       	cpc	r25, r1
    3f12:	b1 f0       	breq	.+44     	; 0x3f40 <EXTI_enuInit+0x9e>
    3f14:	2d 85       	ldd	r18, Y+13	; 0x0d
    3f16:	3e 85       	ldd	r19, Y+14	; 0x0e
    3f18:	29 33       	cpi	r18, 0x39	; 57
    3f1a:	31 05       	cpc	r19, r1
    3f1c:	34 f4       	brge	.+12     	; 0x3f2a <EXTI_enuInit+0x88>
    3f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f22:	87 33       	cpi	r24, 0x37	; 55
    3f24:	91 05       	cpc	r25, r1
    3f26:	31 f1       	breq	.+76     	; 0x3f74 <EXTI_enuInit+0xd2>
    3f28:	23 c0       	rjmp	.+70     	; 0x3f70 <EXTI_enuInit+0xce>
    3f2a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3f2c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3f2e:	29 33       	cpi	r18, 0x39	; 57
    3f30:	31 05       	cpc	r19, r1
    3f32:	71 f0       	breq	.+28     	; 0x3f50 <EXTI_enuInit+0xae>
    3f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f38:	8a 33       	cpi	r24, 0x3A	; 58
    3f3a:	91 05       	cpc	r25, r1
    3f3c:	89 f0       	breq	.+34     	; 0x3f60 <EXTI_enuInit+0xbe>
    3f3e:	18 c0       	rjmp	.+48     	; 0x3f70 <EXTI_enuInit+0xce>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	SET_BIT( MCUCR , ISC00_BIT );				/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    3f40:	a5 e5       	ldi	r26, 0x55	; 85
    3f42:	b0 e0       	ldi	r27, 0x00	; 0
    3f44:	e5 e5       	ldi	r30, 0x55	; 85
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	81 60       	ori	r24, 0x01	; 1
    3f4c:	8c 93       	st	X, r24
    3f4e:	12 c0       	rjmp	.+36     	; 0x3f74 <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	FALLING_EDGE:	SET_BIT( MCUCR , ISC01_BIT );				/*		Setting them to '10' for Falling Edge Sense Choice			*/
    3f50:	a5 e5       	ldi	r26, 0x55	; 85
    3f52:	b0 e0       	ldi	r27, 0x00	; 0
    3f54:	e5 e5       	ldi	r30, 0x55	; 85
    3f56:	f0 e0       	ldi	r31, 0x00	; 0
    3f58:	80 81       	ld	r24, Z
    3f5a:	82 60       	ori	r24, 0x02	; 2
    3f5c:	8c 93       	st	X, r24
    3f5e:	0a c0       	rjmp	.+20     	; 0x3f74 <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= ( _TWO_BITS_MASK_	<<	ISC00_BIT );/*		Setting them to '11' for Rising Edge Sense Choice			*/
    3f60:	a5 e5       	ldi	r26, 0x55	; 85
    3f62:	b0 e0       	ldi	r27, 0x00	; 0
    3f64:	e5 e5       	ldi	r30, 0x55	; 85
    3f66:	f0 e0       	ldi	r31, 0x00	; 0
    3f68:	80 81       	ld	r24, Z
    3f6a:	83 60       	ori	r24, 0x03	; 3
    3f6c:	8c 93       	st	X, r24
    3f6e:	02 c0       	rjmp	.+4      	; 0x3f74 <EXTI_enuInit+0xd2>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    3f70:	82 e0       	ldi	r24, 0x02	; 2
    3f72:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	82 30       	cpi	r24, 0x02	; 2
    3f78:	09 f4       	brne	.+2      	; 0x3f7c <EXTI_enuInit+0xda>
    3f7a:	3a c1       	rjmp	.+628    	; 0x41f0 <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT0	mode		*/
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	28 2f       	mov	r18, r24
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	c9 01       	movw	r24, r18
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	82 0f       	add	r24, r18
    3f8a:	93 1f       	adc	r25, r19
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	e6 56       	subi	r30, 0x66	; 102
    3f90:	fe 4f       	sbci	r31, 0xFE	; 254
    3f92:	80 81       	ld	r24, Z
    3f94:	28 2f       	mov	r18, r24
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	3c 87       	std	Y+12, r19	; 0x0c
    3f9a:	2b 87       	std	Y+11, r18	; 0x0b
    3f9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fa0:	8b 33       	cpi	r24, 0x3B	; 59
    3fa2:	91 05       	cpc	r25, r1
    3fa4:	31 f0       	breq	.+12     	; 0x3fb2 <EXTI_enuInit+0x110>
    3fa6:	2b 85       	ldd	r18, Y+11	; 0x0b
    3fa8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3faa:	2c 33       	cpi	r18, 0x3C	; 60
    3fac:	31 05       	cpc	r19, r1
    3fae:	49 f0       	breq	.+18     	; 0x3fc2 <EXTI_enuInit+0x120>
    3fb0:	10 c0       	rjmp	.+32     	; 0x3fd2 <EXTI_enuInit+0x130>
			{																		/************************************/
				case	INTERRUPT	:	SET_BIT( GICR ,	PIE0_BIT );					/*			ENABLE INTERRUPT		*/
    3fb2:	ab e5       	ldi	r26, 0x5B	; 91
    3fb4:	b0 e0       	ldi	r27, 0x00	; 0
    3fb6:	eb e5       	ldi	r30, 0x5B	; 91
    3fb8:	f0 e0       	ldi	r31, 0x00	; 0
    3fba:	80 81       	ld	r24, Z
    3fbc:	80 64       	ori	r24, 0x40	; 64
    3fbe:	8c 93       	st	X, r24
    3fc0:	0a c0       	rjmp	.+20     	; 0x3fd6 <EXTI_enuInit+0x134>
										break;										/*									*/
				case	POLLING		:	CLR_BIT( GICR ,	PIE0_BIT );					/*			DISABLE INTERRUPT		*/
    3fc2:	ab e5       	ldi	r26, 0x5B	; 91
    3fc4:	b0 e0       	ldi	r27, 0x00	; 0
    3fc6:	eb e5       	ldi	r30, 0x5B	; 91
    3fc8:	f0 e0       	ldi	r31, 0x00	; 0
    3fca:	80 81       	ld	r24, Z
    3fcc:	8f 7b       	andi	r24, 0xBF	; 191
    3fce:	8c 93       	st	X, r24
    3fd0:	02 c0       	rjmp	.+4      	; 0x3fd6 <EXTI_enuInit+0x134>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    3fd2:	82 e0       	ldi	r24, 0x02	; 2
    3fd4:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	82 30       	cpi	r24, 0x02	; 2
    3fda:	09 f4       	brne	.+2      	; 0x3fde <EXTI_enuInit+0x13c>
    3fdc:	09 c1       	rjmp	.+530    	; 0x41f0 <EXTI_enuInit+0x34e>
    3fde:	ff c0       	rjmp	.+510    	; 0x41de <EXTI_enuInit+0x33c>
		}

		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT1 )				/********************************************************************/
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	28 2f       	mov	r18, r24
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	c9 01       	movw	r24, r18
    3fe8:	88 0f       	add	r24, r24
    3fea:	99 1f       	adc	r25, r25
    3fec:	82 0f       	add	r24, r18
    3fee:	93 1f       	adc	r25, r19
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	e8 56       	subi	r30, 0x68	; 104
    3ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ff6:	80 81       	ld	r24, Z
    3ff8:	8e 33       	cpi	r24, 0x3E	; 62
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <EXTI_enuInit+0x15c>
    3ffc:	7e c0       	rjmp	.+252    	; 0x40fa <EXTI_enuInit+0x258>
		{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	_TWO_BITS_MASK_	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    3ffe:	a5 e5       	ldi	r26, 0x55	; 85
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	e5 e5       	ldi	r30, 0x55	; 85
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	83 7f       	andi	r24, 0xF3	; 243
    400a:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
    400c:	89 81       	ldd	r24, Y+1	; 0x01
    400e:	28 2f       	mov	r18, r24
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	c9 01       	movw	r24, r18
    4014:	88 0f       	add	r24, r24
    4016:	99 1f       	adc	r25, r25
    4018:	82 0f       	add	r24, r18
    401a:	93 1f       	adc	r25, r19
    401c:	fc 01       	movw	r30, r24
    401e:	e7 56       	subi	r30, 0x67	; 103
    4020:	fe 4f       	sbci	r31, 0xFE	; 254
    4022:	80 81       	ld	r24, Z
    4024:	28 2f       	mov	r18, r24
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	3a 87       	std	Y+10, r19	; 0x0a
    402a:	29 87       	std	Y+9, r18	; 0x09
    402c:	89 85       	ldd	r24, Y+9	; 0x09
    402e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4030:	88 33       	cpi	r24, 0x38	; 56
    4032:	91 05       	cpc	r25, r1
    4034:	b1 f0       	breq	.+44     	; 0x4062 <EXTI_enuInit+0x1c0>
    4036:	29 85       	ldd	r18, Y+9	; 0x09
    4038:	3a 85       	ldd	r19, Y+10	; 0x0a
    403a:	29 33       	cpi	r18, 0x39	; 57
    403c:	31 05       	cpc	r19, r1
    403e:	34 f4       	brge	.+12     	; 0x404c <EXTI_enuInit+0x1aa>
    4040:	89 85       	ldd	r24, Y+9	; 0x09
    4042:	9a 85       	ldd	r25, Y+10	; 0x0a
    4044:	87 33       	cpi	r24, 0x37	; 55
    4046:	91 05       	cpc	r25, r1
    4048:	31 f1       	breq	.+76     	; 0x4096 <EXTI_enuInit+0x1f4>
    404a:	23 c0       	rjmp	.+70     	; 0x4092 <EXTI_enuInit+0x1f0>
    404c:	29 85       	ldd	r18, Y+9	; 0x09
    404e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4050:	29 33       	cpi	r18, 0x39	; 57
    4052:	31 05       	cpc	r19, r1
    4054:	71 f0       	breq	.+28     	; 0x4072 <EXTI_enuInit+0x1d0>
    4056:	89 85       	ldd	r24, Y+9	; 0x09
    4058:	9a 85       	ldd	r25, Y+10	; 0x0a
    405a:	8a 33       	cpi	r24, 0x3A	; 58
    405c:	91 05       	cpc	r25, r1
    405e:	89 f0       	breq	.+34     	; 0x4082 <EXTI_enuInit+0x1e0>
    4060:	18 c0       	rjmp	.+48     	; 0x4092 <EXTI_enuInit+0x1f0>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	SET_BIT( MCUCR , ISC10_BIT );				/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    4062:	a5 e5       	ldi	r26, 0x55	; 85
    4064:	b0 e0       	ldi	r27, 0x00	; 0
    4066:	e5 e5       	ldi	r30, 0x55	; 85
    4068:	f0 e0       	ldi	r31, 0x00	; 0
    406a:	80 81       	ld	r24, Z
    406c:	84 60       	ori	r24, 0x04	; 4
    406e:	8c 93       	st	X, r24
    4070:	12 c0       	rjmp	.+36     	; 0x4096 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	FALLING_EDGE:	SET_BIT( MCUCR , ISC11_BIT );				/*		Setting them to '10' for Falling Edge Sense Choice			*/
    4072:	a5 e5       	ldi	r26, 0x55	; 85
    4074:	b0 e0       	ldi	r27, 0x00	; 0
    4076:	e5 e5       	ldi	r30, 0x55	; 85
    4078:	f0 e0       	ldi	r31, 0x00	; 0
    407a:	80 81       	ld	r24, Z
    407c:	88 60       	ori	r24, 0x08	; 8
    407e:	8c 93       	st	X, r24
    4080:	0a c0       	rjmp	.+20     	; 0x4096 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= ( _TWO_BITS_MASK_	<<	ISC10_BIT );/*		Setting them to '11' for Rising Edge Sense Choice			*/
    4082:	a5 e5       	ldi	r26, 0x55	; 85
    4084:	b0 e0       	ldi	r27, 0x00	; 0
    4086:	e5 e5       	ldi	r30, 0x55	; 85
    4088:	f0 e0       	ldi	r31, 0x00	; 0
    408a:	80 81       	ld	r24, Z
    408c:	8c 60       	ori	r24, 0x0C	; 12
    408e:	8c 93       	st	X, r24
    4090:	02 c0       	rjmp	.+4      	; 0x4096 <EXTI_enuInit+0x1f4>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    4092:	82 e0       	ldi	r24, 0x02	; 2
    4094:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    4096:	8a 81       	ldd	r24, Y+2	; 0x02
    4098:	82 30       	cpi	r24, 0x02	; 2
    409a:	09 f4       	brne	.+2      	; 0x409e <EXTI_enuInit+0x1fc>
    409c:	a9 c0       	rjmp	.+338    	; 0x41f0 <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT1	mode		*/
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	28 2f       	mov	r18, r24
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	c9 01       	movw	r24, r18
    40a6:	88 0f       	add	r24, r24
    40a8:	99 1f       	adc	r25, r25
    40aa:	82 0f       	add	r24, r18
    40ac:	93 1f       	adc	r25, r19
    40ae:	fc 01       	movw	r30, r24
    40b0:	e6 56       	subi	r30, 0x66	; 102
    40b2:	fe 4f       	sbci	r31, 0xFE	; 254
    40b4:	80 81       	ld	r24, Z
    40b6:	28 2f       	mov	r18, r24
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	38 87       	std	Y+8, r19	; 0x08
    40bc:	2f 83       	std	Y+7, r18	; 0x07
    40be:	8f 81       	ldd	r24, Y+7	; 0x07
    40c0:	98 85       	ldd	r25, Y+8	; 0x08
    40c2:	8b 33       	cpi	r24, 0x3B	; 59
    40c4:	91 05       	cpc	r25, r1
    40c6:	31 f0       	breq	.+12     	; 0x40d4 <EXTI_enuInit+0x232>
    40c8:	2f 81       	ldd	r18, Y+7	; 0x07
    40ca:	38 85       	ldd	r19, Y+8	; 0x08
    40cc:	2c 33       	cpi	r18, 0x3C	; 60
    40ce:	31 05       	cpc	r19, r1
    40d0:	49 f0       	breq	.+18     	; 0x40e4 <EXTI_enuInit+0x242>
    40d2:	10 c0       	rjmp	.+32     	; 0x40f4 <EXTI_enuInit+0x252>
			{																		/************************************/
				case	INTERRUPT	:	SET_BIT( GICR ,	PIE1_BIT );					/*			ENABLE INTERRUPT		*/
    40d4:	ab e5       	ldi	r26, 0x5B	; 91
    40d6:	b0 e0       	ldi	r27, 0x00	; 0
    40d8:	eb e5       	ldi	r30, 0x5B	; 91
    40da:	f0 e0       	ldi	r31, 0x00	; 0
    40dc:	80 81       	ld	r24, Z
    40de:	80 68       	ori	r24, 0x80	; 128
    40e0:	8c 93       	st	X, r24
    40e2:	7d c0       	rjmp	.+250    	; 0x41de <EXTI_enuInit+0x33c>
										break;										/*									*/
				case	POLLING		:	CLR_BIT( GICR ,	PIE1_BIT );					/*			DISABLE INTERRUPT		*/
    40e4:	ab e5       	ldi	r26, 0x5B	; 91
    40e6:	b0 e0       	ldi	r27, 0x00	; 0
    40e8:	eb e5       	ldi	r30, 0x5B	; 91
    40ea:	f0 e0       	ldi	r31, 0x00	; 0
    40ec:	80 81       	ld	r24, Z
    40ee:	8f 77       	andi	r24, 0x7F	; 127
    40f0:	8c 93       	st	X, r24
    40f2:	75 c0       	rjmp	.+234    	; 0x41de <EXTI_enuInit+0x33c>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    40f4:	82 e0       	ldi	r24, 0x02	; 2
    40f6:	8a 83       	std	Y+2, r24	; 0x02
    40f8:	72 c0       	rjmp	.+228    	; 0x41de <EXTI_enuInit+0x33c>
			}
		}
		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT2 )				/********************************************************************/
    40fa:	89 81       	ldd	r24, Y+1	; 0x01
    40fc:	28 2f       	mov	r18, r24
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	c9 01       	movw	r24, r18
    4102:	88 0f       	add	r24, r24
    4104:	99 1f       	adc	r25, r25
    4106:	82 0f       	add	r24, r18
    4108:	93 1f       	adc	r25, r19
    410a:	fc 01       	movw	r30, r24
    410c:	e8 56       	subi	r30, 0x68	; 104
    410e:	fe 4f       	sbci	r31, 0xFE	; 254
    4110:	80 81       	ld	r24, Z
    4112:	8f 33       	cpi	r24, 0x3F	; 63
    4114:	09 f0       	breq	.+2      	; 0x4118 <EXTI_enuInit+0x276>
    4116:	61 c0       	rjmp	.+194    	; 0x41da <EXTI_enuInit+0x338>
		{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/********************************************************************/
    4118:	89 81       	ldd	r24, Y+1	; 0x01
    411a:	28 2f       	mov	r18, r24
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	c9 01       	movw	r24, r18
    4120:	88 0f       	add	r24, r24
    4122:	99 1f       	adc	r25, r25
    4124:	82 0f       	add	r24, r18
    4126:	93 1f       	adc	r25, r19
    4128:	fc 01       	movw	r30, r24
    412a:	e7 56       	subi	r30, 0x67	; 103
    412c:	fe 4f       	sbci	r31, 0xFE	; 254
    412e:	80 81       	ld	r24, Z
    4130:	28 2f       	mov	r18, r24
    4132:	30 e0       	ldi	r19, 0x00	; 0
    4134:	3e 83       	std	Y+6, r19	; 0x06
    4136:	2d 83       	std	Y+5, r18	; 0x05
    4138:	8d 81       	ldd	r24, Y+5	; 0x05
    413a:	9e 81       	ldd	r25, Y+6	; 0x06
    413c:	89 33       	cpi	r24, 0x39	; 57
    413e:	91 05       	cpc	r25, r1
    4140:	31 f0       	breq	.+12     	; 0x414e <EXTI_enuInit+0x2ac>
    4142:	2d 81       	ldd	r18, Y+5	; 0x05
    4144:	3e 81       	ldd	r19, Y+6	; 0x06
    4146:	2a 33       	cpi	r18, 0x3A	; 58
    4148:	31 05       	cpc	r19, r1
    414a:	49 f0       	breq	.+18     	; 0x415e <EXTI_enuInit+0x2bc>
    414c:	10 c0       	rjmp	.+32     	; 0x416e <EXTI_enuInit+0x2cc>
			{																		/*																	*/
				case	FALLING_EDGE:	CLR_BIT( MCUCSR , ISC2_BIT );				/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    414e:	a4 e5       	ldi	r26, 0x54	; 84
    4150:	b0 e0       	ldi	r27, 0x00	; 0
    4152:	e4 e5       	ldi	r30, 0x54	; 84
    4154:	f0 e0       	ldi	r31, 0x00	; 0
    4156:	80 81       	ld	r24, Z
    4158:	8f 7b       	andi	r24, 0xBF	; 191
    415a:	8c 93       	st	X, r24
    415c:	0a c0       	rjmp	.+20     	; 0x4172 <EXTI_enuInit+0x2d0>
										break;										/*																	*/
				case	RISING_EDGE	:	SET_BIT( MCUCSR , ISC2_BIT );				/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    415e:	a4 e5       	ldi	r26, 0x54	; 84
    4160:	b0 e0       	ldi	r27, 0x00	; 0
    4162:	e4 e5       	ldi	r30, 0x54	; 84
    4164:	f0 e0       	ldi	r31, 0x00	; 0
    4166:	80 81       	ld	r24, Z
    4168:	80 64       	ori	r24, 0x40	; 64
    416a:	8c 93       	st	X, r24
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <EXTI_enuInit+0x2d0>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    416e:	82 e0       	ldi	r24, 0x02	; 2
    4170:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    4172:	8a 81       	ldd	r24, Y+2	; 0x02
    4174:	82 30       	cpi	r24, 0x02	; 2
    4176:	e1 f1       	breq	.+120    	; 0x41f0 <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT2	mode		*/
    4178:	89 81       	ldd	r24, Y+1	; 0x01
    417a:	28 2f       	mov	r18, r24
    417c:	30 e0       	ldi	r19, 0x00	; 0
    417e:	c9 01       	movw	r24, r18
    4180:	88 0f       	add	r24, r24
    4182:	99 1f       	adc	r25, r25
    4184:	82 0f       	add	r24, r18
    4186:	93 1f       	adc	r25, r19
    4188:	fc 01       	movw	r30, r24
    418a:	e6 56       	subi	r30, 0x66	; 102
    418c:	fe 4f       	sbci	r31, 0xFE	; 254
    418e:	80 81       	ld	r24, Z
    4190:	28 2f       	mov	r18, r24
    4192:	30 e0       	ldi	r19, 0x00	; 0
    4194:	3c 83       	std	Y+4, r19	; 0x04
    4196:	2b 83       	std	Y+3, r18	; 0x03
    4198:	8b 81       	ldd	r24, Y+3	; 0x03
    419a:	9c 81       	ldd	r25, Y+4	; 0x04
    419c:	8b 33       	cpi	r24, 0x3B	; 59
    419e:	91 05       	cpc	r25, r1
    41a0:	31 f0       	breq	.+12     	; 0x41ae <EXTI_enuInit+0x30c>
    41a2:	2b 81       	ldd	r18, Y+3	; 0x03
    41a4:	3c 81       	ldd	r19, Y+4	; 0x04
    41a6:	2c 33       	cpi	r18, 0x3C	; 60
    41a8:	31 05       	cpc	r19, r1
    41aa:	49 f0       	breq	.+18     	; 0x41be <EXTI_enuInit+0x31c>
    41ac:	10 c0       	rjmp	.+32     	; 0x41ce <EXTI_enuInit+0x32c>
			{																		/************************************/
				case	INTERRUPT	:	SET_BIT( GICR , PIE2_BIT );					/*			ENABLE INTERRUPT		*/
    41ae:	ab e5       	ldi	r26, 0x5B	; 91
    41b0:	b0 e0       	ldi	r27, 0x00	; 0
    41b2:	eb e5       	ldi	r30, 0x5B	; 91
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	80 81       	ld	r24, Z
    41b8:	80 62       	ori	r24, 0x20	; 32
    41ba:	8c 93       	st	X, r24
    41bc:	0a c0       	rjmp	.+20     	; 0x41d2 <EXTI_enuInit+0x330>
										break;										/*									*/
				case	POLLING		:	CLR_BIT( GICR , PIE2_BIT);					/*			DISABLE INTERRUPT		*/
    41be:	ab e5       	ldi	r26, 0x5B	; 91
    41c0:	b0 e0       	ldi	r27, 0x00	; 0
    41c2:	eb e5       	ldi	r30, 0x5B	; 91
    41c4:	f0 e0       	ldi	r31, 0x00	; 0
    41c6:	80 81       	ld	r24, Z
    41c8:	8f 7d       	andi	r24, 0xDF	; 223
    41ca:	8c 93       	st	X, r24
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <EXTI_enuInit+0x330>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    41ce:	82 e0       	ldi	r24, 0x02	; 2
    41d0:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    41d2:	8a 81       	ldd	r24, Y+2	; 0x02
    41d4:	82 30       	cpi	r24, 0x02	; 2
    41d6:	61 f0       	breq	.+24     	; 0x41f0 <EXTI_enuInit+0x34e>
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <EXTI_enuInit+0x33c>
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    41da:	82 e0       	ldi	r24, 0x02	; 2
    41dc:	8a 83       	std	Y+2, r24	; 0x02

ES_t EXTI_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	8f 5f       	subi	r24, 0xFF	; 255
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	90 91 97 01 	lds	r25, 0x0197
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	89 17       	cp	r24, r25
    41ec:	08 f4       	brcc	.+2      	; 0x41f0 <EXTI_enuInit+0x34e>
    41ee:	67 ce       	rjmp	.-818    	; 0x3ebe <EXTI_enuInit+0x1c>
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
		}
		else Local_enuErrorState = ES_OUT_RANGE;
	}
	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    41f0:	8a 81       	ldd	r24, Y+2	; 0x02
    41f2:	82 30       	cpi	r24, 0x02	; 2
    41f4:	09 f0       	breq	.+2      	; 0x41f8 <EXTI_enuInit+0x356>
    41f6:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    41f8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    41fa:	2e 96       	adiw	r28, 0x0e	; 14
    41fc:	0f b6       	in	r0, 0x3f	; 63
    41fe:	f8 94       	cli
    4200:	de bf       	out	0x3e, r29	; 62
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	cd bf       	out	0x3d, r28	; 61
    4206:	cf 91       	pop	r28
    4208:	df 91       	pop	r29
    420a:	08 95       	ret

0000420c <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt( u8 Copy_u8IntNum )
{
    420c:	df 93       	push	r29
    420e:	cf 93       	push	r28
    4210:	00 d0       	rcall	.+0      	; 0x4212 <EXTI_enuEnableInterrupt+0x6>
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
    4216:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    421c:	8a 81       	ldd	r24, Y+2	; 0x02
    421e:	8d 33       	cpi	r24, 0x3D	; 61
    4220:	41 f4       	brne	.+16     	; 0x4232 <EXTI_enuEnableInterrupt+0x26>
	{																		/********************************/
		SET_BIT( GICR , PIE0_BIT );											/*			ENABLE INT0			*/
    4222:	ab e5       	ldi	r26, 0x5B	; 91
    4224:	b0 e0       	ldi	r27, 0x00	; 0
    4226:	eb e5       	ldi	r30, 0x5B	; 91
    4228:	f0 e0       	ldi	r31, 0x00	; 0
    422a:	80 81       	ld	r24, Z
    422c:	80 64       	ori	r24, 0x40	; 64
    422e:	8c 93       	st	X, r24
    4230:	18 c0       	rjmp	.+48     	; 0x4262 <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    4232:	8a 81       	ldd	r24, Y+2	; 0x02
    4234:	8e 33       	cpi	r24, 0x3E	; 62
    4236:	41 f4       	brne	.+16     	; 0x4248 <EXTI_enuEnableInterrupt+0x3c>
	{																		/********************************/
		SET_BIT( GICR , PIE1_BIT );											/*			ENABLE INT1			*/
    4238:	ab e5       	ldi	r26, 0x5B	; 91
    423a:	b0 e0       	ldi	r27, 0x00	; 0
    423c:	eb e5       	ldi	r30, 0x5B	; 91
    423e:	f0 e0       	ldi	r31, 0x00	; 0
    4240:	80 81       	ld	r24, Z
    4242:	80 68       	ori	r24, 0x80	; 128
    4244:	8c 93       	st	X, r24
    4246:	0d c0       	rjmp	.+26     	; 0x4262 <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    4248:	8a 81       	ldd	r24, Y+2	; 0x02
    424a:	8f 33       	cpi	r24, 0x3F	; 63
    424c:	41 f4       	brne	.+16     	; 0x425e <EXTI_enuEnableInterrupt+0x52>
	{																		/********************************/
		SET_BIT( GICR , PIE2_BIT );											/*			ENABLE INT2			*/
    424e:	ab e5       	ldi	r26, 0x5B	; 91
    4250:	b0 e0       	ldi	r27, 0x00	; 0
    4252:	eb e5       	ldi	r30, 0x5B	; 91
    4254:	f0 e0       	ldi	r31, 0x00	; 0
    4256:	80 81       	ld	r24, Z
    4258:	80 62       	ori	r24, 0x20	; 32
    425a:	8c 93       	st	X, r24
    425c:	02 c0       	rjmp	.+4      	; 0x4262 <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    425e:	82 e0       	ldi	r24, 0x02	; 2
    4260:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    4262:	89 81       	ldd	r24, Y+1	; 0x01
    4264:	82 30       	cpi	r24, 0x02	; 2
    4266:	09 f0       	breq	.+2      	; 0x426a <EXTI_enuEnableInterrupt+0x5e>
    4268:	19 82       	std	Y+1, r1	; 0x01


	return Local_enuErrorState ;
    426a:	89 81       	ldd	r24, Y+1	; 0x01
}
    426c:	0f 90       	pop	r0
    426e:	0f 90       	pop	r0
    4270:	cf 91       	pop	r28
    4272:	df 91       	pop	r29
    4274:	08 95       	ret

00004276 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt( u8 Copy_u8IntNum )
{
    4276:	df 93       	push	r29
    4278:	cf 93       	push	r28
    427a:	00 d0       	rcall	.+0      	; 0x427c <EXTI_enuDisableInterrupt+0x6>
    427c:	cd b7       	in	r28, 0x3d	; 61
    427e:	de b7       	in	r29, 0x3e	; 62
    4280:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    4286:	8a 81       	ldd	r24, Y+2	; 0x02
    4288:	8d 33       	cpi	r24, 0x3D	; 61
    428a:	41 f4       	brne	.+16     	; 0x429c <EXTI_enuDisableInterrupt+0x26>
	{																		/********************************/
		CLR_BIT( GICR , PIE0_BIT );											/*			DISABLE INT0		*/
    428c:	ab e5       	ldi	r26, 0x5B	; 91
    428e:	b0 e0       	ldi	r27, 0x00	; 0
    4290:	eb e5       	ldi	r30, 0x5B	; 91
    4292:	f0 e0       	ldi	r31, 0x00	; 0
    4294:	80 81       	ld	r24, Z
    4296:	8f 7b       	andi	r24, 0xBF	; 191
    4298:	8c 93       	st	X, r24
    429a:	18 c0       	rjmp	.+48     	; 0x42cc <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    429c:	8a 81       	ldd	r24, Y+2	; 0x02
    429e:	8e 33       	cpi	r24, 0x3E	; 62
    42a0:	41 f4       	brne	.+16     	; 0x42b2 <EXTI_enuDisableInterrupt+0x3c>
	{																		/********************************/
		CLR_BIT( GICR , PIE1_BIT );											/*			DISABLE INT1		*/
    42a2:	ab e5       	ldi	r26, 0x5B	; 91
    42a4:	b0 e0       	ldi	r27, 0x00	; 0
    42a6:	eb e5       	ldi	r30, 0x5B	; 91
    42a8:	f0 e0       	ldi	r31, 0x00	; 0
    42aa:	80 81       	ld	r24, Z
    42ac:	8f 77       	andi	r24, 0x7F	; 127
    42ae:	8c 93       	st	X, r24
    42b0:	0d c0       	rjmp	.+26     	; 0x42cc <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    42b2:	8a 81       	ldd	r24, Y+2	; 0x02
    42b4:	8f 33       	cpi	r24, 0x3F	; 63
    42b6:	41 f4       	brne	.+16     	; 0x42c8 <EXTI_enuDisableInterrupt+0x52>
	{																		/********************************/
		CLR_BIT( GICR , PIE2_BIT );											/*			DISABLE INT2		*/
    42b8:	ab e5       	ldi	r26, 0x5B	; 91
    42ba:	b0 e0       	ldi	r27, 0x00	; 0
    42bc:	eb e5       	ldi	r30, 0x5B	; 91
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	80 81       	ld	r24, Z
    42c2:	8f 7d       	andi	r24, 0xDF	; 223
    42c4:	8c 93       	st	X, r24
    42c6:	02 c0       	rjmp	.+4      	; 0x42cc <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    42cc:	89 81       	ldd	r24, Y+1	; 0x01
    42ce:	82 30       	cpi	r24, 0x02	; 2
    42d0:	09 f0       	breq	.+2      	; 0x42d4 <EXTI_enuDisableInterrupt+0x5e>
    42d2:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    42d6:	0f 90       	pop	r0
    42d8:	0f 90       	pop	r0
    42da:	cf 91       	pop	r28
    42dc:	df 91       	pop	r29
    42de:	08 95       	ret

000042e0 <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel( u8 Copy_u8IntNum , u8 Copy_u8SenseLevel )
{
    42e0:	df 93       	push	r29
    42e2:	cf 93       	push	r28
    42e4:	cd b7       	in	r28, 0x3d	; 61
    42e6:	de b7       	in	r29, 0x3e	; 62
    42e8:	29 97       	sbiw	r28, 0x09	; 9
    42ea:	0f b6       	in	r0, 0x3f	; 63
    42ec:	f8 94       	cli
    42ee:	de bf       	out	0x3e, r29	; 62
    42f0:	0f be       	out	0x3f, r0	; 63
    42f2:	cd bf       	out	0x3d, r28	; 61
    42f4:	8a 83       	std	Y+2, r24	; 0x02
    42f6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	89 83       	std	Y+1, r24	; 0x01


	if( Copy_u8IntNum == INT0 )													/********************************************************************/
    42fc:	8a 81       	ldd	r24, Y+2	; 0x02
    42fe:	8d 33       	cpi	r24, 0x3D	; 61
    4300:	09 f0       	breq	.+2      	; 0x4304 <EXTI_enuSetSenseLevel+0x24>
    4302:	43 c0       	rjmp	.+134    	; 0x438a <EXTI_enuSetSenseLevel+0xaa>
	{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	_TWO_BITS_MASK_	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    4304:	a5 e5       	ldi	r26, 0x55	; 85
    4306:	b0 e0       	ldi	r27, 0x00	; 0
    4308:	e5 e5       	ldi	r30, 0x55	; 85
    430a:	f0 e0       	ldi	r31, 0x00	; 0
    430c:	80 81       	ld	r24, Z
    430e:	8c 7f       	andi	r24, 0xFC	; 252
    4310:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    4312:	8b 81       	ldd	r24, Y+3	; 0x03
    4314:	28 2f       	mov	r18, r24
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	39 87       	std	Y+9, r19	; 0x09
    431a:	28 87       	std	Y+8, r18	; 0x08
    431c:	88 85       	ldd	r24, Y+8	; 0x08
    431e:	99 85       	ldd	r25, Y+9	; 0x09
    4320:	88 33       	cpi	r24, 0x38	; 56
    4322:	91 05       	cpc	r25, r1
    4324:	b9 f0       	breq	.+46     	; 0x4354 <EXTI_enuSetSenseLevel+0x74>
    4326:	28 85       	ldd	r18, Y+8	; 0x08
    4328:	39 85       	ldd	r19, Y+9	; 0x09
    432a:	29 33       	cpi	r18, 0x39	; 57
    432c:	31 05       	cpc	r19, r1
    432e:	3c f4       	brge	.+14     	; 0x433e <EXTI_enuSetSenseLevel+0x5e>
    4330:	88 85       	ldd	r24, Y+8	; 0x08
    4332:	99 85       	ldd	r25, Y+9	; 0x09
    4334:	87 33       	cpi	r24, 0x37	; 55
    4336:	91 05       	cpc	r25, r1
    4338:	09 f4       	brne	.+2      	; 0x433c <EXTI_enuSetSenseLevel+0x5c>
    433a:	96 c0       	rjmp	.+300    	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
    433c:	23 c0       	rjmp	.+70     	; 0x4384 <EXTI_enuSetSenseLevel+0xa4>
    433e:	28 85       	ldd	r18, Y+8	; 0x08
    4340:	39 85       	ldd	r19, Y+9	; 0x09
    4342:	29 33       	cpi	r18, 0x39	; 57
    4344:	31 05       	cpc	r19, r1
    4346:	71 f0       	breq	.+28     	; 0x4364 <EXTI_enuSetSenseLevel+0x84>
    4348:	88 85       	ldd	r24, Y+8	; 0x08
    434a:	99 85       	ldd	r25, Y+9	; 0x09
    434c:	8a 33       	cpi	r24, 0x3A	; 58
    434e:	91 05       	cpc	r25, r1
    4350:	89 f0       	breq	.+34     	; 0x4374 <EXTI_enuSetSenseLevel+0x94>
    4352:	18 c0       	rjmp	.+48     	; 0x4384 <EXTI_enuSetSenseLevel+0xa4>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	SET_BIT( MCUCR , ISC00_BIT );				/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    4354:	a5 e5       	ldi	r26, 0x55	; 85
    4356:	b0 e0       	ldi	r27, 0x00	; 0
    4358:	e5 e5       	ldi	r30, 0x55	; 85
    435a:	f0 e0       	ldi	r31, 0x00	; 0
    435c:	80 81       	ld	r24, Z
    435e:	81 60       	ori	r24, 0x01	; 1
    4360:	8c 93       	st	X, r24
    4362:	82 c0       	rjmp	.+260    	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	SET_BIT( MCUCR , ISC01_BIT );				/*		Setting them to '10' for Falling Edge Sense Choice			*/
    4364:	a5 e5       	ldi	r26, 0x55	; 85
    4366:	b0 e0       	ldi	r27, 0x00	; 0
    4368:	e5 e5       	ldi	r30, 0x55	; 85
    436a:	f0 e0       	ldi	r31, 0x00	; 0
    436c:	80 81       	ld	r24, Z
    436e:	82 60       	ori	r24, 0x02	; 2
    4370:	8c 93       	st	X, r24
    4372:	7a c0       	rjmp	.+244    	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	SET_BIT( MCUCR , ISC00_BIT );				/*		Setting them to '11' for Rising Edge Sense Choice			*/
    4374:	a5 e5       	ldi	r26, 0x55	; 85
    4376:	b0 e0       	ldi	r27, 0x00	; 0
    4378:	e5 e5       	ldi	r30, 0x55	; 85
    437a:	f0 e0       	ldi	r31, 0x00	; 0
    437c:	80 81       	ld	r24, Z
    437e:	81 60       	ori	r24, 0x01	; 1
    4380:	8c 93       	st	X, r24
    4382:	72 c0       	rjmp	.+228    	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    4384:	82 e0       	ldi	r24, 0x02	; 2
    4386:	89 83       	std	Y+1, r24	; 0x01
    4388:	6f c0       	rjmp	.+222    	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
		}
	}

	else if( Copy_u8IntNum == INT1 )											/********************************************************************/
    438a:	8a 81       	ldd	r24, Y+2	; 0x02
    438c:	8e 33       	cpi	r24, 0x3E	; 62
    438e:	09 f0       	breq	.+2      	; 0x4392 <EXTI_enuSetSenseLevel+0xb2>
    4390:	43 c0       	rjmp	.+134    	; 0x4418 <EXTI_enuSetSenseLevel+0x138>
	{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	_TWO_BITS_MASK_	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    4392:	a5 e5       	ldi	r26, 0x55	; 85
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	e5 e5       	ldi	r30, 0x55	; 85
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	83 7f       	andi	r24, 0xF3	; 243
    439e:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    43a0:	8b 81       	ldd	r24, Y+3	; 0x03
    43a2:	28 2f       	mov	r18, r24
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	3f 83       	std	Y+7, r19	; 0x07
    43a8:	2e 83       	std	Y+6, r18	; 0x06
    43aa:	8e 81       	ldd	r24, Y+6	; 0x06
    43ac:	9f 81       	ldd	r25, Y+7	; 0x07
    43ae:	88 33       	cpi	r24, 0x38	; 56
    43b0:	91 05       	cpc	r25, r1
    43b2:	b9 f0       	breq	.+46     	; 0x43e2 <EXTI_enuSetSenseLevel+0x102>
    43b4:	2e 81       	ldd	r18, Y+6	; 0x06
    43b6:	3f 81       	ldd	r19, Y+7	; 0x07
    43b8:	29 33       	cpi	r18, 0x39	; 57
    43ba:	31 05       	cpc	r19, r1
    43bc:	3c f4       	brge	.+14     	; 0x43cc <EXTI_enuSetSenseLevel+0xec>
    43be:	8e 81       	ldd	r24, Y+6	; 0x06
    43c0:	9f 81       	ldd	r25, Y+7	; 0x07
    43c2:	87 33       	cpi	r24, 0x37	; 55
    43c4:	91 05       	cpc	r25, r1
    43c6:	09 f4       	brne	.+2      	; 0x43ca <EXTI_enuSetSenseLevel+0xea>
    43c8:	4f c0       	rjmp	.+158    	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
    43ca:	23 c0       	rjmp	.+70     	; 0x4412 <EXTI_enuSetSenseLevel+0x132>
    43cc:	2e 81       	ldd	r18, Y+6	; 0x06
    43ce:	3f 81       	ldd	r19, Y+7	; 0x07
    43d0:	29 33       	cpi	r18, 0x39	; 57
    43d2:	31 05       	cpc	r19, r1
    43d4:	71 f0       	breq	.+28     	; 0x43f2 <EXTI_enuSetSenseLevel+0x112>
    43d6:	8e 81       	ldd	r24, Y+6	; 0x06
    43d8:	9f 81       	ldd	r25, Y+7	; 0x07
    43da:	8a 33       	cpi	r24, 0x3A	; 58
    43dc:	91 05       	cpc	r25, r1
    43de:	89 f0       	breq	.+34     	; 0x4402 <EXTI_enuSetSenseLevel+0x122>
    43e0:	18 c0       	rjmp	.+48     	; 0x4412 <EXTI_enuSetSenseLevel+0x132>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	SET_BIT( MCUCR , ISC10_BIT );				/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    43e2:	a5 e5       	ldi	r26, 0x55	; 85
    43e4:	b0 e0       	ldi	r27, 0x00	; 0
    43e6:	e5 e5       	ldi	r30, 0x55	; 85
    43e8:	f0 e0       	ldi	r31, 0x00	; 0
    43ea:	80 81       	ld	r24, Z
    43ec:	84 60       	ori	r24, 0x04	; 4
    43ee:	8c 93       	st	X, r24
    43f0:	3b c0       	rjmp	.+118    	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	SET_BIT( MCUCR , ISC11_BIT );				/*		Setting them to '10' for Falling Edge Sense Choice			*/
    43f2:	a5 e5       	ldi	r26, 0x55	; 85
    43f4:	b0 e0       	ldi	r27, 0x00	; 0
    43f6:	e5 e5       	ldi	r30, 0x55	; 85
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	80 81       	ld	r24, Z
    43fc:	88 60       	ori	r24, 0x08	; 8
    43fe:	8c 93       	st	X, r24
    4400:	33 c0       	rjmp	.+102    	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= ( _TWO_BITS_MASK_	<<	ISC10_BIT );/*		Setting them to '11' for Rising Edge Sense Choice			*/
    4402:	a5 e5       	ldi	r26, 0x55	; 85
    4404:	b0 e0       	ldi	r27, 0x00	; 0
    4406:	e5 e5       	ldi	r30, 0x55	; 85
    4408:	f0 e0       	ldi	r31, 0x00	; 0
    440a:	80 81       	ld	r24, Z
    440c:	8c 60       	ori	r24, 0x0C	; 12
    440e:	8c 93       	st	X, r24
    4410:	2b c0       	rjmp	.+86     	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    4412:	82 e0       	ldi	r24, 0x02	; 2
    4414:	89 83       	std	Y+1, r24	; 0x01
    4416:	28 c0       	rjmp	.+80     	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else if( Copy_u8IntNum == INT2 )											/********************************************************************/
    4418:	8a 81       	ldd	r24, Y+2	; 0x02
    441a:	8f 33       	cpi	r24, 0x3F	; 63
    441c:	19 f5       	brne	.+70     	; 0x4464 <EXTI_enuSetSenseLevel+0x184>
	{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
		switch( Copy_u8SenseLevel )												/********************************************************************/
    441e:	8b 81       	ldd	r24, Y+3	; 0x03
    4420:	28 2f       	mov	r18, r24
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	3d 83       	std	Y+5, r19	; 0x05
    4426:	2c 83       	std	Y+4, r18	; 0x04
    4428:	8c 81       	ldd	r24, Y+4	; 0x04
    442a:	9d 81       	ldd	r25, Y+5	; 0x05
    442c:	89 33       	cpi	r24, 0x39	; 57
    442e:	91 05       	cpc	r25, r1
    4430:	31 f0       	breq	.+12     	; 0x443e <EXTI_enuSetSenseLevel+0x15e>
    4432:	2c 81       	ldd	r18, Y+4	; 0x04
    4434:	3d 81       	ldd	r19, Y+5	; 0x05
    4436:	2a 33       	cpi	r18, 0x3A	; 58
    4438:	31 05       	cpc	r19, r1
    443a:	49 f0       	breq	.+18     	; 0x444e <EXTI_enuSetSenseLevel+0x16e>
    443c:	10 c0       	rjmp	.+32     	; 0x445e <EXTI_enuSetSenseLevel+0x17e>
		{																		/*																	*/
			case	FALLING_EDGE:	CLR_BIT( MCUCR , ISC2_BIT );				/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    443e:	a5 e5       	ldi	r26, 0x55	; 85
    4440:	b0 e0       	ldi	r27, 0x00	; 0
    4442:	e5 e5       	ldi	r30, 0x55	; 85
    4444:	f0 e0       	ldi	r31, 0x00	; 0
    4446:	80 81       	ld	r24, Z
    4448:	8f 7b       	andi	r24, 0xBF	; 191
    444a:	8c 93       	st	X, r24
    444c:	0d c0       	rjmp	.+26     	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	SET_BIT( MCUCR , ISC2_BIT );				/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    444e:	a5 e5       	ldi	r26, 0x55	; 85
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	e5 e5       	ldi	r30, 0x55	; 85
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	80 64       	ori	r24, 0x40	; 64
    445a:	8c 93       	st	X, r24
    445c:	05 c0       	rjmp	.+10     	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    445e:	82 e0       	ldi	r24, 0x02	; 2
    4460:	89 83       	std	Y+1, r24	; 0x01
    4462:	02 c0       	rjmp	.+4      	; 0x4468 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    4464:	82 e0       	ldi	r24, 0x02	; 2
    4466:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    4468:	89 81       	ldd	r24, Y+1	; 0x01
    446a:	82 30       	cpi	r24, 0x02	; 2
    446c:	09 f0       	breq	.+2      	; 0x4470 <EXTI_enuSetSenseLevel+0x190>
    446e:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    4470:	89 81       	ldd	r24, Y+1	; 0x01
}
    4472:	29 96       	adiw	r28, 0x09	; 9
    4474:	0f b6       	in	r0, 0x3f	; 63
    4476:	f8 94       	cli
    4478:	de bf       	out	0x3e, r29	; 62
    447a:	0f be       	out	0x3f, r0	; 63
    447c:	cd bf       	out	0x3d, r28	; 61
    447e:	cf 91       	pop	r28
    4480:	df 91       	pop	r29
    4482:	08 95       	ret

00004484 <__vector_1>:
void __vector_2(void)__attribute__((signal));	//ISR	INT1
void __vector_3(void)__attribute__((signal));	//ISR	INT2


void __vector_1(void)
{
    4484:	1f 92       	push	r1
    4486:	0f 92       	push	r0
    4488:	0f b6       	in	r0, 0x3f	; 63
    448a:	0f 92       	push	r0
    448c:	11 24       	eor	r1, r1
    448e:	2f 93       	push	r18
    4490:	3f 93       	push	r19
    4492:	4f 93       	push	r20
    4494:	5f 93       	push	r21
    4496:	6f 93       	push	r22
    4498:	7f 93       	push	r23
    449a:	8f 93       	push	r24
    449c:	9f 93       	push	r25
    449e:	af 93       	push	r26
    44a0:	bf 93       	push	r27
    44a2:	ef 93       	push	r30
    44a4:	ff 93       	push	r31
    44a6:	df 93       	push	r29
    44a8:	cf 93       	push	r28
    44aa:	cd b7       	in	r28, 0x3d	; 61
    44ac:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[0] != NULL)
    44ae:	80 91 37 02 	lds	r24, 0x0237
    44b2:	90 91 38 02 	lds	r25, 0x0238
    44b6:	00 97       	sbiw	r24, 0x00	; 0
    44b8:	29 f0       	breq	.+10     	; 0x44c4 <__vector_1+0x40>
	{
		EXTI_ApFunction_AppFun[0]();
    44ba:	e0 91 37 02 	lds	r30, 0x0237
    44be:	f0 91 38 02 	lds	r31, 0x0238
    44c2:	09 95       	icall
	}
}
    44c4:	cf 91       	pop	r28
    44c6:	df 91       	pop	r29
    44c8:	ff 91       	pop	r31
    44ca:	ef 91       	pop	r30
    44cc:	bf 91       	pop	r27
    44ce:	af 91       	pop	r26
    44d0:	9f 91       	pop	r25
    44d2:	8f 91       	pop	r24
    44d4:	7f 91       	pop	r23
    44d6:	6f 91       	pop	r22
    44d8:	5f 91       	pop	r21
    44da:	4f 91       	pop	r20
    44dc:	3f 91       	pop	r19
    44de:	2f 91       	pop	r18
    44e0:	0f 90       	pop	r0
    44e2:	0f be       	out	0x3f, r0	; 63
    44e4:	0f 90       	pop	r0
    44e6:	1f 90       	pop	r1
    44e8:	18 95       	reti

000044ea <__vector_2>:
void __vector_2(void)
{
    44ea:	1f 92       	push	r1
    44ec:	0f 92       	push	r0
    44ee:	0f b6       	in	r0, 0x3f	; 63
    44f0:	0f 92       	push	r0
    44f2:	11 24       	eor	r1, r1
    44f4:	2f 93       	push	r18
    44f6:	3f 93       	push	r19
    44f8:	4f 93       	push	r20
    44fa:	5f 93       	push	r21
    44fc:	6f 93       	push	r22
    44fe:	7f 93       	push	r23
    4500:	8f 93       	push	r24
    4502:	9f 93       	push	r25
    4504:	af 93       	push	r26
    4506:	bf 93       	push	r27
    4508:	ef 93       	push	r30
    450a:	ff 93       	push	r31
    450c:	df 93       	push	r29
    450e:	cf 93       	push	r28
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[1] != NULL)
    4514:	80 91 39 02 	lds	r24, 0x0239
    4518:	90 91 3a 02 	lds	r25, 0x023A
    451c:	00 97       	sbiw	r24, 0x00	; 0
    451e:	29 f0       	breq	.+10     	; 0x452a <__vector_2+0x40>
	{
		EXTI_ApFunction_AppFun[1]();
    4520:	e0 91 39 02 	lds	r30, 0x0239
    4524:	f0 91 3a 02 	lds	r31, 0x023A
    4528:	09 95       	icall
	}
}
    452a:	cf 91       	pop	r28
    452c:	df 91       	pop	r29
    452e:	ff 91       	pop	r31
    4530:	ef 91       	pop	r30
    4532:	bf 91       	pop	r27
    4534:	af 91       	pop	r26
    4536:	9f 91       	pop	r25
    4538:	8f 91       	pop	r24
    453a:	7f 91       	pop	r23
    453c:	6f 91       	pop	r22
    453e:	5f 91       	pop	r21
    4540:	4f 91       	pop	r20
    4542:	3f 91       	pop	r19
    4544:	2f 91       	pop	r18
    4546:	0f 90       	pop	r0
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	0f 90       	pop	r0
    454c:	1f 90       	pop	r1
    454e:	18 95       	reti

00004550 <__vector_3>:
void __vector_3(void)
{
    4550:	1f 92       	push	r1
    4552:	0f 92       	push	r0
    4554:	0f b6       	in	r0, 0x3f	; 63
    4556:	0f 92       	push	r0
    4558:	11 24       	eor	r1, r1
    455a:	2f 93       	push	r18
    455c:	3f 93       	push	r19
    455e:	4f 93       	push	r20
    4560:	5f 93       	push	r21
    4562:	6f 93       	push	r22
    4564:	7f 93       	push	r23
    4566:	8f 93       	push	r24
    4568:	9f 93       	push	r25
    456a:	af 93       	push	r26
    456c:	bf 93       	push	r27
    456e:	ef 93       	push	r30
    4570:	ff 93       	push	r31
    4572:	df 93       	push	r29
    4574:	cf 93       	push	r28
    4576:	cd b7       	in	r28, 0x3d	; 61
    4578:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[2] != NULL)
    457a:	80 91 3b 02 	lds	r24, 0x023B
    457e:	90 91 3c 02 	lds	r25, 0x023C
    4582:	00 97       	sbiw	r24, 0x00	; 0
    4584:	29 f0       	breq	.+10     	; 0x4590 <__vector_3+0x40>
	{
		EXTI_ApFunction_AppFun[2]();
    4586:	e0 91 3b 02 	lds	r30, 0x023B
    458a:	f0 91 3c 02 	lds	r31, 0x023C
    458e:	09 95       	icall
	}
}
    4590:	cf 91       	pop	r28
    4592:	df 91       	pop	r29
    4594:	ff 91       	pop	r31
    4596:	ef 91       	pop	r30
    4598:	bf 91       	pop	r27
    459a:	af 91       	pop	r26
    459c:	9f 91       	pop	r25
    459e:	8f 91       	pop	r24
    45a0:	7f 91       	pop	r23
    45a2:	6f 91       	pop	r22
    45a4:	5f 91       	pop	r21
    45a6:	4f 91       	pop	r20
    45a8:	3f 91       	pop	r19
    45aa:	2f 91       	pop	r18
    45ac:	0f 90       	pop	r0
    45ae:	0f be       	out	0x3f, r0	; 63
    45b0:	0f 90       	pop	r0
    45b2:	1f 90       	pop	r1
    45b4:	18 95       	reti

000045b6 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack( u8 Copy_u8IntNum , void (*Copy_pAppFunction)(void) )
{
    45b6:	df 93       	push	r29
    45b8:	cf 93       	push	r28
    45ba:	00 d0       	rcall	.+0      	; 0x45bc <EXTI_enuCallBack+0x6>
    45bc:	00 d0       	rcall	.+0      	; 0x45be <EXTI_enuCallBack+0x8>
    45be:	cd b7       	in	r28, 0x3d	; 61
    45c0:	de b7       	in	r29, 0x3e	; 62
    45c2:	8a 83       	std	Y+2, r24	; 0x02
    45c4:	7c 83       	std	Y+4, r23	; 0x04
    45c6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pAppFunction != NULL)
    45cc:	8b 81       	ldd	r24, Y+3	; 0x03
    45ce:	9c 81       	ldd	r25, Y+4	; 0x04
    45d0:	00 97       	sbiw	r24, 0x00	; 0
    45d2:	89 f0       	breq	.+34     	; 0x45f6 <EXTI_enuCallBack+0x40>
	{
		EXTI_ApFunction_AppFun[(Copy_u8IntNum -= INT0)] =  Copy_pAppFunction ;
    45d4:	8a 81       	ldd	r24, Y+2	; 0x02
    45d6:	8d 53       	subi	r24, 0x3D	; 61
    45d8:	8a 83       	std	Y+2, r24	; 0x02
    45da:	8a 81       	ldd	r24, Y+2	; 0x02
    45dc:	88 2f       	mov	r24, r24
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	88 0f       	add	r24, r24
    45e2:	99 1f       	adc	r25, r25
    45e4:	fc 01       	movw	r30, r24
    45e6:	e9 5c       	subi	r30, 0xC9	; 201
    45e8:	fd 4f       	sbci	r31, 0xFD	; 253
    45ea:	8b 81       	ldd	r24, Y+3	; 0x03
    45ec:	9c 81       	ldd	r25, Y+4	; 0x04
    45ee:	91 83       	std	Z+1, r25	; 0x01
    45f0:	80 83       	st	Z, r24

		Local_enuErrorState = ES_OK;
    45f2:	19 82       	std	Y+1, r1	; 0x01
    45f4:	02 c0       	rjmp	.+4      	; 0x45fa <EXTI_enuCallBack+0x44>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    45f6:	83 e0       	ldi	r24, 0x03	; 3
    45f8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    45fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    45fc:	0f 90       	pop	r0
    45fe:	0f 90       	pop	r0
    4600:	0f 90       	pop	r0
    4602:	0f 90       	pop	r0
    4604:	cf 91       	pop	r28
    4606:	df 91       	pop	r29
    4608:	08 95       	ret

0000460a <EEPROM_enuWriteByte>:
#include "..\..\SHARED\errorState.h"

#include "EEPROM_priv.h"

ES_t EEPROM_enuWriteByte( u16 Copy_u16Address , u8 Copy_u8Data )
{
    460a:	df 93       	push	r29
    460c:	cf 93       	push	r28
    460e:	00 d0       	rcall	.+0      	; 0x4610 <EEPROM_enuWriteByte+0x6>
    4610:	00 d0       	rcall	.+0      	; 0x4612 <EEPROM_enuWriteByte+0x8>
    4612:	cd b7       	in	r28, 0x3d	; 61
    4614:	de b7       	in	r29, 0x3e	; 62
    4616:	9b 83       	std	Y+3, r25	; 0x03
    4618:	8a 83       	std	Y+2, r24	; 0x02
    461a:	6c 83       	std	Y+4, r22	; 0x04
	WAIT_TILL_BIT_IS_CLR( EECR , EEWE ) ;
    461c:	ec e3       	ldi	r30, 0x3C	; 60
    461e:	f0 e0       	ldi	r31, 0x00	; 0
    4620:	80 81       	ld	r24, Z
    4622:	86 95       	lsr	r24
    4624:	88 2f       	mov	r24, r24
    4626:	90 e0       	ldi	r25, 0x00	; 0
    4628:	81 70       	andi	r24, 0x01	; 1
    462a:	90 70       	andi	r25, 0x00	; 0
    462c:	88 23       	and	r24, r24
    462e:	b1 f7       	brne	.-20     	; 0x461c <EEPROM_enuWriteByte+0x12>
	WAIT_TILL_BIT_IS_CLR( SPMCR , SPMEN ) ;
    4630:	e7 e5       	ldi	r30, 0x57	; 87
    4632:	f0 e0       	ldi	r31, 0x00	; 0
    4634:	80 81       	ld	r24, Z
    4636:	88 2f       	mov	r24, r24
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	81 70       	andi	r24, 0x01	; 1
    463c:	90 70       	andi	r25, 0x00	; 0
    463e:	88 23       	and	r24, r24
    4640:	b9 f7       	brne	.-18     	; 0x4630 <EEPROM_enuWriteByte+0x26>

	u8 Local_u8CopySREG = SREG ;						// Keeping a copy of Status register SREG
    4642:	ef e5       	ldi	r30, 0x5F	; 95
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	80 81       	ld	r24, Z
    4648:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;												// Disable Interrupts
    464a:	f8 94       	cli

	EEARH = ( Copy_u16Address >> _BYTE_SHIFT_ );		// Writing the higher byte of address in EEARH
    464c:	ef e3       	ldi	r30, 0x3F	; 63
    464e:	f0 e0       	ldi	r31, 0x00	; 0
    4650:	8a 81       	ldd	r24, Y+2	; 0x02
    4652:	9b 81       	ldd	r25, Y+3	; 0x03
    4654:	89 2f       	mov	r24, r25
    4656:	99 27       	eor	r25, r25
    4658:	80 83       	st	Z, r24
	EEARL = (u8)Copy_u16Address;						// Writing the Lower byte of address in EEARL
    465a:	ee e3       	ldi	r30, 0x3E	; 62
    465c:	f0 e0       	ldi	r31, 0x00	; 0
    465e:	8a 81       	ldd	r24, Y+2	; 0x02
    4660:	80 83       	st	Z, r24
	EEDR = Copy_u8Data ;								// Writing the data byte in EEDR register
    4662:	ed e3       	ldi	r30, 0x3D	; 61
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	8c 81       	ldd	r24, Y+4	; 0x04
    4668:	80 83       	st	Z, r24
	ASM_SET_BIT( _SFR_EECR_ , EEMWE );					// Setting EEMWE bit in EECR register
    466a:	e2 9a       	sbi	0x1c, 2	; 28
	ASM_SET_BIT( _SFR_EECR_ , EEWE  );					// Setting EEWE bit in EECR register
    466c:	e1 9a       	sbi	0x1c, 1	; 28

	SREG = Local_u8CopySREG ;
    466e:	ef e5       	ldi	r30, 0x5F	; 95
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	89 81       	ldd	r24, Y+1	; 0x01
    4674:	80 83       	st	Z, r24
	return ES_OK;
    4676:	80 e0       	ldi	r24, 0x00	; 0
}
    4678:	0f 90       	pop	r0
    467a:	0f 90       	pop	r0
    467c:	0f 90       	pop	r0
    467e:	0f 90       	pop	r0
    4680:	cf 91       	pop	r28
    4682:	df 91       	pop	r29
    4684:	08 95       	ret

00004686 <EEPROM_enuReadByte>:

ES_t EEPROM_enuReadByte( u16 Copy_u16Address , u8 *Copy_pu8Data )
{
    4686:	df 93       	push	r29
    4688:	cf 93       	push	r28
    468a:	00 d0       	rcall	.+0      	; 0x468c <EEPROM_enuReadByte+0x6>
    468c:	00 d0       	rcall	.+0      	; 0x468e <EEPROM_enuReadByte+0x8>
    468e:	0f 92       	push	r0
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    4694:	9b 83       	std	Y+3, r25	; 0x03
    4696:	8a 83       	std	Y+2, r24	; 0x02
    4698:	7d 83       	std	Y+5, r23	; 0x05
    469a:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
    469c:	81 e0       	ldi	r24, 0x01	; 1
    469e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pu8Data != NULL )
    46a0:	8c 81       	ldd	r24, Y+4	; 0x04
    46a2:	9d 81       	ldd	r25, Y+5	; 0x05
    46a4:	00 97       	sbiw	r24, 0x00	; 0
    46a6:	f1 f0       	breq	.+60     	; 0x46e4 <EEPROM_enuReadByte+0x5e>
	{
		WAIT_TILL_BIT_IS_CLR( EECR , EEWE ) ;
    46a8:	ec e3       	ldi	r30, 0x3C	; 60
    46aa:	f0 e0       	ldi	r31, 0x00	; 0
    46ac:	80 81       	ld	r24, Z
    46ae:	86 95       	lsr	r24
    46b0:	88 2f       	mov	r24, r24
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	81 70       	andi	r24, 0x01	; 1
    46b6:	90 70       	andi	r25, 0x00	; 0
    46b8:	88 23       	and	r24, r24
    46ba:	b1 f7       	brne	.-20     	; 0x46a8 <EEPROM_enuReadByte+0x22>
		EEARH = ( Copy_u16Address >> _BYTE_SHIFT_ );	// Writing the Higher byte of address in EEARH
    46bc:	ef e3       	ldi	r30, 0x3F	; 63
    46be:	f0 e0       	ldi	r31, 0x00	; 0
    46c0:	8a 81       	ldd	r24, Y+2	; 0x02
    46c2:	9b 81       	ldd	r25, Y+3	; 0x03
    46c4:	89 2f       	mov	r24, r25
    46c6:	99 27       	eor	r25, r25
    46c8:	80 83       	st	Z, r24
		EEARL = (u8)Copy_u16Address;					// Writing the Lower byte of address in EEARL
    46ca:	ee e3       	ldi	r30, 0x3E	; 62
    46cc:	f0 e0       	ldi	r31, 0x00	; 0
    46ce:	8a 81       	ldd	r24, Y+2	; 0x02
    46d0:	80 83       	st	Z, r24
		ASM_SET_BIT( _SFR_EECR_ , EERE );				// Setting EERE bit in EECR register
    46d2:	e0 9a       	sbi	0x1c, 0	; 28
		* Copy_pu8Data = EEDR ;							// Reading the data byte from EEDR register
    46d4:	ed e3       	ldi	r30, 0x3D	; 61
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	80 81       	ld	r24, Z
    46da:	ec 81       	ldd	r30, Y+4	; 0x04
    46dc:	fd 81       	ldd	r31, Y+5	; 0x05
    46de:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK ;
    46e0:	19 82       	std	Y+1, r1	; 0x01
    46e2:	02 c0       	rjmp	.+4      	; 0x46e8 <EEPROM_enuReadByte+0x62>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    46e4:	83 e0       	ldi	r24, 0x03	; 3
    46e6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    46e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    46ea:	0f 90       	pop	r0
    46ec:	0f 90       	pop	r0
    46ee:	0f 90       	pop	r0
    46f0:	0f 90       	pop	r0
    46f2:	0f 90       	pop	r0
    46f4:	cf 91       	pop	r28
    46f6:	df 91       	pop	r29
    46f8:	08 95       	ret

000046fa <DIO_enuInit>:

#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
	return ES_OK ;
    4702:	80 e0       	ldi	r24, 0x00	; 0
}
    4704:	cf 91       	pop	r28
    4706:	df 91       	pop	r29
    4708:	08 95       	ret

0000470a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    470a:	df 93       	push	r29
    470c:	cf 93       	push	r28
    470e:	00 d0       	rcall	.+0      	; 0x4710 <DIO_enuSetPinDirection+0x6>
    4710:	00 d0       	rcall	.+0      	; 0x4712 <DIO_enuSetPinDirection+0x8>
    4712:	00 d0       	rcall	.+0      	; 0x4714 <DIO_enuSetPinDirection+0xa>
    4714:	cd b7       	in	r28, 0x3d	; 61
    4716:	de b7       	in	r29, 0x3e	; 62
    4718:	8a 83       	std	Y+2, r24	; 0x02
    471a:	6b 83       	std	Y+3, r22	; 0x03
    471c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    4722:	8a 81       	ldd	r24, Y+2	; 0x02
    4724:	80 31       	cpi	r24, 0x10	; 16
    4726:	08 f0       	brcs	.+2      	; 0x472a <DIO_enuSetPinDirection+0x20>
    4728:	b3 c0       	rjmp	.+358    	; 0x4890 <DIO_enuSetPinDirection+0x186>
    472a:	8b 81       	ldd	r24, Y+3	; 0x03
    472c:	88 30       	cpi	r24, 0x08	; 8
    472e:	08 f0       	brcs	.+2      	; 0x4732 <DIO_enuSetPinDirection+0x28>
    4730:	af c0       	rjmp	.+350    	; 0x4890 <DIO_enuSetPinDirection+0x186>
    4732:	8c 81       	ldd	r24, Y+4	; 0x04
    4734:	82 30       	cpi	r24, 0x02	; 2
    4736:	08 f0       	brcs	.+2      	; 0x473a <DIO_enuSetPinDirection+0x30>
    4738:	ab c0       	rjmp	.+342    	; 0x4890 <DIO_enuSetPinDirection+0x186>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
    473a:	8a 81       	ldd	r24, Y+2	; 0x02
    473c:	28 2f       	mov	r18, r24
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	3e 83       	std	Y+6, r19	; 0x06
    4742:	2d 83       	std	Y+5, r18	; 0x05
    4744:	6d 81       	ldd	r22, Y+5	; 0x05
    4746:	7e 81       	ldd	r23, Y+6	; 0x06
    4748:	6d 30       	cpi	r22, 0x0D	; 13
    474a:	71 05       	cpc	r23, r1
    474c:	d1 f1       	breq	.+116    	; 0x47c2 <DIO_enuSetPinDirection+0xb8>
    474e:	8d 81       	ldd	r24, Y+5	; 0x05
    4750:	9e 81       	ldd	r25, Y+6	; 0x06
    4752:	8e 30       	cpi	r24, 0x0E	; 14
    4754:	91 05       	cpc	r25, r1
    4756:	34 f4       	brge	.+12     	; 0x4764 <DIO_enuSetPinDirection+0x5a>
    4758:	2d 81       	ldd	r18, Y+5	; 0x05
    475a:	3e 81       	ldd	r19, Y+6	; 0x06
    475c:	2c 30       	cpi	r18, 0x0C	; 12
    475e:	31 05       	cpc	r19, r1
    4760:	71 f0       	breq	.+28     	; 0x477e <DIO_enuSetPinDirection+0x74>
    4762:	94 c0       	rjmp	.+296    	; 0x488c <DIO_enuSetPinDirection+0x182>
    4764:	6d 81       	ldd	r22, Y+5	; 0x05
    4766:	7e 81       	ldd	r23, Y+6	; 0x06
    4768:	6e 30       	cpi	r22, 0x0E	; 14
    476a:	71 05       	cpc	r23, r1
    476c:	09 f4       	brne	.+2      	; 0x4770 <DIO_enuSetPinDirection+0x66>
    476e:	4b c0       	rjmp	.+150    	; 0x4806 <DIO_enuSetPinDirection+0xfc>
    4770:	8d 81       	ldd	r24, Y+5	; 0x05
    4772:	9e 81       	ldd	r25, Y+6	; 0x06
    4774:	8f 30       	cpi	r24, 0x0F	; 15
    4776:	91 05       	cpc	r25, r1
    4778:	09 f4       	brne	.+2      	; 0x477c <DIO_enuSetPinDirection+0x72>
    477a:	67 c0       	rjmp	.+206    	; 0x484a <DIO_enuSetPinDirection+0x140>
    477c:	87 c0       	rjmp	.+270    	; 0x488c <DIO_enuSetPinDirection+0x182>
		{
		case DIO_u8GROUP_A:
			ASSIGN_BIT_VALUE( DDR_A , Copy_u8PinID , Copy_u8Direction );
    477e:	aa e3       	ldi	r26, 0x3A	; 58
    4780:	b0 e0       	ldi	r27, 0x00	; 0
    4782:	ea e3       	ldi	r30, 0x3A	; 58
    4784:	f0 e0       	ldi	r31, 0x00	; 0
    4786:	80 81       	ld	r24, Z
    4788:	48 2f       	mov	r20, r24
    478a:	8b 81       	ldd	r24, Y+3	; 0x03
    478c:	28 2f       	mov	r18, r24
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	81 e0       	ldi	r24, 0x01	; 1
    4792:	90 e0       	ldi	r25, 0x00	; 0
    4794:	02 c0       	rjmp	.+4      	; 0x479a <DIO_enuSetPinDirection+0x90>
    4796:	88 0f       	add	r24, r24
    4798:	99 1f       	adc	r25, r25
    479a:	2a 95       	dec	r18
    479c:	e2 f7       	brpl	.-8      	; 0x4796 <DIO_enuSetPinDirection+0x8c>
    479e:	80 95       	com	r24
    47a0:	48 23       	and	r20, r24
    47a2:	8c 81       	ldd	r24, Y+4	; 0x04
    47a4:	28 2f       	mov	r18, r24
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	8b 81       	ldd	r24, Y+3	; 0x03
    47aa:	88 2f       	mov	r24, r24
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	b9 01       	movw	r22, r18
    47b0:	02 c0       	rjmp	.+4      	; 0x47b6 <DIO_enuSetPinDirection+0xac>
    47b2:	66 0f       	add	r22, r22
    47b4:	77 1f       	adc	r23, r23
    47b6:	8a 95       	dec	r24
    47b8:	e2 f7       	brpl	.-8      	; 0x47b2 <DIO_enuSetPinDirection+0xa8>
    47ba:	cb 01       	movw	r24, r22
    47bc:	84 2b       	or	r24, r20
    47be:	8c 93       	st	X, r24
    47c0:	65 c0       	rjmp	.+202    	; 0x488c <DIO_enuSetPinDirection+0x182>
			break;
		case DIO_u8GROUP_B:
			ASSIGN_BIT_VALUE( DDR_B , Copy_u8PinID , Copy_u8Direction );
    47c2:	a7 e3       	ldi	r26, 0x37	; 55
    47c4:	b0 e0       	ldi	r27, 0x00	; 0
    47c6:	e7 e3       	ldi	r30, 0x37	; 55
    47c8:	f0 e0       	ldi	r31, 0x00	; 0
    47ca:	80 81       	ld	r24, Z
    47cc:	48 2f       	mov	r20, r24
    47ce:	8b 81       	ldd	r24, Y+3	; 0x03
    47d0:	28 2f       	mov	r18, r24
    47d2:	30 e0       	ldi	r19, 0x00	; 0
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	02 c0       	rjmp	.+4      	; 0x47de <DIO_enuSetPinDirection+0xd4>
    47da:	88 0f       	add	r24, r24
    47dc:	99 1f       	adc	r25, r25
    47de:	2a 95       	dec	r18
    47e0:	e2 f7       	brpl	.-8      	; 0x47da <DIO_enuSetPinDirection+0xd0>
    47e2:	80 95       	com	r24
    47e4:	48 23       	and	r20, r24
    47e6:	8c 81       	ldd	r24, Y+4	; 0x04
    47e8:	28 2f       	mov	r18, r24
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	8b 81       	ldd	r24, Y+3	; 0x03
    47ee:	88 2f       	mov	r24, r24
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	b9 01       	movw	r22, r18
    47f4:	02 c0       	rjmp	.+4      	; 0x47fa <DIO_enuSetPinDirection+0xf0>
    47f6:	66 0f       	add	r22, r22
    47f8:	77 1f       	adc	r23, r23
    47fa:	8a 95       	dec	r24
    47fc:	e2 f7       	brpl	.-8      	; 0x47f6 <DIO_enuSetPinDirection+0xec>
    47fe:	cb 01       	movw	r24, r22
    4800:	84 2b       	or	r24, r20
    4802:	8c 93       	st	X, r24
    4804:	43 c0       	rjmp	.+134    	; 0x488c <DIO_enuSetPinDirection+0x182>
			break;
		case DIO_u8GROUP_C:
			ASSIGN_BIT_VALUE( DDR_C , Copy_u8PinID , Copy_u8Direction );
    4806:	a4 e3       	ldi	r26, 0x34	; 52
    4808:	b0 e0       	ldi	r27, 0x00	; 0
    480a:	e4 e3       	ldi	r30, 0x34	; 52
    480c:	f0 e0       	ldi	r31, 0x00	; 0
    480e:	80 81       	ld	r24, Z
    4810:	48 2f       	mov	r20, r24
    4812:	8b 81       	ldd	r24, Y+3	; 0x03
    4814:	28 2f       	mov	r18, r24
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <DIO_enuSetPinDirection+0x118>
    481e:	88 0f       	add	r24, r24
    4820:	99 1f       	adc	r25, r25
    4822:	2a 95       	dec	r18
    4824:	e2 f7       	brpl	.-8      	; 0x481e <DIO_enuSetPinDirection+0x114>
    4826:	80 95       	com	r24
    4828:	48 23       	and	r20, r24
    482a:	8c 81       	ldd	r24, Y+4	; 0x04
    482c:	28 2f       	mov	r18, r24
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	8b 81       	ldd	r24, Y+3	; 0x03
    4832:	88 2f       	mov	r24, r24
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	b9 01       	movw	r22, r18
    4838:	02 c0       	rjmp	.+4      	; 0x483e <DIO_enuSetPinDirection+0x134>
    483a:	66 0f       	add	r22, r22
    483c:	77 1f       	adc	r23, r23
    483e:	8a 95       	dec	r24
    4840:	e2 f7       	brpl	.-8      	; 0x483a <DIO_enuSetPinDirection+0x130>
    4842:	cb 01       	movw	r24, r22
    4844:	84 2b       	or	r24, r20
    4846:	8c 93       	st	X, r24
    4848:	21 c0       	rjmp	.+66     	; 0x488c <DIO_enuSetPinDirection+0x182>
			break;
		case DIO_u8GROUP_D:
			ASSIGN_BIT_VALUE( DDR_D , Copy_u8PinID , Copy_u8Direction );
    484a:	a1 e3       	ldi	r26, 0x31	; 49
    484c:	b0 e0       	ldi	r27, 0x00	; 0
    484e:	e1 e3       	ldi	r30, 0x31	; 49
    4850:	f0 e0       	ldi	r31, 0x00	; 0
    4852:	80 81       	ld	r24, Z
    4854:	48 2f       	mov	r20, r24
    4856:	8b 81       	ldd	r24, Y+3	; 0x03
    4858:	28 2f       	mov	r18, r24
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	81 e0       	ldi	r24, 0x01	; 1
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <DIO_enuSetPinDirection+0x15c>
    4862:	88 0f       	add	r24, r24
    4864:	99 1f       	adc	r25, r25
    4866:	2a 95       	dec	r18
    4868:	e2 f7       	brpl	.-8      	; 0x4862 <DIO_enuSetPinDirection+0x158>
    486a:	80 95       	com	r24
    486c:	48 23       	and	r20, r24
    486e:	8c 81       	ldd	r24, Y+4	; 0x04
    4870:	28 2f       	mov	r18, r24
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	8b 81       	ldd	r24, Y+3	; 0x03
    4876:	88 2f       	mov	r24, r24
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	b9 01       	movw	r22, r18
    487c:	02 c0       	rjmp	.+4      	; 0x4882 <DIO_enuSetPinDirection+0x178>
    487e:	66 0f       	add	r22, r22
    4880:	77 1f       	adc	r23, r23
    4882:	8a 95       	dec	r24
    4884:	e2 f7       	brpl	.-8      	; 0x487e <DIO_enuSetPinDirection+0x174>
    4886:	cb 01       	movw	r24, r22
    4888:	84 2b       	or	r24, r20
    488a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    488c:	19 82       	std	Y+1, r1	; 0x01
    488e:	02 c0       	rjmp	.+4      	; 0x4894 <DIO_enuSetPinDirection+0x18a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    4890:	82 e0       	ldi	r24, 0x02	; 2
    4892:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    4894:	89 81       	ldd	r24, Y+1	; 0x01
}
    4896:	26 96       	adiw	r28, 0x06	; 6
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	f8 94       	cli
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	08 95       	ret

000048a8 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    48a8:	df 93       	push	r29
    48aa:	cf 93       	push	r28
    48ac:	00 d0       	rcall	.+0      	; 0x48ae <DIO_enuSetPinValue+0x6>
    48ae:	00 d0       	rcall	.+0      	; 0x48b0 <DIO_enuSetPinValue+0x8>
    48b0:	00 d0       	rcall	.+0      	; 0x48b2 <DIO_enuSetPinValue+0xa>
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62
    48b6:	8a 83       	std	Y+2, r24	; 0x02
    48b8:	6b 83       	std	Y+3, r22	; 0x03
    48ba:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    48c0:	8a 81       	ldd	r24, Y+2	; 0x02
    48c2:	80 31       	cpi	r24, 0x10	; 16
    48c4:	08 f0       	brcs	.+2      	; 0x48c8 <DIO_enuSetPinValue+0x20>
    48c6:	b6 c0       	rjmp	.+364    	; 0x4a34 <DIO_enuSetPinValue+0x18c>
    48c8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ca:	88 30       	cpi	r24, 0x08	; 8
    48cc:	08 f0       	brcs	.+2      	; 0x48d0 <DIO_enuSetPinValue+0x28>
    48ce:	b2 c0       	rjmp	.+356    	; 0x4a34 <DIO_enuSetPinValue+0x18c>
    48d0:	8c 81       	ldd	r24, Y+4	; 0x04
    48d2:	82 30       	cpi	r24, 0x02	; 2
    48d4:	20 f0       	brcs	.+8      	; 0x48de <DIO_enuSetPinValue+0x36>
    48d6:	8c 81       	ldd	r24, Y+4	; 0x04
    48d8:	82 30       	cpi	r24, 0x02	; 2
    48da:	08 f0       	brcs	.+2      	; 0x48de <DIO_enuSetPinValue+0x36>
    48dc:	ab c0       	rjmp	.+342    	; 0x4a34 <DIO_enuSetPinValue+0x18c>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
    48de:	8a 81       	ldd	r24, Y+2	; 0x02
    48e0:	28 2f       	mov	r18, r24
    48e2:	30 e0       	ldi	r19, 0x00	; 0
    48e4:	3e 83       	std	Y+6, r19	; 0x06
    48e6:	2d 83       	std	Y+5, r18	; 0x05
    48e8:	6d 81       	ldd	r22, Y+5	; 0x05
    48ea:	7e 81       	ldd	r23, Y+6	; 0x06
    48ec:	6d 30       	cpi	r22, 0x0D	; 13
    48ee:	71 05       	cpc	r23, r1
    48f0:	d1 f1       	breq	.+116    	; 0x4966 <DIO_enuSetPinValue+0xbe>
    48f2:	8d 81       	ldd	r24, Y+5	; 0x05
    48f4:	9e 81       	ldd	r25, Y+6	; 0x06
    48f6:	8e 30       	cpi	r24, 0x0E	; 14
    48f8:	91 05       	cpc	r25, r1
    48fa:	34 f4       	brge	.+12     	; 0x4908 <DIO_enuSetPinValue+0x60>
    48fc:	2d 81       	ldd	r18, Y+5	; 0x05
    48fe:	3e 81       	ldd	r19, Y+6	; 0x06
    4900:	2c 30       	cpi	r18, 0x0C	; 12
    4902:	31 05       	cpc	r19, r1
    4904:	71 f0       	breq	.+28     	; 0x4922 <DIO_enuSetPinValue+0x7a>
    4906:	94 c0       	rjmp	.+296    	; 0x4a30 <DIO_enuSetPinValue+0x188>
    4908:	6d 81       	ldd	r22, Y+5	; 0x05
    490a:	7e 81       	ldd	r23, Y+6	; 0x06
    490c:	6e 30       	cpi	r22, 0x0E	; 14
    490e:	71 05       	cpc	r23, r1
    4910:	09 f4       	brne	.+2      	; 0x4914 <DIO_enuSetPinValue+0x6c>
    4912:	4b c0       	rjmp	.+150    	; 0x49aa <DIO_enuSetPinValue+0x102>
    4914:	8d 81       	ldd	r24, Y+5	; 0x05
    4916:	9e 81       	ldd	r25, Y+6	; 0x06
    4918:	8f 30       	cpi	r24, 0x0F	; 15
    491a:	91 05       	cpc	r25, r1
    491c:	09 f4       	brne	.+2      	; 0x4920 <DIO_enuSetPinValue+0x78>
    491e:	67 c0       	rjmp	.+206    	; 0x49ee <DIO_enuSetPinValue+0x146>
    4920:	87 c0       	rjmp	.+270    	; 0x4a30 <DIO_enuSetPinValue+0x188>
		{
		case DIO_u8GROUP_A:
			ASSIGN_BIT_VALUE( PORT_A , Copy_u8PinID , Copy_u8Value );
    4922:	ab e3       	ldi	r26, 0x3B	; 59
    4924:	b0 e0       	ldi	r27, 0x00	; 0
    4926:	eb e3       	ldi	r30, 0x3B	; 59
    4928:	f0 e0       	ldi	r31, 0x00	; 0
    492a:	80 81       	ld	r24, Z
    492c:	48 2f       	mov	r20, r24
    492e:	8b 81       	ldd	r24, Y+3	; 0x03
    4930:	28 2f       	mov	r18, r24
    4932:	30 e0       	ldi	r19, 0x00	; 0
    4934:	81 e0       	ldi	r24, 0x01	; 1
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	02 c0       	rjmp	.+4      	; 0x493e <DIO_enuSetPinValue+0x96>
    493a:	88 0f       	add	r24, r24
    493c:	99 1f       	adc	r25, r25
    493e:	2a 95       	dec	r18
    4940:	e2 f7       	brpl	.-8      	; 0x493a <DIO_enuSetPinValue+0x92>
    4942:	80 95       	com	r24
    4944:	48 23       	and	r20, r24
    4946:	8c 81       	ldd	r24, Y+4	; 0x04
    4948:	28 2f       	mov	r18, r24
    494a:	30 e0       	ldi	r19, 0x00	; 0
    494c:	8b 81       	ldd	r24, Y+3	; 0x03
    494e:	88 2f       	mov	r24, r24
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	b9 01       	movw	r22, r18
    4954:	02 c0       	rjmp	.+4      	; 0x495a <DIO_enuSetPinValue+0xb2>
    4956:	66 0f       	add	r22, r22
    4958:	77 1f       	adc	r23, r23
    495a:	8a 95       	dec	r24
    495c:	e2 f7       	brpl	.-8      	; 0x4956 <DIO_enuSetPinValue+0xae>
    495e:	cb 01       	movw	r24, r22
    4960:	84 2b       	or	r24, r20
    4962:	8c 93       	st	X, r24
    4964:	65 c0       	rjmp	.+202    	; 0x4a30 <DIO_enuSetPinValue+0x188>

			break;
		case DIO_u8GROUP_B:
			ASSIGN_BIT_VALUE( PORT_B , Copy_u8PinID , Copy_u8Value );
    4966:	a8 e3       	ldi	r26, 0x38	; 56
    4968:	b0 e0       	ldi	r27, 0x00	; 0
    496a:	e8 e3       	ldi	r30, 0x38	; 56
    496c:	f0 e0       	ldi	r31, 0x00	; 0
    496e:	80 81       	ld	r24, Z
    4970:	48 2f       	mov	r20, r24
    4972:	8b 81       	ldd	r24, Y+3	; 0x03
    4974:	28 2f       	mov	r18, r24
    4976:	30 e0       	ldi	r19, 0x00	; 0
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	02 c0       	rjmp	.+4      	; 0x4982 <DIO_enuSetPinValue+0xda>
    497e:	88 0f       	add	r24, r24
    4980:	99 1f       	adc	r25, r25
    4982:	2a 95       	dec	r18
    4984:	e2 f7       	brpl	.-8      	; 0x497e <DIO_enuSetPinValue+0xd6>
    4986:	80 95       	com	r24
    4988:	48 23       	and	r20, r24
    498a:	8c 81       	ldd	r24, Y+4	; 0x04
    498c:	28 2f       	mov	r18, r24
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	88 2f       	mov	r24, r24
    4994:	90 e0       	ldi	r25, 0x00	; 0
    4996:	b9 01       	movw	r22, r18
    4998:	02 c0       	rjmp	.+4      	; 0x499e <DIO_enuSetPinValue+0xf6>
    499a:	66 0f       	add	r22, r22
    499c:	77 1f       	adc	r23, r23
    499e:	8a 95       	dec	r24
    49a0:	e2 f7       	brpl	.-8      	; 0x499a <DIO_enuSetPinValue+0xf2>
    49a2:	cb 01       	movw	r24, r22
    49a4:	84 2b       	or	r24, r20
    49a6:	8c 93       	st	X, r24
    49a8:	43 c0       	rjmp	.+134    	; 0x4a30 <DIO_enuSetPinValue+0x188>

			break;
		case DIO_u8GROUP_C:
			ASSIGN_BIT_VALUE( PORT_C , Copy_u8PinID , Copy_u8Value );
    49aa:	a5 e3       	ldi	r26, 0x35	; 53
    49ac:	b0 e0       	ldi	r27, 0x00	; 0
    49ae:	e5 e3       	ldi	r30, 0x35	; 53
    49b0:	f0 e0       	ldi	r31, 0x00	; 0
    49b2:	80 81       	ld	r24, Z
    49b4:	48 2f       	mov	r20, r24
    49b6:	8b 81       	ldd	r24, Y+3	; 0x03
    49b8:	28 2f       	mov	r18, r24
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	02 c0       	rjmp	.+4      	; 0x49c6 <DIO_enuSetPinValue+0x11e>
    49c2:	88 0f       	add	r24, r24
    49c4:	99 1f       	adc	r25, r25
    49c6:	2a 95       	dec	r18
    49c8:	e2 f7       	brpl	.-8      	; 0x49c2 <DIO_enuSetPinValue+0x11a>
    49ca:	80 95       	com	r24
    49cc:	48 23       	and	r20, r24
    49ce:	8c 81       	ldd	r24, Y+4	; 0x04
    49d0:	28 2f       	mov	r18, r24
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	8b 81       	ldd	r24, Y+3	; 0x03
    49d6:	88 2f       	mov	r24, r24
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	b9 01       	movw	r22, r18
    49dc:	02 c0       	rjmp	.+4      	; 0x49e2 <DIO_enuSetPinValue+0x13a>
    49de:	66 0f       	add	r22, r22
    49e0:	77 1f       	adc	r23, r23
    49e2:	8a 95       	dec	r24
    49e4:	e2 f7       	brpl	.-8      	; 0x49de <DIO_enuSetPinValue+0x136>
    49e6:	cb 01       	movw	r24, r22
    49e8:	84 2b       	or	r24, r20
    49ea:	8c 93       	st	X, r24
    49ec:	21 c0       	rjmp	.+66     	; 0x4a30 <DIO_enuSetPinValue+0x188>
			break;
		case DIO_u8GROUP_D:
			ASSIGN_BIT_VALUE( PORT_D , Copy_u8PinID , Copy_u8Value );
    49ee:	a2 e3       	ldi	r26, 0x32	; 50
    49f0:	b0 e0       	ldi	r27, 0x00	; 0
    49f2:	e2 e3       	ldi	r30, 0x32	; 50
    49f4:	f0 e0       	ldi	r31, 0x00	; 0
    49f6:	80 81       	ld	r24, Z
    49f8:	48 2f       	mov	r20, r24
    49fa:	8b 81       	ldd	r24, Y+3	; 0x03
    49fc:	28 2f       	mov	r18, r24
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	02 c0       	rjmp	.+4      	; 0x4a0a <DIO_enuSetPinValue+0x162>
    4a06:	88 0f       	add	r24, r24
    4a08:	99 1f       	adc	r25, r25
    4a0a:	2a 95       	dec	r18
    4a0c:	e2 f7       	brpl	.-8      	; 0x4a06 <DIO_enuSetPinValue+0x15e>
    4a0e:	80 95       	com	r24
    4a10:	48 23       	and	r20, r24
    4a12:	8c 81       	ldd	r24, Y+4	; 0x04
    4a14:	28 2f       	mov	r18, r24
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1a:	88 2f       	mov	r24, r24
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	b9 01       	movw	r22, r18
    4a20:	02 c0       	rjmp	.+4      	; 0x4a26 <DIO_enuSetPinValue+0x17e>
    4a22:	66 0f       	add	r22, r22
    4a24:	77 1f       	adc	r23, r23
    4a26:	8a 95       	dec	r24
    4a28:	e2 f7       	brpl	.-8      	; 0x4a22 <DIO_enuSetPinValue+0x17a>
    4a2a:	cb 01       	movw	r24, r22
    4a2c:	84 2b       	or	r24, r20
    4a2e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    4a30:	19 82       	std	Y+1, r1	; 0x01
    4a32:	02 c0       	rjmp	.+4      	; 0x4a38 <DIO_enuSetPinValue+0x190>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    4a34:	82 e0       	ldi	r24, 0x02	; 2
    4a36:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    4a38:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a3a:	26 96       	adiw	r28, 0x06	; 6
    4a3c:	0f b6       	in	r0, 0x3f	; 63
    4a3e:	f8 94       	cli
    4a40:	de bf       	out	0x3e, r29	; 62
    4a42:	0f be       	out	0x3f, r0	; 63
    4a44:	cd bf       	out	0x3d, r28	; 61
    4a46:	cf 91       	pop	r28
    4a48:	df 91       	pop	r29
    4a4a:	08 95       	ret

00004a4c <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    4a4c:	df 93       	push	r29
    4a4e:	cf 93       	push	r28
    4a50:	00 d0       	rcall	.+0      	; 0x4a52 <DIO_enuTogglePinValue+0x6>
    4a52:	00 d0       	rcall	.+0      	; 0x4a54 <DIO_enuTogglePinValue+0x8>
    4a54:	0f 92       	push	r0
    4a56:	cd b7       	in	r28, 0x3d	; 61
    4a58:	de b7       	in	r29, 0x3e	; 62
    4a5a:	8a 83       	std	Y+2, r24	; 0x02
    4a5c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    4a62:	8a 81       	ldd	r24, Y+2	; 0x02
    4a64:	80 31       	cpi	r24, 0x10	; 16
    4a66:	08 f0       	brcs	.+2      	; 0x4a6a <DIO_enuTogglePinValue+0x1e>
    4a68:	75 c0       	rjmp	.+234    	; 0x4b54 <DIO_enuTogglePinValue+0x108>
    4a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a6c:	88 30       	cpi	r24, 0x08	; 8
    4a6e:	08 f0       	brcs	.+2      	; 0x4a72 <DIO_enuTogglePinValue+0x26>
    4a70:	71 c0       	rjmp	.+226    	; 0x4b54 <DIO_enuTogglePinValue+0x108>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    4a72:	8a 81       	ldd	r24, Y+2	; 0x02
    4a74:	28 2f       	mov	r18, r24
    4a76:	30 e0       	ldi	r19, 0x00	; 0
    4a78:	3d 83       	std	Y+5, r19	; 0x05
    4a7a:	2c 83       	std	Y+4, r18	; 0x04
    4a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a80:	8d 30       	cpi	r24, 0x0D	; 13
    4a82:	91 05       	cpc	r25, r1
    4a84:	51 f1       	breq	.+84     	; 0x4ada <DIO_enuTogglePinValue+0x8e>
    4a86:	2c 81       	ldd	r18, Y+4	; 0x04
    4a88:	3d 81       	ldd	r19, Y+5	; 0x05
    4a8a:	2e 30       	cpi	r18, 0x0E	; 14
    4a8c:	31 05       	cpc	r19, r1
    4a8e:	34 f4       	brge	.+12     	; 0x4a9c <DIO_enuTogglePinValue+0x50>
    4a90:	8c 81       	ldd	r24, Y+4	; 0x04
    4a92:	9d 81       	ldd	r25, Y+5	; 0x05
    4a94:	8c 30       	cpi	r24, 0x0C	; 12
    4a96:	91 05       	cpc	r25, r1
    4a98:	61 f0       	breq	.+24     	; 0x4ab2 <DIO_enuTogglePinValue+0x66>
    4a9a:	5a c0       	rjmp	.+180    	; 0x4b50 <DIO_enuTogglePinValue+0x104>
    4a9c:	2c 81       	ldd	r18, Y+4	; 0x04
    4a9e:	3d 81       	ldd	r19, Y+5	; 0x05
    4aa0:	2e 30       	cpi	r18, 0x0E	; 14
    4aa2:	31 05       	cpc	r19, r1
    4aa4:	71 f1       	breq	.+92     	; 0x4b02 <DIO_enuTogglePinValue+0xb6>
    4aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    4aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    4aaa:	8f 30       	cpi	r24, 0x0F	; 15
    4aac:	91 05       	cpc	r25, r1
    4aae:	e9 f1       	breq	.+122    	; 0x4b2a <DIO_enuTogglePinValue+0xde>
    4ab0:	4f c0       	rjmp	.+158    	; 0x4b50 <DIO_enuTogglePinValue+0x104>
		{
		case DIO_u8GROUP_A:
			TOG_BIT( PORT_A , Copy_u8PinID );
    4ab2:	ab e3       	ldi	r26, 0x3B	; 59
    4ab4:	b0 e0       	ldi	r27, 0x00	; 0
    4ab6:	eb e3       	ldi	r30, 0x3B	; 59
    4ab8:	f0 e0       	ldi	r31, 0x00	; 0
    4aba:	80 81       	ld	r24, Z
    4abc:	48 2f       	mov	r20, r24
    4abe:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac0:	28 2f       	mov	r18, r24
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	90 e0       	ldi	r25, 0x00	; 0
    4ac8:	02 2e       	mov	r0, r18
    4aca:	02 c0       	rjmp	.+4      	; 0x4ad0 <DIO_enuTogglePinValue+0x84>
    4acc:	88 0f       	add	r24, r24
    4ace:	99 1f       	adc	r25, r25
    4ad0:	0a 94       	dec	r0
    4ad2:	e2 f7       	brpl	.-8      	; 0x4acc <DIO_enuTogglePinValue+0x80>
    4ad4:	84 27       	eor	r24, r20
    4ad6:	8c 93       	st	X, r24
    4ad8:	3b c0       	rjmp	.+118    	; 0x4b50 <DIO_enuTogglePinValue+0x104>
			break;
		case DIO_u8GROUP_B:
			TOG_BIT( PORT_A , Copy_u8PinID );
    4ada:	ab e3       	ldi	r26, 0x3B	; 59
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	eb e3       	ldi	r30, 0x3B	; 59
    4ae0:	f0 e0       	ldi	r31, 0x00	; 0
    4ae2:	80 81       	ld	r24, Z
    4ae4:	48 2f       	mov	r20, r24
    4ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ae8:	28 2f       	mov	r18, r24
    4aea:	30 e0       	ldi	r19, 0x00	; 0
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	02 2e       	mov	r0, r18
    4af2:	02 c0       	rjmp	.+4      	; 0x4af8 <DIO_enuTogglePinValue+0xac>
    4af4:	88 0f       	add	r24, r24
    4af6:	99 1f       	adc	r25, r25
    4af8:	0a 94       	dec	r0
    4afa:	e2 f7       	brpl	.-8      	; 0x4af4 <DIO_enuTogglePinValue+0xa8>
    4afc:	84 27       	eor	r24, r20
    4afe:	8c 93       	st	X, r24
    4b00:	27 c0       	rjmp	.+78     	; 0x4b50 <DIO_enuTogglePinValue+0x104>
			break;
		case DIO_u8GROUP_C:
			TOG_BIT( PORT_A , Copy_u8PinID );
    4b02:	ab e3       	ldi	r26, 0x3B	; 59
    4b04:	b0 e0       	ldi	r27, 0x00	; 0
    4b06:	eb e3       	ldi	r30, 0x3B	; 59
    4b08:	f0 e0       	ldi	r31, 0x00	; 0
    4b0a:	80 81       	ld	r24, Z
    4b0c:	48 2f       	mov	r20, r24
    4b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b10:	28 2f       	mov	r18, r24
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	81 e0       	ldi	r24, 0x01	; 1
    4b16:	90 e0       	ldi	r25, 0x00	; 0
    4b18:	02 2e       	mov	r0, r18
    4b1a:	02 c0       	rjmp	.+4      	; 0x4b20 <DIO_enuTogglePinValue+0xd4>
    4b1c:	88 0f       	add	r24, r24
    4b1e:	99 1f       	adc	r25, r25
    4b20:	0a 94       	dec	r0
    4b22:	e2 f7       	brpl	.-8      	; 0x4b1c <DIO_enuTogglePinValue+0xd0>
    4b24:	84 27       	eor	r24, r20
    4b26:	8c 93       	st	X, r24
    4b28:	13 c0       	rjmp	.+38     	; 0x4b50 <DIO_enuTogglePinValue+0x104>
			break;
		case DIO_u8GROUP_D:
			TOG_BIT( PORT_A , Copy_u8PinID );
    4b2a:	ab e3       	ldi	r26, 0x3B	; 59
    4b2c:	b0 e0       	ldi	r27, 0x00	; 0
    4b2e:	eb e3       	ldi	r30, 0x3B	; 59
    4b30:	f0 e0       	ldi	r31, 0x00	; 0
    4b32:	80 81       	ld	r24, Z
    4b34:	48 2f       	mov	r20, r24
    4b36:	8b 81       	ldd	r24, Y+3	; 0x03
    4b38:	28 2f       	mov	r18, r24
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	81 e0       	ldi	r24, 0x01	; 1
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	02 2e       	mov	r0, r18
    4b42:	02 c0       	rjmp	.+4      	; 0x4b48 <DIO_enuTogglePinValue+0xfc>
    4b44:	88 0f       	add	r24, r24
    4b46:	99 1f       	adc	r25, r25
    4b48:	0a 94       	dec	r0
    4b4a:	e2 f7       	brpl	.-8      	; 0x4b44 <DIO_enuTogglePinValue+0xf8>
    4b4c:	84 27       	eor	r24, r20
    4b4e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    4b50:	19 82       	std	Y+1, r1	; 0x01
    4b52:	02 c0       	rjmp	.+4      	; 0x4b58 <DIO_enuTogglePinValue+0x10c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    4b54:	82 e0       	ldi	r24, 0x02	; 2
    4b56:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    4b58:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b5a:	0f 90       	pop	r0
    4b5c:	0f 90       	pop	r0
    4b5e:	0f 90       	pop	r0
    4b60:	0f 90       	pop	r0
    4b62:	0f 90       	pop	r0
    4b64:	cf 91       	pop	r28
    4b66:	df 91       	pop	r29
    4b68:	08 95       	ret

00004b6a <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 *Copy_pu8Value)
{
    4b6a:	df 93       	push	r29
    4b6c:	cf 93       	push	r28
    4b6e:	cd b7       	in	r28, 0x3d	; 61
    4b70:	de b7       	in	r29, 0x3e	; 62
    4b72:	27 97       	sbiw	r28, 0x07	; 7
    4b74:	0f b6       	in	r0, 0x3f	; 63
    4b76:	f8 94       	cli
    4b78:	de bf       	out	0x3e, r29	; 62
    4b7a:	0f be       	out	0x3f, r0	; 63
    4b7c:	cd bf       	out	0x3d, r28	; 61
    4b7e:	8a 83       	std	Y+2, r24	; 0x02
    4b80:	6b 83       	std	Y+3, r22	; 0x03
    4b82:	5d 83       	std	Y+5, r21	; 0x05
    4b84:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    4b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b8c:	9d 81       	ldd	r25, Y+5	; 0x05
    4b8e:	00 97       	sbiw	r24, 0x00	; 0
    4b90:	09 f4       	brne	.+2      	; 0x4b94 <DIO_enuGetPinValue+0x2a>
    4b92:	7d c0       	rjmp	.+250    	; 0x4c8e <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    4b94:	8a 81       	ldd	r24, Y+2	; 0x02
    4b96:	80 31       	cpi	r24, 0x10	; 16
    4b98:	08 f0       	brcs	.+2      	; 0x4b9c <DIO_enuGetPinValue+0x32>
    4b9a:	76 c0       	rjmp	.+236    	; 0x4c88 <DIO_enuGetPinValue+0x11e>
    4b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9e:	88 30       	cpi	r24, 0x08	; 8
    4ba0:	08 f0       	brcs	.+2      	; 0x4ba4 <DIO_enuGetPinValue+0x3a>
    4ba2:	72 c0       	rjmp	.+228    	; 0x4c88 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    4ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba6:	28 2f       	mov	r18, r24
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	3f 83       	std	Y+7, r19	; 0x07
    4bac:	2e 83       	std	Y+6, r18	; 0x06
    4bae:	4e 81       	ldd	r20, Y+6	; 0x06
    4bb0:	5f 81       	ldd	r21, Y+7	; 0x07
    4bb2:	4d 30       	cpi	r20, 0x0D	; 13
    4bb4:	51 05       	cpc	r21, r1
    4bb6:	59 f1       	breq	.+86     	; 0x4c0e <DIO_enuGetPinValue+0xa4>
    4bb8:	8e 81       	ldd	r24, Y+6	; 0x06
    4bba:	9f 81       	ldd	r25, Y+7	; 0x07
    4bbc:	8e 30       	cpi	r24, 0x0E	; 14
    4bbe:	91 05       	cpc	r25, r1
    4bc0:	34 f4       	brge	.+12     	; 0x4bce <DIO_enuGetPinValue+0x64>
    4bc2:	2e 81       	ldd	r18, Y+6	; 0x06
    4bc4:	3f 81       	ldd	r19, Y+7	; 0x07
    4bc6:	2c 30       	cpi	r18, 0x0C	; 12
    4bc8:	31 05       	cpc	r19, r1
    4bca:	69 f0       	breq	.+26     	; 0x4be6 <DIO_enuGetPinValue+0x7c>
    4bcc:	5b c0       	rjmp	.+182    	; 0x4c84 <DIO_enuGetPinValue+0x11a>
    4bce:	4e 81       	ldd	r20, Y+6	; 0x06
    4bd0:	5f 81       	ldd	r21, Y+7	; 0x07
    4bd2:	4e 30       	cpi	r20, 0x0E	; 14
    4bd4:	51 05       	cpc	r21, r1
    4bd6:	79 f1       	breq	.+94     	; 0x4c36 <DIO_enuGetPinValue+0xcc>
    4bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    4bda:	9f 81       	ldd	r25, Y+7	; 0x07
    4bdc:	8f 30       	cpi	r24, 0x0F	; 15
    4bde:	91 05       	cpc	r25, r1
    4be0:	09 f4       	brne	.+2      	; 0x4be4 <DIO_enuGetPinValue+0x7a>
    4be2:	3d c0       	rjmp	.+122    	; 0x4c5e <DIO_enuGetPinValue+0xf4>
    4be4:	4f c0       	rjmp	.+158    	; 0x4c84 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = IS_BIT( PIN_A , Copy_u8PinID ) ;
    4be6:	e9 e3       	ldi	r30, 0x39	; 57
    4be8:	f0 e0       	ldi	r31, 0x00	; 0
    4bea:	80 81       	ld	r24, Z
    4bec:	28 2f       	mov	r18, r24
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf2:	88 2f       	mov	r24, r24
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	a9 01       	movw	r20, r18
    4bf8:	02 c0       	rjmp	.+4      	; 0x4bfe <DIO_enuGetPinValue+0x94>
    4bfa:	55 95       	asr	r21
    4bfc:	47 95       	ror	r20
    4bfe:	8a 95       	dec	r24
    4c00:	e2 f7       	brpl	.-8      	; 0x4bfa <DIO_enuGetPinValue+0x90>
    4c02:	ca 01       	movw	r24, r20
    4c04:	81 70       	andi	r24, 0x01	; 1
    4c06:	ec 81       	ldd	r30, Y+4	; 0x04
    4c08:	fd 81       	ldd	r31, Y+5	; 0x05
    4c0a:	80 83       	st	Z, r24
    4c0c:	3b c0       	rjmp	.+118    	; 0x4c84 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = IS_BIT( PIN_B , Copy_u8PinID ) ;
    4c0e:	e6 e3       	ldi	r30, 0x36	; 54
    4c10:	f0 e0       	ldi	r31, 0x00	; 0
    4c12:	80 81       	ld	r24, Z
    4c14:	28 2f       	mov	r18, r24
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1a:	88 2f       	mov	r24, r24
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	a9 01       	movw	r20, r18
    4c20:	02 c0       	rjmp	.+4      	; 0x4c26 <DIO_enuGetPinValue+0xbc>
    4c22:	55 95       	asr	r21
    4c24:	47 95       	ror	r20
    4c26:	8a 95       	dec	r24
    4c28:	e2 f7       	brpl	.-8      	; 0x4c22 <DIO_enuGetPinValue+0xb8>
    4c2a:	ca 01       	movw	r24, r20
    4c2c:	81 70       	andi	r24, 0x01	; 1
    4c2e:	ec 81       	ldd	r30, Y+4	; 0x04
    4c30:	fd 81       	ldd	r31, Y+5	; 0x05
    4c32:	80 83       	st	Z, r24
    4c34:	27 c0       	rjmp	.+78     	; 0x4c84 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = IS_BIT( PIN_C , Copy_u8PinID ) ;
    4c36:	e3 e3       	ldi	r30, 0x33	; 51
    4c38:	f0 e0       	ldi	r31, 0x00	; 0
    4c3a:	80 81       	ld	r24, Z
    4c3c:	28 2f       	mov	r18, r24
    4c3e:	30 e0       	ldi	r19, 0x00	; 0
    4c40:	8b 81       	ldd	r24, Y+3	; 0x03
    4c42:	88 2f       	mov	r24, r24
    4c44:	90 e0       	ldi	r25, 0x00	; 0
    4c46:	a9 01       	movw	r20, r18
    4c48:	02 c0       	rjmp	.+4      	; 0x4c4e <DIO_enuGetPinValue+0xe4>
    4c4a:	55 95       	asr	r21
    4c4c:	47 95       	ror	r20
    4c4e:	8a 95       	dec	r24
    4c50:	e2 f7       	brpl	.-8      	; 0x4c4a <DIO_enuGetPinValue+0xe0>
    4c52:	ca 01       	movw	r24, r20
    4c54:	81 70       	andi	r24, 0x01	; 1
    4c56:	ec 81       	ldd	r30, Y+4	; 0x04
    4c58:	fd 81       	ldd	r31, Y+5	; 0x05
    4c5a:	80 83       	st	Z, r24
    4c5c:	13 c0       	rjmp	.+38     	; 0x4c84 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = IS_BIT( PIN_D , Copy_u8PinID ) ;
    4c5e:	e0 e3       	ldi	r30, 0x30	; 48
    4c60:	f0 e0       	ldi	r31, 0x00	; 0
    4c62:	80 81       	ld	r24, Z
    4c64:	28 2f       	mov	r18, r24
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	8b 81       	ldd	r24, Y+3	; 0x03
    4c6a:	88 2f       	mov	r24, r24
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	a9 01       	movw	r20, r18
    4c70:	02 c0       	rjmp	.+4      	; 0x4c76 <DIO_enuGetPinValue+0x10c>
    4c72:	55 95       	asr	r21
    4c74:	47 95       	ror	r20
    4c76:	8a 95       	dec	r24
    4c78:	e2 f7       	brpl	.-8      	; 0x4c72 <DIO_enuGetPinValue+0x108>
    4c7a:	ca 01       	movw	r24, r20
    4c7c:	81 70       	andi	r24, 0x01	; 1
    4c7e:	ec 81       	ldd	r30, Y+4	; 0x04
    4c80:	fd 81       	ldd	r31, Y+5	; 0x05
    4c82:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    4c84:	19 82       	std	Y+1, r1	; 0x01
    4c86:	05 c0       	rjmp	.+10     	; 0x4c92 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    4c88:	82 e0       	ldi	r24, 0x02	; 2
    4c8a:	89 83       	std	Y+1, r24	; 0x01
    4c8c:	02 c0       	rjmp	.+4      	; 0x4c92 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4c8e:	83 e0       	ldi	r24, 0x03	; 3
    4c90:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    4c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c94:	27 96       	adiw	r28, 0x07	; 7
    4c96:	0f b6       	in	r0, 0x3f	; 63
    4c98:	f8 94       	cli
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	0f be       	out	0x3f, r0	; 63
    4c9e:	cd bf       	out	0x3d, r28	; 61
    4ca0:	cf 91       	pop	r28
    4ca2:	df 91       	pop	r29
    4ca4:	08 95       	ret

00004ca6 <ADC_enuInit>:

static void(*ADC_pFunISRFun)(void) = NULL ;


ES_t ADC_enuInit(void)
{
    4ca6:	df 93       	push	r29
    4ca8:	cf 93       	push	r28
    4caa:	0f 92       	push	r0
    4cac:	cd b7       	in	r28, 0x3d	; 61
    4cae:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4cb0:	81 e0       	ldi	r24, 0x01	; 1
    4cb2:	89 83       	std	Y+1, r24	; 0x01

	//////////////////////////////////
	// 	Setting Prescalar Factor	//
	//////////////////////////////////
	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    4cb4:	a6 e2       	ldi	r26, 0x26	; 38
    4cb6:	b0 e0       	ldi	r27, 0x00	; 0
    4cb8:	e6 e2       	ldi	r30, 0x26	; 38
    4cba:	f0 e0       	ldi	r31, 0x00	; 0
    4cbc:	80 81       	ld	r24, Z
    4cbe:	88 7f       	andi	r24, 0xF8	; 248
    4cc0:	8c 93       	st	X, r24
#if ( ADC_PRES >= ADC_PRES_2 && ADC_PRES <= ADC_PRES_128 )
	ADCSRA |= ( (ADC_PRES - ADC_PRES_0 ) << ADC_PRE_SCALAR_BITS );
    4cc2:	a6 e2       	ldi	r26, 0x26	; 38
    4cc4:	b0 e0       	ldi	r27, 0x00	; 0
    4cc6:	e6 e2       	ldi	r30, 0x26	; 38
    4cc8:	f0 e0       	ldi	r31, 0x00	; 0
    4cca:	80 81       	ld	r24, Z
    4ccc:	86 60       	ori	r24, 0x06	; 6
    4cce:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	// Setting Reference Voltage	//
	//////////////////////////////////
	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    4cd0:	a7 e2       	ldi	r26, 0x27	; 39
    4cd2:	b0 e0       	ldi	r27, 0x00	; 0
    4cd4:	e7 e2       	ldi	r30, 0x27	; 39
    4cd6:	f0 e0       	ldi	r31, 0x00	; 0
    4cd8:	80 81       	ld	r24, Z
    4cda:	8f 73       	andi	r24, 0x3F	; 63
    4cdc:	8c 93       	st	X, r24
#if ( ADC_VREF >= AREF_REF && ADC_VREF <= INTERNAL_REF )
	ADMUX |= ( (ADC_VREF - AREF_REF) << ADC_REF_SEL_BITS);
    4cde:	a7 e2       	ldi	r26, 0x27	; 39
    4ce0:	b0 e0       	ldi	r27, 0x00	; 0
    4ce2:	e7 e2       	ldi	r30, 0x27	; 39
    4ce4:	f0 e0       	ldi	r31, 0x00	; 0
    4ce6:	80 81       	ld	r24, Z
    4ce8:	80 68       	ori	r24, 0x80	; 128
    4cea:	8c 93       	st	X, r24

	//////////////////////////////////////
	// Setting Output Adjust Direction	//
	//////////////////////////////////////
#if ( ADC_ADJUST == RIGHT_ADJUST )
	CLR_BIT( ADMUX , ADLAR_BIT );
    4cec:	a7 e2       	ldi	r26, 0x27	; 39
    4cee:	b0 e0       	ldi	r27, 0x00	; 0
    4cf0:	e7 e2       	ldi	r30, 0x27	; 39
    4cf2:	f0 e0       	ldi	r31, 0x00	; 0
    4cf4:	80 81       	ld	r24, Z
    4cf6:	8f 7d       	andi	r24, 0xDF	; 223
    4cf8:	8c 93       	st	X, r24
#endif

	//////////////////////////////////////
	//	 Selecting Initial Channel		//
	//////////////////////////////////////
	ADMUX &= ~(ADC_CH_SEL_BITS_MASK);
    4cfa:	a7 e2       	ldi	r26, 0x27	; 39
    4cfc:	b0 e0       	ldi	r27, 0x00	; 0
    4cfe:	e7 e2       	ldi	r30, 0x27	; 39
    4d00:	f0 e0       	ldi	r31, 0x00	; 0
    4d02:	80 81       	ld	r24, Z
    4d04:	80 7e       	andi	r24, 0xE0	; 224
    4d06:	8c 93       	st	X, r24
#if ( ADC_INIT_CHANNEL >= CH_00 && ADC_INIT_CHANNEL <= CH_31 )
	ADMUX |= ( (ADC_INIT_CHANNEL - CH_00) << ADC_CH_SEL_BITS );
    4d08:	a7 e2       	ldi	r26, 0x27	; 39
    4d0a:	b0 e0       	ldi	r27, 0x00	; 0
    4d0c:	e7 e2       	ldi	r30, 0x27	; 39
    4d0e:	f0 e0       	ldi	r31, 0x00	; 0
    4d10:	80 81       	ld	r24, Z
    4d12:	8c 93       	st	X, r24
	//	 Setting ADC Interrupt Mode		//
	//////////////////////////////////////
#if ( ADC_INTERRUPT_MODE == ADC_POLLING )
	CLR_BIT( ADCSRA , ADC_INT_ENABLE_BIT );
#elif ( ADC_INTERRUPT_MODE == ADC_INTERRUPT )
	SET_BIT( ADCSRA , ADC_INT_ENABLE_BIT );
    4d14:	a6 e2       	ldi	r26, 0x26	; 38
    4d16:	b0 e0       	ldi	r27, 0x00	; 0
    4d18:	e6 e2       	ldi	r30, 0x26	; 38
    4d1a:	f0 e0       	ldi	r31, 0x00	; 0
    4d1c:	80 81       	ld	r24, Z
    4d1e:	88 60       	ori	r24, 0x08	; 8
    4d20:	8c 93       	st	X, r24
	///////////////////////////////////
	// Selecting ADC Trigger  Source //
	///////////////////////////////////
#if ( ADC_TRIGGER_SOURCE >= FREE_RUNNING && ADC_TRIGGER_SOURCE <= TIMER1_CAPT_EVENT )

	SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    4d22:	a0 e5       	ldi	r26, 0x50	; 80
    4d24:	b0 e0       	ldi	r27, 0x00	; 0
    4d26:	e0 e5       	ldi	r30, 0x50	; 80
    4d28:	f0 e0       	ldi	r31, 0x00	; 0
    4d2a:	80 81       	ld	r24, Z
    4d2c:	88 7f       	andi	r24, 0xF8	; 248
    4d2e:	8c 93       	st	X, r24

	SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING) << ADC_TRIGGER_SEL_BITS );
    4d30:	a0 e5       	ldi	r26, 0x50	; 80
    4d32:	b0 e0       	ldi	r27, 0x00	; 0
    4d34:	e0 e5       	ldi	r30, 0x50	; 80
    4d36:	f0 e0       	ldi	r31, 0x00	; 0
    4d38:	80 81       	ld	r24, Z
    4d3a:	8e 6d       	ori	r24, 0xDE	; 222
    4d3c:	8c 93       	st	X, r24
	//////////////////////////////////
	// Selecting ADC Trigger Mode	//
	//////////////////////////////////
#if ( ADC_TRIGGER_MODE == AUTO_TRIGGER || ADC_TRIGGER_MODE == SINGLE_TRIGGER )

	CLR_BIT( ADCSRA , ADC_AUTO_TRIGGER_EN_BIT );
    4d3e:	a6 e2       	ldi	r26, 0x26	; 38
    4d40:	b0 e0       	ldi	r27, 0x00	; 0
    4d42:	e6 e2       	ldi	r30, 0x26	; 38
    4d44:	f0 e0       	ldi	r31, 0x00	; 0
    4d46:	80 81       	ld	r24, Z
    4d48:	8f 7d       	andi	r24, 0xDF	; 223
    4d4a:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	//	 ENABLE ADC Peripheral		//
	//////////////////////////////////
	SET_BIT( ADCSRA , ADC_ENABLE_BIT );
    4d4c:	a6 e2       	ldi	r26, 0x26	; 38
    4d4e:	b0 e0       	ldi	r27, 0x00	; 0
    4d50:	e6 e2       	ldi	r30, 0x26	; 38
    4d52:	f0 e0       	ldi	r31, 0x00	; 0
    4d54:	80 81       	ld	r24, Z
    4d56:	80 68       	ori	r24, 0x80	; 128
    4d58:	8c 93       	st	X, r24

	if( Local_enuErrorState != ES_OUT_RANGE)
    4d5a:	89 81       	ldd	r24, Y+1	; 0x01
    4d5c:	82 30       	cpi	r24, 0x02	; 2
    4d5e:	09 f0       	breq	.+2      	; 0x4d62 <ADC_enuInit+0xbc>
		Local_enuErrorState = ES_OK ;
    4d60:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    4d62:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d64:	0f 90       	pop	r0
    4d66:	cf 91       	pop	r28
    4d68:	df 91       	pop	r29
    4d6a:	08 95       	ret

00004d6c <ADC_enuSetPreScalar>:

ES_t ADC_enuSetPreScalar(u8 Copy_u8PreScalarID)
{
    4d6c:	df 93       	push	r29
    4d6e:	cf 93       	push	r28
    4d70:	00 d0       	rcall	.+0      	; 0x4d72 <ADC_enuSetPreScalar+0x6>
    4d72:	cd b7       	in	r28, 0x3d	; 61
    4d74:	de b7       	in	r29, 0x3e	; 62
    4d76:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    4d7c:	a6 e2       	ldi	r26, 0x26	; 38
    4d7e:	b0 e0       	ldi	r27, 0x00	; 0
    4d80:	e6 e2       	ldi	r30, 0x26	; 38
    4d82:	f0 e0       	ldi	r31, 0x00	; 0
    4d84:	80 81       	ld	r24, Z
    4d86:	88 7f       	andi	r24, 0xF8	; 248
    4d88:	8c 93       	st	X, r24

	if ( Copy_u8PreScalarID >= ADC_PRES_2 && Copy_u8PreScalarID <= ADC_PRES_128 )
    4d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8c:	89 37       	cpi	r24, 0x79	; 121
    4d8e:	78 f0       	brcs	.+30     	; 0x4dae <ADC_enuSetPreScalar+0x42>
    4d90:	8a 81       	ldd	r24, Y+2	; 0x02
    4d92:	88 23       	and	r24, r24
    4d94:	64 f0       	brlt	.+24     	; 0x4dae <ADC_enuSetPreScalar+0x42>
	{
		ADCSRA |= ( (Copy_u8PreScalarID - ADC_PRES_0 ) << ADC_PRE_SCALAR_BITS );
    4d96:	a6 e2       	ldi	r26, 0x26	; 38
    4d98:	b0 e0       	ldi	r27, 0x00	; 0
    4d9a:	e6 e2       	ldi	r30, 0x26	; 38
    4d9c:	f0 e0       	ldi	r31, 0x00	; 0
    4d9e:	80 81       	ld	r24, Z
    4da0:	98 2f       	mov	r25, r24
    4da2:	8a 81       	ldd	r24, Y+2	; 0x02
    4da4:	88 57       	subi	r24, 0x78	; 120
    4da6:	89 2b       	or	r24, r25
    4da8:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    4daa:	19 82       	std	Y+1, r1	; 0x01
    4dac:	02 c0       	rjmp	.+4      	; 0x4db2 <ADC_enuSetPreScalar+0x46>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    4dae:	82 e0       	ldi	r24, 0x02	; 2
    4db0:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4db4:	0f 90       	pop	r0
    4db6:	0f 90       	pop	r0
    4db8:	cf 91       	pop	r28
    4dba:	df 91       	pop	r29
    4dbc:	08 95       	ret

00004dbe <ADC_enuSetRefVolt>:

ES_t ADC_enuSetRefVolt(u8 Copy_u8RefVoltID)
{
    4dbe:	df 93       	push	r29
    4dc0:	cf 93       	push	r28
    4dc2:	00 d0       	rcall	.+0      	; 0x4dc4 <ADC_enuSetRefVolt+0x6>
    4dc4:	cd b7       	in	r28, 0x3d	; 61
    4dc6:	de b7       	in	r29, 0x3e	; 62
    4dc8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    4dce:	a7 e2       	ldi	r26, 0x27	; 39
    4dd0:	b0 e0       	ldi	r27, 0x00	; 0
    4dd2:	e7 e2       	ldi	r30, 0x27	; 39
    4dd4:	f0 e0       	ldi	r31, 0x00	; 0
    4dd6:	80 81       	ld	r24, Z
    4dd8:	8f 73       	andi	r24, 0x3F	; 63
    4dda:	8c 93       	st	X, r24

	if ( Copy_u8RefVoltID >= AREF_REF && Copy_u8RefVoltID <= INTERNAL_REF )
    4ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dde:	88 23       	and	r24, r24
    4de0:	dc f4       	brge	.+54     	; 0x4e18 <ADC_enuSetRefVolt+0x5a>
    4de2:	8a 81       	ldd	r24, Y+2	; 0x02
    4de4:	83 38       	cpi	r24, 0x83	; 131
    4de6:	c0 f4       	brcc	.+48     	; 0x4e18 <ADC_enuSetRefVolt+0x5a>
	{
		ADMUX |= ( (Copy_u8RefVoltID - AREF_REF) << ADC_REF_SEL_BITS);
    4de8:	a7 e2       	ldi	r26, 0x27	; 39
    4dea:	b0 e0       	ldi	r27, 0x00	; 0
    4dec:	e7 e2       	ldi	r30, 0x27	; 39
    4dee:	f0 e0       	ldi	r31, 0x00	; 0
    4df0:	80 81       	ld	r24, Z
    4df2:	28 2f       	mov	r18, r24
    4df4:	8a 81       	ldd	r24, Y+2	; 0x02
    4df6:	88 2f       	mov	r24, r24
    4df8:	90 e0       	ldi	r25, 0x00	; 0
    4dfa:	80 58       	subi	r24, 0x80	; 128
    4dfc:	90 40       	sbci	r25, 0x00	; 0
    4dfe:	00 24       	eor	r0, r0
    4e00:	96 95       	lsr	r25
    4e02:	87 95       	ror	r24
    4e04:	07 94       	ror	r0
    4e06:	96 95       	lsr	r25
    4e08:	87 95       	ror	r24
    4e0a:	07 94       	ror	r0
    4e0c:	98 2f       	mov	r25, r24
    4e0e:	80 2d       	mov	r24, r0
    4e10:	82 2b       	or	r24, r18
    4e12:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    4e14:	19 82       	std	Y+1, r1	; 0x01
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <ADC_enuSetRefVolt+0x5e>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    4e18:	82 e0       	ldi	r24, 0x02	; 2
    4e1a:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    4e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e1e:	0f 90       	pop	r0
    4e20:	0f 90       	pop	r0
    4e22:	cf 91       	pop	r28
    4e24:	df 91       	pop	r29
    4e26:	08 95       	ret

00004e28 <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    4e28:	df 93       	push	r29
    4e2a:	cf 93       	push	r28
    4e2c:	00 d0       	rcall	.+0      	; 0x4e2e <ADC_enuSelectChannel+0x6>
    4e2e:	cd b7       	in	r28, 0x3d	; 61
    4e30:	de b7       	in	r29, 0x3e	; 62
    4e32:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4e34:	81 e0       	ldi	r24, 0x01	; 1
    4e36:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ChannelID >= CH_00 && Copy_u8ChannelID <= CH_31 )
    4e38:	8a 81       	ldd	r24, Y+2	; 0x02
    4e3a:	85 38       	cpi	r24, 0x85	; 133
    4e3c:	b0 f0       	brcs	.+44     	; 0x4e6a <ADC_enuSelectChannel+0x42>
    4e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e40:	85 3a       	cpi	r24, 0xA5	; 165
    4e42:	98 f4       	brcc	.+38     	; 0x4e6a <ADC_enuSelectChannel+0x42>
	{
		ADMUX &= ~( ADC_CH_SEL_BITS_MASK);
    4e44:	a7 e2       	ldi	r26, 0x27	; 39
    4e46:	b0 e0       	ldi	r27, 0x00	; 0
    4e48:	e7 e2       	ldi	r30, 0x27	; 39
    4e4a:	f0 e0       	ldi	r31, 0x00	; 0
    4e4c:	80 81       	ld	r24, Z
    4e4e:	80 7e       	andi	r24, 0xE0	; 224
    4e50:	8c 93       	st	X, r24
		ADMUX |= ( ( Copy_u8ChannelID - CH_00 ) << ADC_CH_SEL_BITS );
    4e52:	a7 e2       	ldi	r26, 0x27	; 39
    4e54:	b0 e0       	ldi	r27, 0x00	; 0
    4e56:	e7 e2       	ldi	r30, 0x27	; 39
    4e58:	f0 e0       	ldi	r31, 0x00	; 0
    4e5a:	80 81       	ld	r24, Z
    4e5c:	98 2f       	mov	r25, r24
    4e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e60:	85 58       	subi	r24, 0x85	; 133
    4e62:	89 2b       	or	r24, r25
    4e64:	8c 93       	st	X, r24
//		ADMUX |= (Copy_u8ChannelID << ADC_CH_SEL_BITS);
		Local_enuErrorState = ES_OK ;
    4e66:	19 82       	std	Y+1, r1	; 0x01
    4e68:	02 c0       	rjmp	.+4      	; 0x4e6e <ADC_enuSelectChannel+0x46>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    4e6a:	82 e0       	ldi	r24, 0x02	; 2
    4e6c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4e6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e70:	0f 90       	pop	r0
    4e72:	0f 90       	pop	r0
    4e74:	cf 91       	pop	r28
    4e76:	df 91       	pop	r29
    4e78:	08 95       	ret

00004e7a <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    4e7a:	df 93       	push	r29
    4e7c:	cf 93       	push	r28
    4e7e:	cd b7       	in	r28, 0x3d	; 61
    4e80:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( ADCSRA , ADC_START_CONVERSION_BIT );
    4e82:	a6 e2       	ldi	r26, 0x26	; 38
    4e84:	b0 e0       	ldi	r27, 0x00	; 0
    4e86:	e6 e2       	ldi	r30, 0x26	; 38
    4e88:	f0 e0       	ldi	r31, 0x00	; 0
    4e8a:	80 81       	ld	r24, Z
    4e8c:	80 64       	ori	r24, 0x40	; 64
    4e8e:	8c 93       	st	X, r24

	return ES_OK;
    4e90:	80 e0       	ldi	r24, 0x00	; 0
}
    4e92:	cf 91       	pop	r28
    4e94:	df 91       	pop	r29
    4e96:	08 95       	ret

00004e98 <ADC_enuEnableAutoTrigger>:

ES_t ADC_enuEnableAutoTrigger(u8 Copy_u8TriggerSource)
{
    4e98:	df 93       	push	r29
    4e9a:	cf 93       	push	r28
    4e9c:	00 d0       	rcall	.+0      	; 0x4e9e <ADC_enuEnableAutoTrigger+0x6>
    4e9e:	cd b7       	in	r28, 0x3d	; 61
    4ea0:	de b7       	in	r29, 0x3e	; 62
    4ea2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4ea4:	81 e0       	ldi	r24, 0x01	; 1
    4ea6:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8TriggerSource >= FREE_RUNNING && Copy_u8TriggerSource <= TIMER1_CAPT_EVENT )
    4ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eaa:	87 3a       	cpi	r24, 0xA7	; 167
    4eac:	20 f1       	brcs	.+72     	; 0x4ef6 <ADC_enuEnableAutoTrigger+0x5e>
    4eae:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb0:	8f 3a       	cpi	r24, 0xAF	; 175
    4eb2:	08 f5       	brcc	.+66     	; 0x4ef6 <ADC_enuEnableAutoTrigger+0x5e>
	{
		CLR_BIT( ADCSRA , ADC_AUTO_TRIGGER_EN_BIT );
    4eb4:	a6 e2       	ldi	r26, 0x26	; 38
    4eb6:	b0 e0       	ldi	r27, 0x00	; 0
    4eb8:	e6 e2       	ldi	r30, 0x26	; 38
    4eba:	f0 e0       	ldi	r31, 0x00	; 0
    4ebc:	80 81       	ld	r24, Z
    4ebe:	8f 7d       	andi	r24, 0xDF	; 223
    4ec0:	8c 93       	st	X, r24

		SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    4ec2:	a0 e5       	ldi	r26, 0x50	; 80
    4ec4:	b0 e0       	ldi	r27, 0x00	; 0
    4ec6:	e0 e5       	ldi	r30, 0x50	; 80
    4ec8:	f0 e0       	ldi	r31, 0x00	; 0
    4eca:	80 81       	ld	r24, Z
    4ecc:	88 7f       	andi	r24, 0xF8	; 248
    4ece:	8c 93       	st	X, r24
		SFIOR |= ( ( Copy_u8TriggerSource - FREE_RUNNING ) << ADC_TRIGGER_SEL_BITS );
    4ed0:	a0 e5       	ldi	r26, 0x50	; 80
    4ed2:	b0 e0       	ldi	r27, 0x00	; 0
    4ed4:	e0 e5       	ldi	r30, 0x50	; 80
    4ed6:	f0 e0       	ldi	r31, 0x00	; 0
    4ed8:	80 81       	ld	r24, Z
    4eda:	98 2f       	mov	r25, r24
    4edc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ede:	87 5a       	subi	r24, 0xA7	; 167
    4ee0:	89 2b       	or	r24, r25
    4ee2:	8c 93       	st	X, r24

		SET_BIT( ADCSRA , ADC_AUTO_TRIGGER_EN_BIT );
    4ee4:	a6 e2       	ldi	r26, 0x26	; 38
    4ee6:	b0 e0       	ldi	r27, 0x00	; 0
    4ee8:	e6 e2       	ldi	r30, 0x26	; 38
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	80 81       	ld	r24, Z
    4eee:	80 62       	ori	r24, 0x20	; 32
    4ef0:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK;
    4ef2:	19 82       	std	Y+1, r1	; 0x01
    4ef4:	02 c0       	rjmp	.+4      	; 0x4efa <ADC_enuEnableAutoTrigger+0x62>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    4ef6:	82 e0       	ldi	r24, 0x02	; 2
    4ef8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4efa:	89 81       	ldd	r24, Y+1	; 0x01
}
    4efc:	0f 90       	pop	r0
    4efe:	0f 90       	pop	r0
    4f00:	cf 91       	pop	r28
    4f02:	df 91       	pop	r29
    4f04:	08 95       	ret

00004f06 <ADC_enuDisableAutoTrigger>:

ES_t ADC_enuDisableAutoTrigger(void)
{
    4f06:	df 93       	push	r29
    4f08:	cf 93       	push	r28
    4f0a:	cd b7       	in	r28, 0x3d	; 61
    4f0c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( ADCSRA , ADC_AUTO_TRIGGER_EN_BIT );
    4f0e:	a6 e2       	ldi	r26, 0x26	; 38
    4f10:	b0 e0       	ldi	r27, 0x00	; 0
    4f12:	e6 e2       	ldi	r30, 0x26	; 38
    4f14:	f0 e0       	ldi	r31, 0x00	; 0
    4f16:	80 81       	ld	r24, Z
    4f18:	8f 7d       	andi	r24, 0xDF	; 223
    4f1a:	8c 93       	st	X, r24
//	ADCSRA &= ~(BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );

	return ES_OK;
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
}
    4f1e:	cf 91       	pop	r28
    4f20:	df 91       	pop	r29
    4f22:	08 95       	ret

00004f24 <ADC_enuRead>:


ES_t ADC_enuRead(u16 *Copy_u16ADC_Value)
{
    4f24:	df 93       	push	r29
    4f26:	cf 93       	push	r28
    4f28:	00 d0       	rcall	.+0      	; 0x4f2a <ADC_enuRead+0x6>
    4f2a:	0f 92       	push	r0
    4f2c:	cd b7       	in	r28, 0x3d	; 61
    4f2e:	de b7       	in	r29, 0x3e	; 62
    4f30:	9b 83       	std	Y+3, r25	; 0x03
    4f32:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4f34:	81 e0       	ldi	r24, 0x01	; 1
    4f36:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u16ADC_Value != NULL )
    4f38:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f3c:	00 97       	sbiw	r24, 0x00	; 0
    4f3e:	e1 f0       	breq	.+56     	; 0x4f78 <ADC_enuRead+0x54>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u16ADC_Value  = ADCL;
    4f40:	e4 e2       	ldi	r30, 0x24	; 36
    4f42:	f0 e0       	ldi	r31, 0x00	; 0
    4f44:	80 81       	ld	r24, Z
    4f46:	88 2f       	mov	r24, r24
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	ea 81       	ldd	r30, Y+2	; 0x02
    4f4c:	fb 81       	ldd	r31, Y+3	; 0x03
    4f4e:	91 83       	std	Z+1, r25	; 0x01
    4f50:	80 83       	st	Z, r24
			*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    4f52:	ea 81       	ldd	r30, Y+2	; 0x02
    4f54:	fb 81       	ldd	r31, Y+3	; 0x03
    4f56:	20 81       	ld	r18, Z
    4f58:	31 81       	ldd	r19, Z+1	; 0x01
    4f5a:	e5 e2       	ldi	r30, 0x25	; 37
    4f5c:	f0 e0       	ldi	r31, 0x00	; 0
    4f5e:	80 81       	ld	r24, Z
    4f60:	88 2f       	mov	r24, r24
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	98 2f       	mov	r25, r24
    4f66:	88 27       	eor	r24, r24
    4f68:	82 2b       	or	r24, r18
    4f6a:	93 2b       	or	r25, r19
    4f6c:	ea 81       	ldd	r30, Y+2	; 0x02
    4f6e:	fb 81       	ldd	r31, Y+3	; 0x03
    4f70:	91 83       	std	Z+1, r25	; 0x01
    4f72:	80 83       	st	Z, r24

			#warning "ADC_enuRead(u16*): Optimumt Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

		#endif

		Local_enuErrorState = ES_OK ;
    4f74:	19 82       	std	Y+1, r1	; 0x01
    4f76:	02 c0       	rjmp	.+4      	; 0x4f7c <ADC_enuRead+0x58>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    4f78:	83 e0       	ldi	r24, 0x03	; 3
    4f7a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4f7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f7e:	0f 90       	pop	r0
    4f80:	0f 90       	pop	r0
    4f82:	0f 90       	pop	r0
    4f84:	cf 91       	pop	r28
    4f86:	df 91       	pop	r29
    4f88:	08 95       	ret

00004f8a <ADC_enuReadHigh>:

ES_t ADC_enuReadHigh(u8 *Copy_u8ADC_Value)

{
    4f8a:	df 93       	push	r29
    4f8c:	cf 93       	push	r28
    4f8e:	00 d0       	rcall	.+0      	; 0x4f90 <ADC_enuReadHigh+0x6>
    4f90:	0f 92       	push	r0
    4f92:	cd b7       	in	r28, 0x3d	; 61
    4f94:	de b7       	in	r29, 0x3e	; 62
    4f96:	9b 83       	std	Y+3, r25	; 0x03
    4f98:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ADC_Value != NULL )
    4f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa2:	00 97       	sbiw	r24, 0x00	; 0
    4fa4:	01 f1       	breq	.+64     	; 0x4fe6 <ADC_enuReadHigh+0x5c>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    4fa6:	e4 e2       	ldi	r30, 0x24	; 36
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	80 81       	ld	r24, Z
    4fac:	86 95       	lsr	r24
    4fae:	86 95       	lsr	r24
    4fb0:	ea 81       	ldd	r30, Y+2	; 0x02
    4fb2:	fb 81       	ldd	r31, Y+3	; 0x03
    4fb4:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    4fb6:	ea 81       	ldd	r30, Y+2	; 0x02
    4fb8:	fb 81       	ldd	r31, Y+3	; 0x03
    4fba:	80 81       	ld	r24, Z
    4fbc:	28 2f       	mov	r18, r24
    4fbe:	e5 e2       	ldi	r30, 0x25	; 37
    4fc0:	f0 e0       	ldi	r31, 0x00	; 0
    4fc2:	80 81       	ld	r24, Z
    4fc4:	88 2f       	mov	r24, r24
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	00 24       	eor	r0, r0
    4fca:	96 95       	lsr	r25
    4fcc:	87 95       	ror	r24
    4fce:	07 94       	ror	r0
    4fd0:	96 95       	lsr	r25
    4fd2:	87 95       	ror	r24
    4fd4:	07 94       	ror	r0
    4fd6:	98 2f       	mov	r25, r24
    4fd8:	80 2d       	mov	r24, r0
    4fda:	82 2b       	or	r24, r18
    4fdc:	ea 81       	ldd	r30, Y+2	; 0x02
    4fde:	fb 81       	ldd	r31, Y+3	; 0x03
    4fe0:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    4fe2:	19 82       	std	Y+1, r1	; 0x01
    4fe4:	02 c0       	rjmp	.+4      	; 0x4fea <ADC_enuReadHigh+0x60>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    4fe6:	83 e0       	ldi	r24, 0x03	; 3
    4fe8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4fea:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fec:	0f 90       	pop	r0
    4fee:	0f 90       	pop	r0
    4ff0:	0f 90       	pop	r0
    4ff2:	cf 91       	pop	r28
    4ff4:	df 91       	pop	r29
    4ff6:	08 95       	ret

00004ff8 <ADC_enuPollingRead>:

ES_t ADC_enuPollingRead(u16 *Copy_u16ADC_Value)
{
    4ff8:	df 93       	push	r29
    4ffa:	cf 93       	push	r28
    4ffc:	00 d0       	rcall	.+0      	; 0x4ffe <ADC_enuPollingRead+0x6>
    4ffe:	0f 92       	push	r0
    5000:	cd b7       	in	r28, 0x3d	; 61
    5002:	de b7       	in	r29, 0x3e	; 62
    5004:	9b 83       	std	Y+3, r25	; 0x03
    5006:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5008:	81 e0       	ldi	r24, 0x01	; 1
    500a:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    500c:	e6 e2       	ldi	r30, 0x26	; 38
    500e:	f0 e0       	ldi	r31, 0x00	; 0
    5010:	80 81       	ld	r24, Z
    5012:	82 95       	swap	r24
    5014:	8f 70       	andi	r24, 0x0F	; 15
    5016:	88 2f       	mov	r24, r24
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	81 70       	andi	r24, 0x01	; 1
    501c:	90 70       	andi	r25, 0x00	; 0
    501e:	00 97       	sbiw	r24, 0x00	; 0
    5020:	a9 f3       	breq	.-22     	; 0x500c <ADC_enuPollingRead+0x14>

	if( Copy_u16ADC_Value != NULL)
    5022:	8a 81       	ldd	r24, Y+2	; 0x02
    5024:	9b 81       	ldd	r25, Y+3	; 0x03
    5026:	00 97       	sbiw	r24, 0x00	; 0
    5028:	e1 f0       	breq	.+56     	; 0x5062 <ADC_enuPollingRead+0x6a>
	{
#if ( ADC_ADJUST == RIGHT_ADJUST)

		*Copy_u16ADC_Value  = ADCL;
    502a:	e4 e2       	ldi	r30, 0x24	; 36
    502c:	f0 e0       	ldi	r31, 0x00	; 0
    502e:	80 81       	ld	r24, Z
    5030:	88 2f       	mov	r24, r24
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	ea 81       	ldd	r30, Y+2	; 0x02
    5036:	fb 81       	ldd	r31, Y+3	; 0x03
    5038:	91 83       	std	Z+1, r25	; 0x01
    503a:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    503c:	ea 81       	ldd	r30, Y+2	; 0x02
    503e:	fb 81       	ldd	r31, Y+3	; 0x03
    5040:	20 81       	ld	r18, Z
    5042:	31 81       	ldd	r19, Z+1	; 0x01
    5044:	e5 e2       	ldi	r30, 0x25	; 37
    5046:	f0 e0       	ldi	r31, 0x00	; 0
    5048:	80 81       	ld	r24, Z
    504a:	88 2f       	mov	r24, r24
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	98 2f       	mov	r25, r24
    5050:	88 27       	eor	r24, r24
    5052:	82 2b       	or	r24, r18
    5054:	93 2b       	or	r25, r19
    5056:	ea 81       	ldd	r30, Y+2	; 0x02
    5058:	fb 81       	ldd	r31, Y+3	; 0x03
    505a:	91 83       	std	Z+1, r25	; 0x01
    505c:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 2 );

		#warning "ADC_enuRead(u16*): Optimum Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

#endif
		Local_enuErrorState = ES_OK ;
    505e:	19 82       	std	Y+1, r1	; 0x01
    5060:	02 c0       	rjmp	.+4      	; 0x5066 <ADC_enuPollingRead+0x6e>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    5062:	83 e0       	ldi	r24, 0x03	; 3
    5064:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT( ADCSRA , ADC_INT_FLAG_BIT );
    5066:	a6 e2       	ldi	r26, 0x26	; 38
    5068:	b0 e0       	ldi	r27, 0x00	; 0
    506a:	e6 e2       	ldi	r30, 0x26	; 38
    506c:	f0 e0       	ldi	r31, 0x00	; 0
    506e:	80 81       	ld	r24, Z
    5070:	80 61       	ori	r24, 0x10	; 16
    5072:	8c 93       	st	X, r24

	return Local_enuErrorState;
    5074:	89 81       	ldd	r24, Y+1	; 0x01
}
    5076:	0f 90       	pop	r0
    5078:	0f 90       	pop	r0
    507a:	0f 90       	pop	r0
    507c:	cf 91       	pop	r28
    507e:	df 91       	pop	r29
    5080:	08 95       	ret

00005082 <ADC_enuPollingReadHigh>:

ES_t ADC_enuPollingReadHigh(u8 *Copy_u8ADC_Value)

{
    5082:	df 93       	push	r29
    5084:	cf 93       	push	r28
    5086:	00 d0       	rcall	.+0      	; 0x5088 <ADC_enuPollingReadHigh+0x6>
    5088:	0f 92       	push	r0
    508a:	cd b7       	in	r28, 0x3d	; 61
    508c:	de b7       	in	r29, 0x3e	; 62
    508e:	9b 83       	std	Y+3, r25	; 0x03
    5090:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    5096:	e6 e2       	ldi	r30, 0x26	; 38
    5098:	f0 e0       	ldi	r31, 0x00	; 0
    509a:	80 81       	ld	r24, Z
    509c:	82 95       	swap	r24
    509e:	8f 70       	andi	r24, 0x0F	; 15
    50a0:	88 2f       	mov	r24, r24
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	81 70       	andi	r24, 0x01	; 1
    50a6:	90 70       	andi	r25, 0x00	; 0
    50a8:	00 97       	sbiw	r24, 0x00	; 0
    50aa:	a9 f3       	breq	.-22     	; 0x5096 <ADC_enuPollingReadHigh+0x14>

	if( Copy_u8ADC_Value != NULL)
    50ac:	8a 81       	ldd	r24, Y+2	; 0x02
    50ae:	9b 81       	ldd	r25, Y+3	; 0x03
    50b0:	00 97       	sbiw	r24, 0x00	; 0
    50b2:	01 f1       	breq	.+64     	; 0x50f4 <ADC_enuPollingReadHigh+0x72>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    50b4:	e4 e2       	ldi	r30, 0x24	; 36
    50b6:	f0 e0       	ldi	r31, 0x00	; 0
    50b8:	80 81       	ld	r24, Z
    50ba:	86 95       	lsr	r24
    50bc:	86 95       	lsr	r24
    50be:	ea 81       	ldd	r30, Y+2	; 0x02
    50c0:	fb 81       	ldd	r31, Y+3	; 0x03
    50c2:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    50c4:	ea 81       	ldd	r30, Y+2	; 0x02
    50c6:	fb 81       	ldd	r31, Y+3	; 0x03
    50c8:	80 81       	ld	r24, Z
    50ca:	28 2f       	mov	r18, r24
    50cc:	e5 e2       	ldi	r30, 0x25	; 37
    50ce:	f0 e0       	ldi	r31, 0x00	; 0
    50d0:	80 81       	ld	r24, Z
    50d2:	88 2f       	mov	r24, r24
    50d4:	90 e0       	ldi	r25, 0x00	; 0
    50d6:	00 24       	eor	r0, r0
    50d8:	96 95       	lsr	r25
    50da:	87 95       	ror	r24
    50dc:	07 94       	ror	r0
    50de:	96 95       	lsr	r25
    50e0:	87 95       	ror	r24
    50e2:	07 94       	ror	r0
    50e4:	98 2f       	mov	r25, r24
    50e6:	80 2d       	mov	r24, r0
    50e8:	82 2b       	or	r24, r18
    50ea:	ea 81       	ldd	r30, Y+2	; 0x02
    50ec:	fb 81       	ldd	r31, Y+3	; 0x03
    50ee:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    50f0:	19 82       	std	Y+1, r1	; 0x01
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <ADC_enuPollingReadHigh+0x76>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    50f4:	83 e0       	ldi	r24, 0x03	; 3
    50f6:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    50f8:	e6 e2       	ldi	r30, 0x26	; 38
    50fa:	f0 e0       	ldi	r31, 0x00	; 0
    50fc:	80 81       	ld	r24, Z
    50fe:	82 95       	swap	r24
    5100:	8f 70       	andi	r24, 0x0F	; 15
    5102:	88 2f       	mov	r24, r24
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	81 70       	andi	r24, 0x01	; 1
    5108:	90 70       	andi	r25, 0x00	; 0
    510a:	00 97       	sbiw	r24, 0x00	; 0
    510c:	a9 f3       	breq	.-22     	; 0x50f8 <ADC_enuPollingReadHigh+0x76>

	return Local_enuErrorState;
    510e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5110:	0f 90       	pop	r0
    5112:	0f 90       	pop	r0
    5114:	0f 90       	pop	r0
    5116:	cf 91       	pop	r28
    5118:	df 91       	pop	r29
    511a:	08 95       	ret

0000511c <ADC_enuCallBack>:


ES_t ADC_enuCallBack(void ( *Copy_pFunAppFun )(void))
{
    511c:	df 93       	push	r29
    511e:	cf 93       	push	r28
    5120:	00 d0       	rcall	.+0      	; 0x5122 <ADC_enuCallBack+0x6>
    5122:	0f 92       	push	r0
    5124:	cd b7       	in	r28, 0x3d	; 61
    5126:	de b7       	in	r29, 0x3e	; 62
    5128:	9b 83       	std	Y+3, r25	; 0x03
    512a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    512c:	81 e0       	ldi	r24, 0x01	; 1
    512e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pFunAppFun != NULL)
    5130:	8a 81       	ldd	r24, Y+2	; 0x02
    5132:	9b 81       	ldd	r25, Y+3	; 0x03
    5134:	00 97       	sbiw	r24, 0x00	; 0
    5136:	41 f0       	breq	.+16     	; 0x5148 <ADC_enuCallBack+0x2c>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    5138:	8a 81       	ldd	r24, Y+2	; 0x02
    513a:	9b 81       	ldd	r25, Y+3	; 0x03
    513c:	90 93 3e 02 	sts	0x023E, r25
    5140:	80 93 3d 02 	sts	0x023D, r24
		Local_enuErrorState = ES_OK;
    5144:	19 82       	std	Y+1, r1	; 0x01
    5146:	02 c0       	rjmp	.+4      	; 0x514c <ADC_enuCallBack+0x30>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    5148:	83 e0       	ldi	r24, 0x03	; 3
    514a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    514c:	89 81       	ldd	r24, Y+1	; 0x01
}
    514e:	0f 90       	pop	r0
    5150:	0f 90       	pop	r0
    5152:	0f 90       	pop	r0
    5154:	cf 91       	pop	r28
    5156:	df 91       	pop	r29
    5158:	08 95       	ret

0000515a <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    515a:	df 93       	push	r29
    515c:	cf 93       	push	r28
    515e:	cd b7       	in	r28, 0x3d	; 61
    5160:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( ADCSRA , ADC_ENABLE_BIT );
    5162:	a6 e2       	ldi	r26, 0x26	; 38
    5164:	b0 e0       	ldi	r27, 0x00	; 0
    5166:	e6 e2       	ldi	r30, 0x26	; 38
    5168:	f0 e0       	ldi	r31, 0x00	; 0
    516a:	80 81       	ld	r24, Z
    516c:	80 68       	ori	r24, 0x80	; 128
    516e:	8c 93       	st	X, r24
//	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
	return ES_OK;
    5170:	80 e0       	ldi	r24, 0x00	; 0
}
    5172:	cf 91       	pop	r28
    5174:	df 91       	pop	r29
    5176:	08 95       	ret

00005178 <ADC_enuDisable>:

ES_t ADC_enuDisable(void)

{
    5178:	df 93       	push	r29
    517a:	cf 93       	push	r28
    517c:	cd b7       	in	r28, 0x3d	; 61
    517e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( ADCSRA , ADC_ENABLE_BIT );
    5180:	a6 e2       	ldi	r26, 0x26	; 38
    5182:	b0 e0       	ldi	r27, 0x00	; 0
    5184:	e6 e2       	ldi	r30, 0x26	; 38
    5186:	f0 e0       	ldi	r31, 0x00	; 0
    5188:	80 81       	ld	r24, Z
    518a:	8f 77       	andi	r24, 0x7F	; 127
    518c:	8c 93       	st	X, r24
//	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
	return ES_OK;
    518e:	80 e0       	ldi	r24, 0x00	; 0
}
    5190:	cf 91       	pop	r28
    5192:	df 91       	pop	r29
    5194:	08 95       	ret

00005196 <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    5196:	df 93       	push	r29
    5198:	cf 93       	push	r28
    519a:	cd b7       	in	r28, 0x3d	; 61
    519c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( ADCSRA , ADC_ENABLE_BIT );
    519e:	a6 e2       	ldi	r26, 0x26	; 38
    51a0:	b0 e0       	ldi	r27, 0x00	; 0
    51a2:	e6 e2       	ldi	r30, 0x26	; 38
    51a4:	f0 e0       	ldi	r31, 0x00	; 0
    51a6:	80 81       	ld	r24, Z
    51a8:	80 68       	ori	r24, 0x80	; 128
    51aa:	8c 93       	st	X, r24
//	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
	return ES_OK;
    51ac:	80 e0       	ldi	r24, 0x00	; 0
}
    51ae:	cf 91       	pop	r28
    51b0:	df 91       	pop	r29
    51b2:	08 95       	ret

000051b4 <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    51b4:	df 93       	push	r29
    51b6:	cf 93       	push	r28
    51b8:	cd b7       	in	r28, 0x3d	; 61
    51ba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( ADCSRA , ADC_ENABLE_BIT );
    51bc:	a6 e2       	ldi	r26, 0x26	; 38
    51be:	b0 e0       	ldi	r27, 0x00	; 0
    51c0:	e6 e2       	ldi	r30, 0x26	; 38
    51c2:	f0 e0       	ldi	r31, 0x00	; 0
    51c4:	80 81       	ld	r24, Z
    51c6:	8f 77       	andi	r24, 0x7F	; 127
    51c8:	8c 93       	st	X, r24
//	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
	return ES_OK;
    51ca:	80 e0       	ldi	r24, 0x00	; 0
}
    51cc:	cf 91       	pop	r28
    51ce:	df 91       	pop	r29
    51d0:	08 95       	ret

000051d2 <__vector_16>:


void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    51d2:	1f 92       	push	r1
    51d4:	0f 92       	push	r0
    51d6:	0f b6       	in	r0, 0x3f	; 63
    51d8:	0f 92       	push	r0
    51da:	11 24       	eor	r1, r1
    51dc:	2f 93       	push	r18
    51de:	3f 93       	push	r19
    51e0:	4f 93       	push	r20
    51e2:	5f 93       	push	r21
    51e4:	6f 93       	push	r22
    51e6:	7f 93       	push	r23
    51e8:	8f 93       	push	r24
    51ea:	9f 93       	push	r25
    51ec:	af 93       	push	r26
    51ee:	bf 93       	push	r27
    51f0:	ef 93       	push	r30
    51f2:	ff 93       	push	r31
    51f4:	df 93       	push	r29
    51f6:	cf 93       	push	r28
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pFunISRFun != NULL)
    51fc:	80 91 3d 02 	lds	r24, 0x023D
    5200:	90 91 3e 02 	lds	r25, 0x023E
    5204:	00 97       	sbiw	r24, 0x00	; 0
    5206:	29 f0       	breq	.+10     	; 0x5212 <__vector_16+0x40>
		ADC_pFunISRFun();
    5208:	e0 91 3d 02 	lds	r30, 0x023D
    520c:	f0 91 3e 02 	lds	r31, 0x023E
    5210:	09 95       	icall
}
    5212:	cf 91       	pop	r28
    5214:	df 91       	pop	r29
    5216:	ff 91       	pop	r31
    5218:	ef 91       	pop	r30
    521a:	bf 91       	pop	r27
    521c:	af 91       	pop	r26
    521e:	9f 91       	pop	r25
    5220:	8f 91       	pop	r24
    5222:	7f 91       	pop	r23
    5224:	6f 91       	pop	r22
    5226:	5f 91       	pop	r21
    5228:	4f 91       	pop	r20
    522a:	3f 91       	pop	r19
    522c:	2f 91       	pop	r18
    522e:	0f 90       	pop	r0
    5230:	0f be       	out	0x3f, r0	; 63
    5232:	0f 90       	pop	r0
    5234:	1f 90       	pop	r1
    5236:	18 95       	reti

00005238 <Switch_enuInit>:
extern u8 Switch_u8SwitchesMaxNum ;
extern Switch_t Switch[];


ES_t Switch_enuInit(void)
{
    5238:	df 93       	push	r29
    523a:	cf 93       	push	r28
    523c:	00 d0       	rcall	.+0      	; 0x523e <Switch_enuInit+0x6>
    523e:	00 d0       	rcall	.+0      	; 0x5240 <Switch_enuInit+0x8>
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	8a 83       	std	Y+2, r24	; 0x02
    5248:	51 c0       	rjmp	.+162    	; 0x52ec <Switch_enuInit+0xb4>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    524a:	89 81       	ldd	r24, Y+1	; 0x01
    524c:	28 2f       	mov	r18, r24
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	c9 01       	movw	r24, r18
    5252:	88 0f       	add	r24, r24
    5254:	99 1f       	adc	r25, r25
    5256:	82 0f       	add	r24, r18
    5258:	93 1f       	adc	r25, r19
    525a:	fc 01       	movw	r30, r24
    525c:	ee 55       	subi	r30, 0x5E	; 94
    525e:	fe 4f       	sbci	r31, 0xFE	; 254
    5260:	40 81       	ld	r20, Z
    5262:	89 81       	ldd	r24, Y+1	; 0x01
    5264:	28 2f       	mov	r18, r24
    5266:	30 e0       	ldi	r19, 0x00	; 0
    5268:	c9 01       	movw	r24, r18
    526a:	88 0f       	add	r24, r24
    526c:	99 1f       	adc	r25, r25
    526e:	82 0f       	add	r24, r18
    5270:	93 1f       	adc	r25, r19
    5272:	fc 01       	movw	r30, r24
    5274:	ed 55       	subi	r30, 0x5D	; 93
    5276:	fe 4f       	sbci	r31, 0xFE	; 254
    5278:	90 81       	ld	r25, Z
    527a:	84 2f       	mov	r24, r20
    527c:	69 2f       	mov	r22, r25
    527e:	40 e0       	ldi	r20, 0x00	; 0
    5280:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    5284:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    5286:	89 81       	ldd	r24, Y+1	; 0x01
    5288:	28 2f       	mov	r18, r24
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	c9 01       	movw	r24, r18
    528e:	88 0f       	add	r24, r24
    5290:	99 1f       	adc	r25, r25
    5292:	82 0f       	add	r24, r18
    5294:	93 1f       	adc	r25, r19
    5296:	fc 01       	movw	r30, r24
    5298:	ee 55       	subi	r30, 0x5E	; 94
    529a:	fe 4f       	sbci	r31, 0xFE	; 254
    529c:	50 81       	ld	r21, Z
    529e:	89 81       	ldd	r24, Y+1	; 0x01
    52a0:	28 2f       	mov	r18, r24
    52a2:	30 e0       	ldi	r19, 0x00	; 0
    52a4:	c9 01       	movw	r24, r18
    52a6:	88 0f       	add	r24, r24
    52a8:	99 1f       	adc	r25, r25
    52aa:	82 0f       	add	r24, r18
    52ac:	93 1f       	adc	r25, r19
    52ae:	fc 01       	movw	r30, r24
    52b0:	ed 55       	subi	r30, 0x5D	; 93
    52b2:	fe 4f       	sbci	r31, 0xFE	; 254
    52b4:	40 81       	ld	r20, Z
    52b6:	89 81       	ldd	r24, Y+1	; 0x01
    52b8:	28 2f       	mov	r18, r24
    52ba:	30 e0       	ldi	r19, 0x00	; 0
    52bc:	c9 01       	movw	r24, r18
    52be:	88 0f       	add	r24, r24
    52c0:	99 1f       	adc	r25, r25
    52c2:	82 0f       	add	r24, r18
    52c4:	93 1f       	adc	r25, r19
    52c6:	fc 01       	movw	r30, r24
    52c8:	ec 55       	subi	r30, 0x5C	; 92
    52ca:	fe 4f       	sbci	r31, 0xFE	; 254
    52cc:	90 81       	ld	r25, Z
    52ce:	85 2f       	mov	r24, r21
    52d0:	64 2f       	mov	r22, r20
    52d2:	49 2f       	mov	r20, r25
    52d4:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    52d8:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    52da:	8b 81       	ldd	r24, Y+3	; 0x03
    52dc:	88 23       	and	r24, r24
    52de:	61 f4       	brne	.+24     	; 0x52f8 <Switch_enuInit+0xc0>
    52e0:	8c 81       	ldd	r24, Y+4	; 0x04
    52e2:	88 23       	and	r24, r24
    52e4:	49 f4       	brne	.+18     	; 0x52f8 <Switch_enuInit+0xc0>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    52e6:	89 81       	ldd	r24, Y+1	; 0x01
    52e8:	8f 5f       	subi	r24, 0xFF	; 255
    52ea:	89 83       	std	Y+1, r24	; 0x01
    52ec:	90 91 a1 01 	lds	r25, 0x01A1
    52f0:	89 81       	ldd	r24, Y+1	; 0x01
    52f2:	89 17       	cp	r24, r25
    52f4:	08 f4       	brcc	.+2      	; 0x52f8 <Switch_enuInit+0xc0>
    52f6:	a9 cf       	rjmp	.-174    	; 0x524a <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    52f8:	8b 81       	ldd	r24, Y+3	; 0x03
    52fa:	88 23       	and	r24, r24
    52fc:	21 f4       	brne	.+8      	; 0x5306 <Switch_enuInit+0xce>
    52fe:	8c 81       	ldd	r24, Y+4	; 0x04
    5300:	88 23       	and	r24, r24
    5302:	09 f4       	brne	.+2      	; 0x5306 <Switch_enuInit+0xce>
		Local_enuErrorState = ES_OK;
    5304:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    5306:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5308:	0f 90       	pop	r0
    530a:	0f 90       	pop	r0
    530c:	0f 90       	pop	r0
    530e:	0f 90       	pop	r0
    5310:	cf 91       	pop	r28
    5312:	df 91       	pop	r29
    5314:	08 95       	ret

00005316 <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 *Copy_pu8SwitchValue)
{
    5316:	df 93       	push	r29
    5318:	cf 93       	push	r28
    531a:	00 d0       	rcall	.+0      	; 0x531c <Switch_enuGetPressed+0x6>
    531c:	00 d0       	rcall	.+0      	; 0x531e <Switch_enuGetPressed+0x8>
    531e:	cd b7       	in	r28, 0x3d	; 61
    5320:	de b7       	in	r29, 0x3e	; 62
    5322:	8a 83       	std	Y+2, r24	; 0x02
    5324:	7c 83       	std	Y+4, r23	; 0x04
    5326:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    5328:	81 e0       	ldi	r24, 0x01	; 1
    532a:	89 83       	std	Y+1, r24	; 0x01


	if( (Copy_u8SwitchNum -= SWITCH_ZERO) < Switch_u8SwitchesMaxNum )
    532c:	8a 81       	ldd	r24, Y+2	; 0x02
    532e:	89 5c       	subi	r24, 0xC9	; 201
    5330:	8a 83       	std	Y+2, r24	; 0x02
    5332:	90 91 a1 01 	lds	r25, 0x01A1
    5336:	8a 81       	ldd	r24, Y+2	; 0x02
    5338:	89 17       	cp	r24, r25
    533a:	08 f5       	brcc	.+66     	; 0x537e <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState =  DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue ) ;
    533c:	8a 81       	ldd	r24, Y+2	; 0x02
    533e:	28 2f       	mov	r18, r24
    5340:	30 e0       	ldi	r19, 0x00	; 0
    5342:	c9 01       	movw	r24, r18
    5344:	88 0f       	add	r24, r24
    5346:	99 1f       	adc	r25, r25
    5348:	82 0f       	add	r24, r18
    534a:	93 1f       	adc	r25, r19
    534c:	fc 01       	movw	r30, r24
    534e:	ee 55       	subi	r30, 0x5E	; 94
    5350:	fe 4f       	sbci	r31, 0xFE	; 254
    5352:	40 81       	ld	r20, Z
    5354:	8a 81       	ldd	r24, Y+2	; 0x02
    5356:	28 2f       	mov	r18, r24
    5358:	30 e0       	ldi	r19, 0x00	; 0
    535a:	c9 01       	movw	r24, r18
    535c:	88 0f       	add	r24, r24
    535e:	99 1f       	adc	r25, r25
    5360:	82 0f       	add	r24, r18
    5362:	93 1f       	adc	r25, r19
    5364:	fc 01       	movw	r30, r24
    5366:	ed 55       	subi	r30, 0x5D	; 93
    5368:	fe 4f       	sbci	r31, 0xFE	; 254
    536a:	90 81       	ld	r25, Z
    536c:	2b 81       	ldd	r18, Y+3	; 0x03
    536e:	3c 81       	ldd	r19, Y+4	; 0x04
    5370:	84 2f       	mov	r24, r20
    5372:	69 2f       	mov	r22, r25
    5374:	a9 01       	movw	r20, r18
    5376:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <DIO_enuGetPinValue>
    537a:	89 83       	std	Y+1, r24	; 0x01
    537c:	02 c0       	rjmp	.+4      	; 0x5382 <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    537e:	82 e0       	ldi	r24, 0x02	; 2
    5380:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    5382:	89 81       	ldd	r24, Y+1	; 0x01
}
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	0f 90       	pop	r0
    538a:	0f 90       	pop	r0
    538c:	cf 91       	pop	r28
    538e:	df 91       	pop	r29
    5390:	08 95       	ret

00005392 <SevSeg_enuInit>:
//extern u8 SevSeg_u8MaxModules;
extern u8 ModuleValuePins;
extern SSegModule_t SSegModule;

ES_t SevSeg_enuInit(void)
{
    5392:	df 93       	push	r29
    5394:	cf 93       	push	r28
    5396:	00 d0       	rcall	.+0      	; 0x5398 <SevSeg_enuInit+0x6>
    5398:	cd b7       	in	r28, 0x3d	; 61
    539a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	8a 83       	std	Y+2, r24	; 0x02

	for( u8 Local_u8PinNum = 0 ; Local_u8PinNum < ModuleValuePins ; Local_u8PinNum++ )
    53a0:	19 82       	std	Y+1, r1	; 0x01
    53a2:	37 c0       	rjmp	.+110    	; 0x5412 <SevSeg_enuInit+0x80>
	{
		if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule.Value_Conf[Local_u8PinNum].InputGrp ,
    53a4:	89 81       	ldd	r24, Y+1	; 0x01
    53a6:	88 2f       	mov	r24, r24
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	88 0f       	add	r24, r24
    53ac:	99 1f       	adc	r25, r25
    53ae:	fc 01       	movw	r30, r24
    53b0:	e4 55       	subi	r30, 0x54	; 84
    53b2:	fe 4f       	sbci	r31, 0xFE	; 254
    53b4:	20 81       	ld	r18, Z
    53b6:	89 81       	ldd	r24, Y+1	; 0x01
    53b8:	88 2f       	mov	r24, r24
    53ba:	90 e0       	ldi	r25, 0x00	; 0
    53bc:	88 0f       	add	r24, r24
    53be:	99 1f       	adc	r25, r25
    53c0:	fc 01       	movw	r30, r24
    53c2:	e3 55       	subi	r30, 0x53	; 83
    53c4:	fe 4f       	sbci	r31, 0xFE	; 254
    53c6:	90 81       	ld	r25, Z
    53c8:	82 2f       	mov	r24, r18
    53ca:	69 2f       	mov	r22, r25
    53cc:	41 e0       	ldi	r20, 0x01	; 1
    53ce:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    53d2:	88 23       	and	r24, r24
    53d4:	c1 f4       	brne	.+48     	; 0x5406 <SevSeg_enuInit+0x74>
													SSegModule.Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Value_Conf[Local_u8PinNum].InputGrp ,
    53d6:	89 81       	ldd	r24, Y+1	; 0x01
    53d8:	88 2f       	mov	r24, r24
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	88 0f       	add	r24, r24
    53de:	99 1f       	adc	r25, r25
    53e0:	fc 01       	movw	r30, r24
    53e2:	e4 55       	subi	r30, 0x54	; 84
    53e4:	fe 4f       	sbci	r31, 0xFE	; 254
    53e6:	20 81       	ld	r18, Z
    53e8:	89 81       	ldd	r24, Y+1	; 0x01
    53ea:	88 2f       	mov	r24, r24
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	88 0f       	add	r24, r24
    53f0:	99 1f       	adc	r25, r25
    53f2:	fc 01       	movw	r30, r24
    53f4:	e3 55       	subi	r30, 0x53	; 83
    53f6:	fe 4f       	sbci	r31, 0xFE	; 254
    53f8:	90 81       	ld	r25, Z
    53fa:	82 2f       	mov	r24, r18
    53fc:	69 2f       	mov	r22, r25
    53fe:	40 e0       	ldi	r20, 0x00	; 0
    5400:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5404:	8a 83       	std	Y+2, r24	; 0x02
													SSegModule.Value_Conf[Local_u8PinNum].InputPin , SEGMENT_OFF );
		if( Local_enuErrorState != ES_OK) break;
    5406:	8a 81       	ldd	r24, Y+2	; 0x02
    5408:	88 23       	and	r24, r24
    540a:	41 f4       	brne	.+16     	; 0x541c <SevSeg_enuInit+0x8a>

ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for( u8 Local_u8PinNum = 0 ; Local_u8PinNum < ModuleValuePins ; Local_u8PinNum++ )
    540c:	89 81       	ldd	r24, Y+1	; 0x01
    540e:	8f 5f       	subi	r24, 0xFF	; 255
    5410:	89 83       	std	Y+1, r24	; 0x01
    5412:	90 91 ab 01 	lds	r25, 0x01AB
    5416:	89 81       	ldd	r24, Y+1	; 0x01
    5418:	89 17       	cp	r24, r25
    541a:	20 f2       	brcs	.-120    	; 0x53a4 <SevSeg_enuInit+0x12>
													SSegModule.Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Value_Conf[Local_u8PinNum].InputGrp ,
													SSegModule.Value_Conf[Local_u8PinNum].InputPin , SEGMENT_OFF );
		if( Local_enuErrorState != ES_OK) break;
	}
	if( Local_enuErrorState == ES_OK)
    541c:	8a 81       	ldd	r24, Y+2	; 0x02
    541e:	88 23       	and	r24, r24
    5420:	99 f4       	brne	.+38     	; 0x5448 <SevSeg_enuInit+0xb6>
	{
		if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule.DIP_Conf.InputGrp ,
    5422:	80 91 b4 01 	lds	r24, 0x01B4
    5426:	90 91 b5 01 	lds	r25, 0x01B5
    542a:	69 2f       	mov	r22, r25
    542c:	41 e0       	ldi	r20, 0x01	; 1
    542e:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    5432:	88 23       	and	r24, r24
    5434:	49 f4       	brne	.+18     	; 0x5448 <SevSeg_enuInit+0xb6>
													SSegModule.DIP_Conf.InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.DIP_Conf.InputGrp ,
    5436:	80 91 b4 01 	lds	r24, 0x01B4
    543a:	90 91 b5 01 	lds	r25, 0x01B5
    543e:	69 2f       	mov	r22, r25
    5440:	41 e0       	ldi	r20, 0x01	; 1
    5442:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5446:	8a 83       	std	Y+2, r24	; 0x02
													SSegModule.DIP_Conf.InputPin , DIP_OFF );
	}
	if( Local_enuErrorState == ES_OK)
    5448:	8a 81       	ldd	r24, Y+2	; 0x02
    544a:	88 23       	and	r24, r24
    544c:	99 f4       	brne	.+38     	; 0x5474 <SevSeg_enuInit+0xe2>
	{
		if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule.Enable1_Conf.InputGrp ,
    544e:	80 91 b6 01 	lds	r24, 0x01B6
    5452:	90 91 b7 01 	lds	r25, 0x01B7
    5456:	69 2f       	mov	r22, r25
    5458:	41 e0       	ldi	r20, 0x01	; 1
    545a:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    545e:	88 23       	and	r24, r24
    5460:	49 f4       	brne	.+18     	; 0x5474 <SevSeg_enuInit+0xe2>
													SSegModule.Enable1_Conf.InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable1_Conf.InputGrp ,
    5462:	80 91 b6 01 	lds	r24, 0x01B6
    5466:	90 91 b7 01 	lds	r25, 0x01B7
    546a:	69 2f       	mov	r22, r25
    546c:	40 e0       	ldi	r20, 0x00	; 0
    546e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5472:	8a 83       	std	Y+2, r24	; 0x02
													SSegModule.Enable1_Conf.InputPin , MOD_EN_OFF );
	}
	if( Local_enuErrorState == ES_OK)
    5474:	8a 81       	ldd	r24, Y+2	; 0x02
    5476:	88 23       	and	r24, r24
    5478:	99 f4       	brne	.+38     	; 0x54a0 <SevSeg_enuInit+0x10e>
	{
		if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule.Enable2_Conf.InputGrp ,
    547a:	80 91 b8 01 	lds	r24, 0x01B8
    547e:	90 91 b9 01 	lds	r25, 0x01B9
    5482:	69 2f       	mov	r22, r25
    5484:	41 e0       	ldi	r20, 0x01	; 1
    5486:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    548a:	88 23       	and	r24, r24
    548c:	49 f4       	brne	.+18     	; 0x54a0 <SevSeg_enuInit+0x10e>
													SSegModule.Enable2_Conf.InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable2_Conf.InputGrp ,
    548e:	80 91 b8 01 	lds	r24, 0x01B8
    5492:	90 91 b9 01 	lds	r25, 0x01B9
    5496:	69 2f       	mov	r22, r25
    5498:	40 e0       	ldi	r20, 0x00	; 0
    549a:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    549e:	8a 83       	std	Y+2, r24	; 0x02
													SSegModule.Enable2_Conf.InputPin , MOD_EN_OFF );
	}

	return Local_enuErrorState ;//DONE
    54a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    54a2:	0f 90       	pop	r0
    54a4:	0f 90       	pop	r0
    54a6:	cf 91       	pop	r28
    54a8:	df 91       	pop	r29
    54aa:	08 95       	ret

000054ac <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue( u8 Copy_u8SevSegDigitValue )
{
    54ac:	df 93       	push	r29
    54ae:	cf 93       	push	r28
    54b0:	0f 92       	push	r0
    54b2:	cd b7       	in	r28, 0x3d	; 61
    54b4:	de b7       	in	r29, 0x3e	; 62
    54b6:	89 83       	std	Y+1, r24	; 0x01
*/
//	if( SEGMENT_ON == DIO_u8LOW )
//		Copy_u8SevSegDigitValue = (~Copy_u8SevSegDigitValue) ;

//	u8 Local_u8PortValue = PIN_B ;
	PORT_B = ( _u8_LOW_NIPPLE_VALUE_( PIN_B ) ) | ( _u8_LOW_NIPPLE_VALUE_( Copy_u8SevSegDigitValue ) << _NIPPLE_SHIFT_ ) ;
    54b8:	a8 e3       	ldi	r26, 0x38	; 56
    54ba:	b0 e0       	ldi	r27, 0x00	; 0
    54bc:	e6 e3       	ldi	r30, 0x36	; 54
    54be:	f0 e0       	ldi	r31, 0x00	; 0
    54c0:	80 81       	ld	r24, Z
    54c2:	28 2f       	mov	r18, r24
    54c4:	2f 70       	andi	r18, 0x0F	; 15
    54c6:	89 81       	ldd	r24, Y+1	; 0x01
    54c8:	88 2f       	mov	r24, r24
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	82 95       	swap	r24
    54ce:	92 95       	swap	r25
    54d0:	90 7f       	andi	r25, 0xF0	; 240
    54d2:	98 27       	eor	r25, r24
    54d4:	80 7f       	andi	r24, 0xF0	; 240
    54d6:	98 27       	eor	r25, r24
    54d8:	82 2b       	or	r24, r18
    54da:	8c 93       	st	X, r24
//	PORT_B &= _NIPPLE_MASK_ ;
//	PORT_B = Local_u8PortValue ;


	return ES_OK ;//DONE
    54dc:	80 e0       	ldi	r24, 0x00	; 0
}
    54de:	0f 90       	pop	r0
    54e0:	cf 91       	pop	r28
    54e2:	df 91       	pop	r29
    54e4:	08 95       	ret

000054e6 <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8SevSegDIPValue)
{
    54e6:	df 93       	push	r29
    54e8:	cf 93       	push	r28
    54ea:	00 d0       	rcall	.+0      	; 0x54ec <SevSeg_enuSetDIPValue+0x6>
    54ec:	cd b7       	in	r28, 0x3d	; 61
    54ee:	de b7       	in	r29, 0x3e	; 62
    54f0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    54f2:	81 e0       	ldi	r24, 0x01	; 1
    54f4:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF )
    54f6:	8a 81       	ldd	r24, Y+2	; 0x02
    54f8:	88 23       	and	r24, r24
    54fa:	19 f0       	breq	.+6      	; 0x5502 <SevSeg_enuSetDIPValue+0x1c>
    54fc:	8a 81       	ldd	r24, Y+2	; 0x02
    54fe:	81 30       	cpi	r24, 0x01	; 1
    5500:	51 f4       	brne	.+20     	; 0x5516 <SevSeg_enuSetDIPValue+0x30>
	{
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.DIP_Conf.InputGrp ,
    5502:	80 91 b4 01 	lds	r24, 0x01B4
    5506:	90 91 b5 01 	lds	r25, 0x01B5
    550a:	69 2f       	mov	r22, r25
    550c:	4a 81       	ldd	r20, Y+2	; 0x02
    550e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5512:	89 83       	std	Y+1, r24	; 0x01
    5514:	02 c0       	rjmp	.+4      	; 0x551a <SevSeg_enuSetDIPValue+0x34>
													SSegModule.DIP_Conf.InputPin , Copy_u8SevSegDIPValue );
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    5516:	82 e0       	ldi	r24, 0x02	; 2
    5518:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    551a:	89 81       	ldd	r24, Y+1	; 0x01
}
    551c:	0f 90       	pop	r0
    551e:	0f 90       	pop	r0
    5520:	cf 91       	pop	r28
    5522:	df 91       	pop	r29
    5524:	08 95       	ret

00005526 <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    5526:	df 93       	push	r29
    5528:	cf 93       	push	r28
    552a:	00 d0       	rcall	.+0      	; 0x552c <SevSeg_enuFrameDelay+0x6>
    552c:	00 d0       	rcall	.+0      	; 0x552e <SevSeg_enuFrameDelay+0x8>
    552e:	cd b7       	in	r28, 0x3d	; 61
    5530:	de b7       	in	r29, 0x3e	; 62
    5532:	8a 83       	std	Y+2, r24	; 0x02
    5534:	7c 83       	std	Y+4, r23	; 0x04
    5536:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	89 83       	std	Y+1, r24	; 0x01

	*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    553c:	8a 81       	ldd	r24, Y+2	; 0x02
    553e:	88 2f       	mov	r24, r24
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	ac 01       	movw	r20, r24
    5544:	4d 5e       	subi	r20, 0xED	; 237
    5546:	5f 4f       	sbci	r21, 0xFF	; 255
    5548:	8a 81       	ldd	r24, Y+2	; 0x02
    554a:	28 2f       	mov	r18, r24
    554c:	30 e0       	ldi	r19, 0x00	; 0
    554e:	ca 01       	movw	r24, r20
    5550:	b9 01       	movw	r22, r18
    5552:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__divmodhi4>
    5556:	cb 01       	movw	r24, r22
    5558:	eb 81       	ldd	r30, Y+3	; 0x03
    555a:	fc 81       	ldd	r31, Y+4	; 0x04
    555c:	80 83       	st	Z, r24

	Local_enuErrorState=ES_OK;
    555e:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;//DONE
    5560:	89 81       	ldd	r24, Y+1	; 0x01
}
    5562:	0f 90       	pop	r0
    5564:	0f 90       	pop	r0
    5566:	0f 90       	pop	r0
    5568:	0f 90       	pop	r0
    556a:	cf 91       	pop	r28
    556c:	df 91       	pop	r29
    556e:	08 95       	ret

00005570 <SevSeg_enuModuleEnable>:

ES_t SevSeg_enuModuleEnable(u8 Copy_u8ModuleNum )
{
    5570:	df 93       	push	r29
    5572:	cf 93       	push	r28
    5574:	00 d0       	rcall	.+0      	; 0x5576 <SevSeg_enuModuleEnable+0x6>
    5576:	00 d0       	rcall	.+0      	; 0x5578 <SevSeg_enuModuleEnable+0x8>
    5578:	cd b7       	in	r28, 0x3d	; 61
    557a:	de b7       	in	r29, 0x3e	; 62
    557c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	89 83       	std	Y+1, r24	; 0x01

	switch( Copy_u8ModuleNum )
    5582:	8a 81       	ldd	r24, Y+2	; 0x02
    5584:	28 2f       	mov	r18, r24
    5586:	30 e0       	ldi	r19, 0x00	; 0
    5588:	3c 83       	std	Y+4, r19	; 0x04
    558a:	2b 83       	std	Y+3, r18	; 0x03
    558c:	8b 81       	ldd	r24, Y+3	; 0x03
    558e:	9c 81       	ldd	r25, Y+4	; 0x04
    5590:	8b 30       	cpi	r24, 0x0B	; 11
    5592:	91 05       	cpc	r25, r1
    5594:	31 f0       	breq	.+12     	; 0x55a2 <SevSeg_enuModuleEnable+0x32>
    5596:	2b 81       	ldd	r18, Y+3	; 0x03
    5598:	3c 81       	ldd	r19, Y+4	; 0x04
    559a:	2c 30       	cpi	r18, 0x0C	; 12
    559c:	31 05       	cpc	r19, r1
    559e:	59 f0       	breq	.+22     	; 0x55b6 <SevSeg_enuModuleEnable+0x46>
    55a0:	14 c0       	rjmp	.+40     	; 0x55ca <SevSeg_enuModuleEnable+0x5a>
	{
		case MODULE_1 :	Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable1_Conf.InputGrp ,
    55a2:	80 91 b6 01 	lds	r24, 0x01B6
    55a6:	90 91 b7 01 	lds	r25, 0x01B7
    55aa:	69 2f       	mov	r22, r25
    55ac:	41 e0       	ldi	r20, 0x01	; 1
    55ae:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    55b2:	89 83       	std	Y+1, r24	; 0x01
    55b4:	0c c0       	rjmp	.+24     	; 0x55ce <SevSeg_enuModuleEnable+0x5e>
																	SSegModule.Enable1_Conf.InputPin ,	MOD_EN_ON );
						break;
		case MODULE_2 :	Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable2_Conf.InputGrp ,
    55b6:	80 91 b8 01 	lds	r24, 0x01B8
    55ba:	90 91 b9 01 	lds	r25, 0x01B9
    55be:	69 2f       	mov	r22, r25
    55c0:	41 e0       	ldi	r20, 0x01	; 1
    55c2:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    55c6:	89 83       	std	Y+1, r24	; 0x01
    55c8:	02 c0       	rjmp	.+4      	; 0x55ce <SevSeg_enuModuleEnable+0x5e>
																	SSegModule.Enable2_Conf.InputPin ,	MOD_EN_ON );
						break;
		default : Local_enuErrorState = ES_OUT_RANGE ;
    55ca:	82 e0       	ldi	r24, 0x02	; 2
    55cc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;//DONE
    55ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    55d0:	0f 90       	pop	r0
    55d2:	0f 90       	pop	r0
    55d4:	0f 90       	pop	r0
    55d6:	0f 90       	pop	r0
    55d8:	cf 91       	pop	r28
    55da:	df 91       	pop	r29
    55dc:	08 95       	ret

000055de <SevSeg_enuModuleDisable>:

ES_t SevSeg_enuModuleDisable(u8 Copy_u8ModuleNum )
{
    55de:	df 93       	push	r29
    55e0:	cf 93       	push	r28
    55e2:	00 d0       	rcall	.+0      	; 0x55e4 <SevSeg_enuModuleDisable+0x6>
    55e4:	00 d0       	rcall	.+0      	; 0x55e6 <SevSeg_enuModuleDisable+0x8>
    55e6:	cd b7       	in	r28, 0x3d	; 61
    55e8:	de b7       	in	r29, 0x3e	; 62
    55ea:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    55ec:	81 e0       	ldi	r24, 0x01	; 1
    55ee:	89 83       	std	Y+1, r24	; 0x01

	switch( Copy_u8ModuleNum )
    55f0:	8a 81       	ldd	r24, Y+2	; 0x02
    55f2:	28 2f       	mov	r18, r24
    55f4:	30 e0       	ldi	r19, 0x00	; 0
    55f6:	3c 83       	std	Y+4, r19	; 0x04
    55f8:	2b 83       	std	Y+3, r18	; 0x03
    55fa:	8b 81       	ldd	r24, Y+3	; 0x03
    55fc:	9c 81       	ldd	r25, Y+4	; 0x04
    55fe:	8b 30       	cpi	r24, 0x0B	; 11
    5600:	91 05       	cpc	r25, r1
    5602:	31 f0       	breq	.+12     	; 0x5610 <SevSeg_enuModuleDisable+0x32>
    5604:	2b 81       	ldd	r18, Y+3	; 0x03
    5606:	3c 81       	ldd	r19, Y+4	; 0x04
    5608:	2c 30       	cpi	r18, 0x0C	; 12
    560a:	31 05       	cpc	r19, r1
    560c:	59 f0       	breq	.+22     	; 0x5624 <SevSeg_enuModuleDisable+0x46>
    560e:	14 c0       	rjmp	.+40     	; 0x5638 <SevSeg_enuModuleDisable+0x5a>
	{
		case MODULE_1 :	Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable1_Conf.InputGrp ,
    5610:	80 91 b6 01 	lds	r24, 0x01B6
    5614:	90 91 b7 01 	lds	r25, 0x01B7
    5618:	69 2f       	mov	r22, r25
    561a:	40 e0       	ldi	r20, 0x00	; 0
    561c:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5620:	89 83       	std	Y+1, r24	; 0x01
    5622:	0c c0       	rjmp	.+24     	; 0x563c <SevSeg_enuModuleDisable+0x5e>
																	SSegModule.Enable1_Conf.InputPin ,	MOD_EN_OFF );
						break;
		case MODULE_2 :	Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable2_Conf.InputGrp ,
    5624:	80 91 b8 01 	lds	r24, 0x01B8
    5628:	90 91 b9 01 	lds	r25, 0x01B9
    562c:	69 2f       	mov	r22, r25
    562e:	40 e0       	ldi	r20, 0x00	; 0
    5630:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5634:	89 83       	std	Y+1, r24	; 0x01
    5636:	02 c0       	rjmp	.+4      	; 0x563c <SevSeg_enuModuleDisable+0x5e>
																	SSegModule.Enable2_Conf.InputPin ,	MOD_EN_OFF );
						break;
		default : Local_enuErrorState = ES_OUT_RANGE ;
    5638:	82 e0       	ldi	r24, 0x02	; 2
    563a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;//DONE
    563c:	89 81       	ldd	r24, Y+1	; 0x01
}
    563e:	0f 90       	pop	r0
    5640:	0f 90       	pop	r0
    5642:	0f 90       	pop	r0
    5644:	0f 90       	pop	r0
    5646:	cf 91       	pop	r28
    5648:	df 91       	pop	r29
    564a:	08 95       	ret

0000564c <LD_enuInit>:
extern u8 LD_u8LD_MaxNum;
extern LD_t LD[];


ES_t LD_enuInit(void)
{
    564c:	df 93       	push	r29
    564e:	cf 93       	push	r28
    5650:	00 d0       	rcall	.+0      	; 0x5652 <LD_enuInit+0x6>
    5652:	00 d0       	rcall	.+0      	; 0x5654 <LD_enuInit+0x8>
    5654:	cd b7       	in	r28, 0x3d	; 61
    5656:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    5658:	81 e0       	ldi	r24, 0x01	; 1
    565a:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    565c:	19 82       	std	Y+1, r1	; 0x01
    565e:	39 c0       	rjmp	.+114    	; 0x56d2 <LD_enuInit+0x86>
	{
		Local_AenuStatus[0] = DIO_enuSetPinDirection( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    5660:	89 81       	ldd	r24, Y+1	; 0x01
    5662:	88 2f       	mov	r24, r24
    5664:	90 e0       	ldi	r25, 0x00	; 0
    5666:	88 0f       	add	r24, r24
    5668:	99 1f       	adc	r25, r25
    566a:	fc 01       	movw	r30, r24
    566c:	e5 54       	subi	r30, 0x45	; 69
    566e:	fe 4f       	sbci	r31, 0xFE	; 254
    5670:	20 81       	ld	r18, Z
    5672:	89 81       	ldd	r24, Y+1	; 0x01
    5674:	88 2f       	mov	r24, r24
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	88 0f       	add	r24, r24
    567a:	99 1f       	adc	r25, r25
    567c:	fc 01       	movw	r30, r24
    567e:	e4 54       	subi	r30, 0x44	; 68
    5680:	fe 4f       	sbci	r31, 0xFE	; 254
    5682:	90 81       	ld	r25, Z
    5684:	82 2f       	mov	r24, r18
    5686:	69 2f       	mov	r22, r25
    5688:	41 e0       	ldi	r20, 0x01	; 1
    568a:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    568e:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);
    5690:	89 81       	ldd	r24, Y+1	; 0x01
    5692:	88 2f       	mov	r24, r24
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	88 0f       	add	r24, r24
    5698:	99 1f       	adc	r25, r25
    569a:	fc 01       	movw	r30, r24
    569c:	e5 54       	subi	r30, 0x45	; 69
    569e:	fe 4f       	sbci	r31, 0xFE	; 254
    56a0:	20 81       	ld	r18, Z
    56a2:	89 81       	ldd	r24, Y+1	; 0x01
    56a4:	88 2f       	mov	r24, r24
    56a6:	90 e0       	ldi	r25, 0x00	; 0
    56a8:	88 0f       	add	r24, r24
    56aa:	99 1f       	adc	r25, r25
    56ac:	fc 01       	movw	r30, r24
    56ae:	e4 54       	subi	r30, 0x44	; 68
    56b0:	fe 4f       	sbci	r31, 0xFE	; 254
    56b2:	90 81       	ld	r25, Z
    56b4:	82 2f       	mov	r24, r18
    56b6:	69 2f       	mov	r22, r25
    56b8:	40 e0       	ldi	r20, 0x00	; 0
    56ba:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    56be:	8c 83       	std	Y+4, r24	; 0x04

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    56c0:	8b 81       	ldd	r24, Y+3	; 0x03
    56c2:	88 23       	and	r24, r24
    56c4:	59 f4       	brne	.+22     	; 0x56dc <LD_enuInit+0x90>
    56c6:	8c 81       	ldd	r24, Y+4	; 0x04
    56c8:	88 23       	and	r24, r24
    56ca:	41 f4       	brne	.+16     	; 0x56dc <LD_enuInit+0x90>

ES_t LD_enuInit(void)
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    56cc:	89 81       	ldd	r24, Y+1	; 0x01
    56ce:	8f 5f       	subi	r24, 0xFF	; 255
    56d0:	89 83       	std	Y+1, r24	; 0x01
    56d2:	90 91 ba 01 	lds	r25, 0x01BA
    56d6:	89 81       	ldd	r24, Y+1	; 0x01
    56d8:	89 17       	cp	r24, r25
    56da:	10 f2       	brcs	.-124    	; 0x5660 <LD_enuInit+0x14>
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
	}

	if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    56dc:	8b 81       	ldd	r24, Y+3	; 0x03
    56de:	88 23       	and	r24, r24
    56e0:	21 f4       	brne	.+8      	; 0x56ea <LD_enuInit+0x9e>
    56e2:	8c 81       	ldd	r24, Y+4	; 0x04
    56e4:	88 23       	and	r24, r24
    56e6:	09 f4       	brne	.+2      	; 0x56ea <LD_enuInit+0x9e>
		Local_enuErrorStatus = ES_OK;
    56e8:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorStatus;
    56ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    56ec:	0f 90       	pop	r0
    56ee:	0f 90       	pop	r0
    56f0:	0f 90       	pop	r0
    56f2:	0f 90       	pop	r0
    56f4:	cf 91       	pop	r28
    56f6:	df 91       	pop	r29
    56f8:	08 95       	ret

000056fa <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    56fa:	df 93       	push	r29
    56fc:	cf 93       	push	r28
    56fe:	00 d0       	rcall	.+0      	; 0x5700 <LD_enuSetState+0x6>
    5700:	0f 92       	push	r0
    5702:	cd b7       	in	r28, 0x3d	; 61
    5704:	de b7       	in	r29, 0x3e	; 62
    5706:	8a 83       	std	Y+2, r24	; 0x02
    5708:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    570a:	81 e0       	ldi	r24, 0x01	; 1
    570c:	89 83       	std	Y+1, r24	; 0x01

	if( ( ( Copy_u8LD_Num -= LD_ZERO ) < LD_u8LD_MaxNum ) &&
    570e:	8a 81       	ldd	r24, Y+2	; 0x02
    5710:	8e 51       	subi	r24, 0x1E	; 30
    5712:	8a 83       	std	Y+2, r24	; 0x02
    5714:	90 91 ba 01 	lds	r25, 0x01BA
    5718:	8a 81       	ldd	r24, Y+2	; 0x02
    571a:	89 17       	cp	r24, r25
    571c:	f8 f4       	brcc	.+62     	; 0x575c <LD_enuSetState+0x62>
    571e:	8b 81       	ldd	r24, Y+3	; 0x03
    5720:	81 30       	cpi	r24, 0x01	; 1
    5722:	19 f0       	breq	.+6      	; 0x572a <LD_enuSetState+0x30>
    5724:	8b 81       	ldd	r24, Y+3	; 0x03
    5726:	88 23       	and	r24, r24
    5728:	c9 f4       	brne	.+50     	; 0x575c <LD_enuSetState+0x62>
		( Copy_u8LDSetValue == LD_u8ON || Copy_u8LDSetValue == LD_u8OFF ) )
	{
		Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    572a:	8a 81       	ldd	r24, Y+2	; 0x02
    572c:	88 2f       	mov	r24, r24
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	88 0f       	add	r24, r24
    5732:	99 1f       	adc	r25, r25
    5734:	fc 01       	movw	r30, r24
    5736:	e5 54       	subi	r30, 0x45	; 69
    5738:	fe 4f       	sbci	r31, 0xFE	; 254
    573a:	20 81       	ld	r18, Z
    573c:	8a 81       	ldd	r24, Y+2	; 0x02
    573e:	88 2f       	mov	r24, r24
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	88 0f       	add	r24, r24
    5744:	99 1f       	adc	r25, r25
    5746:	fc 01       	movw	r30, r24
    5748:	e4 54       	subi	r30, 0x44	; 68
    574a:	fe 4f       	sbci	r31, 0xFE	; 254
    574c:	90 81       	ld	r25, Z
    574e:	82 2f       	mov	r24, r18
    5750:	69 2f       	mov	r22, r25
    5752:	4b 81       	ldd	r20, Y+3	; 0x03
    5754:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5758:	89 83       	std	Y+1, r24	; 0x01
    575a:	02 c0       	rjmp	.+4      	; 0x5760 <LD_enuSetState+0x66>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    575c:	82 e0       	ldi	r24, 0x02	; 2
    575e:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    5760:	89 81       	ldd	r24, Y+1	; 0x01
}
    5762:	0f 90       	pop	r0
    5764:	0f 90       	pop	r0
    5766:	0f 90       	pop	r0
    5768:	cf 91       	pop	r28
    576a:	df 91       	pop	r29
    576c:	08 95       	ret

0000576e <Coolent_enuInit>:
#define COOL_INIT_DUTY_CYCLE	0.0F
#define COOL_MAX_DUTY_CYCLE		80.0F
*/

ES_t Coolent_enuInit(void)
{
    576e:	df 93       	push	r29
    5770:	cf 93       	push	r28
    5772:	00 d0       	rcall	.+0      	; 0x5774 <Coolent_enuInit+0x6>
    5774:	00 d0       	rcall	.+0      	; 0x5776 <Coolent_enuInit+0x8>
    5776:	cd b7       	in	r28, 0x3d	; 61
    5778:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_AenuErrorState[2];
	u8 Local_u8Iter = 0 ;
    577a:	19 82       	std	Y+1, r1	; 0x01
	if( Local_u8Iter == 2 )
	{
#endif
		Local_AenuErrorState[0] = PWM_enuSetDutyCycle( COOLENT_PWM , COOL_INIT_DUTY_CYCLE );
*/
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( COOLENT_GRP , COOLENT_PIN , DIO_u8OUTPUT );
    577c:	8f e0       	ldi	r24, 0x0F	; 15
    577e:	65 e0       	ldi	r22, 0x05	; 5
    5780:	41 e0       	ldi	r20, 0x01	; 1
    5782:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    5786:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = DIO_enuSetPinValue( COOLENT_GRP , COOLENT_PIN , DIO_u8LOW );
    5788:	8f e0       	ldi	r24, 0x0F	; 15
    578a:	65 e0       	ldi	r22, 0x05	; 5
    578c:	40 e0       	ldi	r20, 0x00	; 0
    578e:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5792:	8b 83       	std	Y+3, r24	; 0x03
/*
#ifdef COOLENT_PWM_SETUP
	}
#endif
*/	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    5794:	19 82       	std	Y+1, r1	; 0x01
    5796:	03 c0       	rjmp	.+6      	; 0x579e <Coolent_enuInit+0x30>
    5798:	89 81       	ldd	r24, Y+1	; 0x01
    579a:	8f 5f       	subi	r24, 0xFF	; 255
    579c:	89 83       	std	Y+1, r24	; 0x01
    579e:	89 81       	ldd	r24, Y+1	; 0x01
    57a0:	82 30       	cpi	r24, 0x02	; 2
    57a2:	58 f4       	brcc	.+22     	; 0x57ba <Coolent_enuInit+0x4c>
    57a4:	89 81       	ldd	r24, Y+1	; 0x01
    57a6:	28 2f       	mov	r18, r24
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	ce 01       	movw	r24, r28
    57ac:	02 96       	adiw	r24, 0x02	; 2
    57ae:	fc 01       	movw	r30, r24
    57b0:	e2 0f       	add	r30, r18
    57b2:	f3 1f       	adc	r31, r19
    57b4:	80 81       	ld	r24, Z
    57b6:	88 23       	and	r24, r24
    57b8:	79 f3       	breq	.-34     	; 0x5798 <Coolent_enuInit+0x2a>

	return ( (Local_u8Iter == 2 )? ES_OK : Local_AenuErrorState[Local_u8Iter] ) ;
    57ba:	89 81       	ldd	r24, Y+1	; 0x01
    57bc:	82 30       	cpi	r24, 0x02	; 2
    57be:	59 f0       	breq	.+22     	; 0x57d6 <Coolent_enuInit+0x68>
    57c0:	89 81       	ldd	r24, Y+1	; 0x01
    57c2:	28 2f       	mov	r18, r24
    57c4:	30 e0       	ldi	r19, 0x00	; 0
    57c6:	ce 01       	movw	r24, r28
    57c8:	02 96       	adiw	r24, 0x02	; 2
    57ca:	fc 01       	movw	r30, r24
    57cc:	e2 0f       	add	r30, r18
    57ce:	f3 1f       	adc	r31, r19
    57d0:	80 81       	ld	r24, Z
    57d2:	8c 83       	std	Y+4, r24	; 0x04
    57d4:	01 c0       	rjmp	.+2      	; 0x57d8 <Coolent_enuInit+0x6a>
    57d6:	1c 82       	std	Y+4, r1	; 0x04
    57d8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    57da:	0f 90       	pop	r0
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	0f 90       	pop	r0
    57e2:	cf 91       	pop	r28
    57e4:	df 91       	pop	r29
    57e6:	08 95       	ret

000057e8 <Coolent_enuEnable>:

ES_t Coolent_enuEnable( void )
{
    57e8:	df 93       	push	r29
    57ea:	cf 93       	push	r28
    57ec:	cd b7       	in	r28, 0x3d	; 61
    57ee:	de b7       	in	r29, 0x3e	; 62
//	ES_t Local_enuErrorState = ES_NOK ;

	ASM_CLR_BIT( COOLENT_PORT , COOLENT_PIN ) ;
    57f0:	95 98       	cbi	0x12, 5	; 18

	return ES_OK;
    57f2:	80 e0       	ldi	r24, 0x00	; 0
}
    57f4:	cf 91       	pop	r28
    57f6:	df 91       	pop	r29
    57f8:	08 95       	ret

000057fa <Coolent_enuDisable>:

ES_t Coolent_enuDisable( void )
{
    57fa:	df 93       	push	r29
    57fc:	cf 93       	push	r28
    57fe:	cd b7       	in	r28, 0x3d	; 61
    5800:	de b7       	in	r29, 0x3e	; 62
//	ES_t Local_enuErrorState = ES_NOK ;

//	Local_enuErrorState = DIO_enuSetPinDirection( COOLENT_GRP , COOLENT_PIN , DIO_u8INPUT ) ;
	ASM_SET_BIT( COOLENT_PORT , COOLENT_PIN ) ;
    5802:	95 9a       	sbi	0x12, 5	; 18
	return ES_OK;
    5804:	80 e0       	ldi	r24, 0x00	; 0
}
    5806:	cf 91       	pop	r28
    5808:	df 91       	pop	r29
    580a:	08 95       	ret

0000580c <Heater_enuInit>:
bool CounterReset = FALSE;
void INT0_ISR( void);
void Heater_vidZCrossSync( void );
*/
ES_t Heater_enuInit(void)
{
    580c:	df 93       	push	r29
    580e:	cf 93       	push	r28
    5810:	00 d0       	rcall	.+0      	; 0x5812 <Heater_enuInit+0x6>
    5812:	00 d0       	rcall	.+0      	; 0x5814 <Heater_enuInit+0x8>
    5814:	cd b7       	in	r28, 0x3d	; 61
    5816:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter = 0 ;
    581c:	19 82       	std	Y+1, r1	; 0x01
//	Local_AenuErrorState[1] = PWM_enuSetICR1Value( (u16)ICR1_VALUE );
	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
	if( Local_u8Iter == 2 )
	{
#endif
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( HEATER_GRP , HEATER_PIN , DIO_u8OUTPUT ) ;
    581e:	8f e0       	ldi	r24, 0x0F	; 15
    5820:	64 e0       	ldi	r22, 0x04	; 4
    5822:	41 e0       	ldi	r20, 0x01	; 1
    5824:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    5828:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuErrorState[1] = DIO_enuSetPinValue( HEATER_GRP , HEATER_PIN , DIO_u8LOW ) ;
    582a:	8f e0       	ldi	r24, 0x0F	; 15
    582c:	64 e0       	ldi	r22, 0x04	; 4
    582e:	40 e0       	ldi	r20, 0x00	; 0
    5830:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    5834:	8c 83       	std	Y+4, r24	; 0x04
	}
#endif

//	Heater_vidZCrossSync();

	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    5836:	19 82       	std	Y+1, r1	; 0x01
    5838:	03 c0       	rjmp	.+6      	; 0x5840 <Heater_enuInit+0x34>
    583a:	89 81       	ldd	r24, Y+1	; 0x01
    583c:	8f 5f       	subi	r24, 0xFF	; 255
    583e:	89 83       	std	Y+1, r24	; 0x01
    5840:	89 81       	ldd	r24, Y+1	; 0x01
    5842:	82 30       	cpi	r24, 0x02	; 2
    5844:	58 f4       	brcc	.+22     	; 0x585c <Heater_enuInit+0x50>
    5846:	89 81       	ldd	r24, Y+1	; 0x01
    5848:	28 2f       	mov	r18, r24
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	ce 01       	movw	r24, r28
    584e:	03 96       	adiw	r24, 0x03	; 3
    5850:	fc 01       	movw	r30, r24
    5852:	e2 0f       	add	r30, r18
    5854:	f3 1f       	adc	r31, r19
    5856:	80 81       	ld	r24, Z
    5858:	88 23       	and	r24, r24
    585a:	79 f3       	breq	.-34     	; 0x583a <Heater_enuInit+0x2e>
	if( Local_u8Iter == 2 )
    585c:	89 81       	ldd	r24, Y+1	; 0x01
    585e:	82 30       	cpi	r24, 0x02	; 2
    5860:	09 f4       	brne	.+2      	; 0x5864 <Heater_enuInit+0x58>
//		Local_enuErrorState = DIO_enuSetPinDirection( HEATER_GRP , HEATER_PIN , DIO_u8OUTPUT ) ;

		Local_enuErrorState = ES_OK ;
    5862:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    5864:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5866:	0f 90       	pop	r0
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
    586c:	0f 90       	pop	r0
    586e:	cf 91       	pop	r28
    5870:	df 91       	pop	r29
    5872:	08 95       	ret

00005874 <Heater_enuEnable>:
	CounterReset = FALSE ;
	SREG = Local_u8SREG ;
}
*/
ES_t Heater_enuEnable( void )
{
    5874:	df 93       	push	r29
    5876:	cf 93       	push	r28
    5878:	cd b7       	in	r28, 0x3d	; 61
    587a:	de b7       	in	r29, 0x3e	; 62
//	ES_t Local_enuErrorState = ES_NOK ;

	ASM_SET_BIT( HEATER_PORT , HEATER_PIN );
    587c:	94 9a       	sbi	0x12, 4	; 18
//	Local_enuErrorState = DIO_enuSetPinDirection( HEATER_GRP , HEATER_PIN , DIO_u8OUTPUT ) ;

	return ES_OK;
    587e:	80 e0       	ldi	r24, 0x00	; 0
}
    5880:	cf 91       	pop	r28
    5882:	df 91       	pop	r29
    5884:	08 95       	ret

00005886 <Heater_enuDisable>:

ES_t Heater_enuDisable( void )
{
    5886:	df 93       	push	r29
    5888:	cf 93       	push	r28
    588a:	cd b7       	in	r28, 0x3d	; 61
    588c:	de b7       	in	r29, 0x3e	; 62
//	ES_t Local_enuErrorState = ES_NOK ;

	ASM_CLR_BIT( HEATER_PORT , HEATER_PIN );
    588e:	94 98       	cbi	0x12, 4	; 18

//	Local_enuErrorState = DIO_enuSetPinDirection( HEATER_GRP , HEATER_PIN , DIO_u8INPUT ) ;

	return ES_OK ;
    5890:	80 e0       	ldi	r24, 0x00	; 0
}
    5892:	cf 91       	pop	r28
    5894:	df 91       	pop	r29
    5896:	08 95       	ret

00005898 <LM35_enuInit>:
#define TEMP_ADC_CH				CH_00
#define TEMP_CONVERSION_FACTOR	0.495	 		//	Degree/step
#define TEMP_OFFSET				(0.0)			//	Correction factor at mid range

ES_t LM35_enuInit(void)
{
    5898:	df 93       	push	r29
    589a:	cf 93       	push	r28
    589c:	00 d0       	rcall	.+0      	; 0x589e <LM35_enuInit+0x6>
    589e:	0f 92       	push	r0
    58a0:	cd b7       	in	r28, 0x3d	; 61
    58a2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    58a4:	81 e0       	ldi	r24, 0x01	; 1
    58a6:	89 83       	std	Y+1, r24	; 0x01

	Local_AenuErrorState[0] = DIO_enuSetPinDirection( TEMP_VALUE_GRP , TEMP_VALUE_PIN , DIO_u8INPUT );
    58a8:	8c e0       	ldi	r24, 0x0C	; 12
    58aa:	60 e0       	ldi	r22, 0x00	; 0
    58ac:	40 e0       	ldi	r20, 0x00	; 0
    58ae:	0e 94 85 23 	call	0x470a	; 0x470a <DIO_enuSetPinDirection>
    58b2:	8a 83       	std	Y+2, r24	; 0x02
	Local_AenuErrorState[1] = DIO_enuSetPinValue( TEMP_VALUE_GRP , TEMP_VALUE_PIN , TEMP_VALUE_STATE );
    58b4:	8c e0       	ldi	r24, 0x0C	; 12
    58b6:	60 e0       	ldi	r22, 0x00	; 0
    58b8:	40 e0       	ldi	r20, 0x00	; 0
    58ba:	0e 94 54 24 	call	0x48a8	; 0x48a8 <DIO_enuSetPinValue>
    58be:	8b 83       	std	Y+3, r24	; 0x03

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    58c0:	8a 81       	ldd	r24, Y+2	; 0x02
    58c2:	88 23       	and	r24, r24
    58c4:	51 f4       	brne	.+20     	; 0x58da <LM35_enuInit+0x42>
    58c6:	8b 81       	ldd	r24, Y+3	; 0x03
    58c8:	88 23       	and	r24, r24
    58ca:	39 f4       	brne	.+14     	; 0x58da <LM35_enuInit+0x42>
	{
		Local_AenuErrorState[0] = ADC_enuInit();
    58cc:	0e 94 53 26 	call	0x4ca6	; 0x4ca6 <ADC_enuInit>
    58d0:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = ADC_enuSelectChannel( TEMP_ADC_CH );
    58d2:	85 e8       	ldi	r24, 0x85	; 133
    58d4:	0e 94 14 27 	call	0x4e28	; 0x4e28 <ADC_enuSelectChannel>
    58d8:	8b 83       	std	Y+3, r24	; 0x03
 	}
	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    58da:	8a 81       	ldd	r24, Y+2	; 0x02
    58dc:	88 23       	and	r24, r24
    58de:	59 f4       	brne	.+22     	; 0x58f6 <LM35_enuInit+0x5e>
    58e0:	8b 81       	ldd	r24, Y+3	; 0x03
    58e2:	88 23       	and	r24, r24
    58e4:	41 f4       	brne	.+16     	; 0x58f6 <LM35_enuInit+0x5e>
	{

		Local_AenuErrorState[0] = ADC_enuCallBack( ADC_vidISR );
    58e6:	8d ec       	ldi	r24, 0xCD	; 205
    58e8:	9c e2       	ldi	r25, 0x2C	; 44
    58ea:	0e 94 8e 28 	call	0x511c	; 0x511c <ADC_enuCallBack>
    58ee:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = ADC_enuStartConversion();
    58f0:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <ADC_enuStartConversion>
    58f4:	8b 83       	std	Y+3, r24	; 0x03
	}
	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    58f6:	8a 81       	ldd	r24, Y+2	; 0x02
    58f8:	88 23       	and	r24, r24
    58fa:	21 f4       	brne	.+8      	; 0x5904 <LM35_enuInit+0x6c>
    58fc:	8b 81       	ldd	r24, Y+3	; 0x03
    58fe:	88 23       	and	r24, r24
    5900:	09 f4       	brne	.+2      	; 0x5904 <LM35_enuInit+0x6c>
		Local_enuErrorState = ES_OK ;
    5902:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    5904:	89 81       	ldd	r24, Y+1	; 0x01
}
    5906:	0f 90       	pop	r0
    5908:	0f 90       	pop	r0
    590a:	0f 90       	pop	r0
    590c:	cf 91       	pop	r28
    590e:	df 91       	pop	r29
    5910:	08 95       	ret

00005912 <LM35_enuReadTemp>:

ES_t LM35_enuReadTemp( u16 *Copy_u16TempValue )
{
    5912:	df 93       	push	r29
    5914:	cf 93       	push	r28
    5916:	00 d0       	rcall	.+0      	; 0x5918 <LM35_enuReadTemp+0x6>
    5918:	00 d0       	rcall	.+0      	; 0x591a <LM35_enuReadTemp+0x8>
    591a:	0f 92       	push	r0
    591c:	cd b7       	in	r28, 0x3d	; 61
    591e:	de b7       	in	r29, 0x3e	; 62
    5920:	9d 83       	std	Y+5, r25	; 0x05
    5922:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
    5924:	81 e0       	ldi	r24, 0x01	; 1
    5926:	89 83       	std	Y+1, r24	; 0x01
	u16 Local_u16TempValue;

	Global_blConverted = FALSE ;
    5928:	10 92 3f 02 	sts	0x023F, r1
	Local_enuErrorState = ADC_enuRead( &Local_u16TempValue );
    592c:	ce 01       	movw	r24, r28
    592e:	02 96       	adiw	r24, 0x02	; 2
    5930:	0e 94 92 27 	call	0x4f24	; 0x4f24 <ADC_enuRead>
    5934:	89 83       	std	Y+1, r24	; 0x01
	*Copy_u16TempValue = (u16)( ( (f32)Local_u16TempValue * TEMP_CONVERSION_FACTOR ) + TEMP_OFFSET );
    5936:	8a 81       	ldd	r24, Y+2	; 0x02
    5938:	9b 81       	ldd	r25, Y+3	; 0x03
    593a:	cc 01       	movw	r24, r24
    593c:	a0 e0       	ldi	r26, 0x00	; 0
    593e:	b0 e0       	ldi	r27, 0x00	; 0
    5940:	bc 01       	movw	r22, r24
    5942:	cd 01       	movw	r24, r26
    5944:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    5948:	dc 01       	movw	r26, r24
    594a:	cb 01       	movw	r24, r22
    594c:	bc 01       	movw	r22, r24
    594e:	cd 01       	movw	r24, r26
    5950:	24 ea       	ldi	r18, 0xA4	; 164
    5952:	30 e7       	ldi	r19, 0x70	; 112
    5954:	4d ef       	ldi	r20, 0xFD	; 253
    5956:	5e e3       	ldi	r21, 0x3E	; 62
    5958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    595c:	dc 01       	movw	r26, r24
    595e:	cb 01       	movw	r24, r22
    5960:	bc 01       	movw	r22, r24
    5962:	cd 01       	movw	r24, r26
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	30 e0       	ldi	r19, 0x00	; 0
    5968:	40 e0       	ldi	r20, 0x00	; 0
    596a:	50 e0       	ldi	r21, 0x00	; 0
    596c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5970:	dc 01       	movw	r26, r24
    5972:	cb 01       	movw	r24, r22
    5974:	bc 01       	movw	r22, r24
    5976:	cd 01       	movw	r24, r26
    5978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    597c:	dc 01       	movw	r26, r24
    597e:	cb 01       	movw	r24, r22
    5980:	ec 81       	ldd	r30, Y+4	; 0x04
    5982:	fd 81       	ldd	r31, Y+5	; 0x05
    5984:	91 83       	std	Z+1, r25	; 0x01
    5986:	80 83       	st	Z, r24

	return Local_enuErrorState ;
    5988:	89 81       	ldd	r24, Y+1	; 0x01
}
    598a:	0f 90       	pop	r0
    598c:	0f 90       	pop	r0
    598e:	0f 90       	pop	r0
    5990:	0f 90       	pop	r0
    5992:	0f 90       	pop	r0
    5994:	cf 91       	pop	r28
    5996:	df 91       	pop	r29
    5998:	08 95       	ret

0000599a <ADC_vidISR>:

void ADC_vidISR(void)
{
    599a:	df 93       	push	r29
    599c:	cf 93       	push	r28
    599e:	cd b7       	in	r28, 0x3d	; 61
    59a0:	de b7       	in	r29, 0x3e	; 62
	Global_blConverted = TRUE;
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	80 93 3f 02 	sts	0x023F, r24
}
    59a8:	cf 91       	pop	r28
    59aa:	df 91       	pop	r29
    59ac:	08 95       	ret

000059ae <main>:

extern bool Global_blConverted;

int
main(void)
{
    59ae:	ef 92       	push	r14
    59b0:	0f 93       	push	r16
    59b2:	1f 93       	push	r17
    59b4:	df 93       	push	r29
    59b6:	cf 93       	push	r28
    59b8:	0f 92       	push	r0
    59ba:	cd b7       	in	r28, 0x3d	; 61
    59bc:	de b7       	in	r29, 0x3e	; 62

	}

#else

	u8 SSeg_u8ActiveModule = TEMP_UNITS ;
    59be:	8c e0       	ldi	r24, 0x0C	; 12
    59c0:	89 83       	std	Y+1, r24	; 0x01

	LD_enuInit();
    59c2:	0e 94 26 2b 	call	0x564c	; 0x564c <LD_enuInit>
	Switch_enuInit();
    59c6:	0e 94 1c 29 	call	0x5238	; 0x5238 <Switch_enuInit>
	SevSeg_enuInit();
    59ca:	0e 94 c9 29 	call	0x5392	; 0x5392 <SevSeg_enuInit>
	LM35_enuInit();
    59ce:	0e 94 4c 2c 	call	0x5898	; 0x5898 <LM35_enuInit>
	Heater_enuInit();
    59d2:	0e 94 06 2c 	call	0x580c	; 0x580c <Heater_enuInit>
	Coolent_enuInit();
    59d6:	0e 94 b7 2b 	call	0x576e	; 0x576e <Coolent_enuInit>
	TMU_vidInit();
    59da:	0e 94 e7 06 	call	0xdce	; 0xdce <TMU_vidInit>

	EEPROM_Access( &EEPROM_SetTempAddress );
    59de:	82 ec       	ldi	r24, 0xC2	; 194
    59e0:	91 e0       	ldi	r25, 0x01	; 1
    59e2:	0e 94 65 30 	call	0x60ca	; 0x60ca <EEPROM_Access>

	TMU_vidCreateTask(CheckTemperatureStatus, NULL					, 8 , PAUSED , 5 , 0 );
    59e6:	82 ef       	ldi	r24, 0xF2	; 242
    59e8:	9d e2       	ldi	r25, 0x2D	; 45
    59ea:	60 e0       	ldi	r22, 0x00	; 0
    59ec:	70 e0       	ldi	r23, 0x00	; 0
    59ee:	48 e0       	ldi	r20, 0x08	; 8
    59f0:	28 e3       	ldi	r18, 0x38	; 56
    59f2:	05 e0       	ldi	r16, 0x05	; 5
    59f4:	10 e0       	ldi	r17, 0x00	; 0
    59f6:	ee 24       	eor	r14, r14
    59f8:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>
	TMU_vidCreateTask(DisplayTemperature	, &SSeg_u8ActiveModule	, 7 , PAUSED , 2 , 0 );
    59fc:	81 e7       	ldi	r24, 0x71	; 113
    59fe:	9d e2       	ldi	r25, 0x2D	; 45
    5a00:	9e 01       	movw	r18, r28
    5a02:	2f 5f       	subi	r18, 0xFF	; 255
    5a04:	3f 4f       	sbci	r19, 0xFF	; 255
    5a06:	b9 01       	movw	r22, r18
    5a08:	47 e0       	ldi	r20, 0x07	; 7
    5a0a:	28 e3       	ldi	r18, 0x38	; 56
    5a0c:	02 e0       	ldi	r16, 0x02	; 2
    5a0e:	10 e0       	ldi	r17, 0x00	; 0
    5a10:	ee 24       	eor	r14, r14
    5a12:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>
	TMU_vidCreateTask(AdjustHeaterStatus	, NULL					, 6 , PAUSED , 50, 11);
    5a16:	81 e2       	ldi	r24, 0x21	; 33
    5a18:	90 e3       	ldi	r25, 0x30	; 48
    5a1a:	60 e0       	ldi	r22, 0x00	; 0
    5a1c:	70 e0       	ldi	r23, 0x00	; 0
    5a1e:	46 e0       	ldi	r20, 0x06	; 6
    5a20:	28 e3       	ldi	r18, 0x38	; 56
    5a22:	02 e3       	ldi	r16, 0x32	; 50
    5a24:	10 e0       	ldi	r17, 0x00	; 0
    5a26:	0f 2e       	mov	r0, r31
    5a28:	fb e0       	ldi	r31, 0x0B	; 11
    5a2a:	ef 2e       	mov	r14, r31
    5a2c:	f0 2d       	mov	r31, r0
    5a2e:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>
	TMU_vidCreateTask(AdjustCoolentStatus	, NULL					, 5 , PAUSED , 50, 11);
    5a32:	83 e4       	ldi	r24, 0x43	; 67
    5a34:	90 e3       	ldi	r25, 0x30	; 48
    5a36:	60 e0       	ldi	r22, 0x00	; 0
    5a38:	70 e0       	ldi	r23, 0x00	; 0
    5a3a:	45 e0       	ldi	r20, 0x05	; 5
    5a3c:	28 e3       	ldi	r18, 0x38	; 56
    5a3e:	02 e3       	ldi	r16, 0x32	; 50
    5a40:	10 e0       	ldi	r17, 0x00	; 0
    5a42:	0f 2e       	mov	r0, r31
    5a44:	fb e0       	ldi	r31, 0x0B	; 11
    5a46:	ef 2e       	mov	r14, r31
    5a48:	f0 2d       	mov	r31, r0
    5a4a:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>
	TMU_vidCreateTask(AdjustRedLampStatus	, NULL					, 4 , PAUSED , 50, 17);
    5a4e:	8d ed       	ldi	r24, 0xDD	; 221
    5a50:	9f e2       	ldi	r25, 0x2F	; 47
    5a52:	60 e0       	ldi	r22, 0x00	; 0
    5a54:	70 e0       	ldi	r23, 0x00	; 0
    5a56:	44 e0       	ldi	r20, 0x04	; 4
    5a58:	28 e3       	ldi	r18, 0x38	; 56
    5a5a:	02 e3       	ldi	r16, 0x32	; 50
    5a5c:	10 e0       	ldi	r17, 0x00	; 0
    5a5e:	0f 2e       	mov	r0, r31
    5a60:	f1 e1       	ldi	r31, 0x11	; 17
    5a62:	ef 2e       	mov	r14, r31
    5a64:	f0 2d       	mov	r31, r0
    5a66:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckIncrementSwitch	, NULL					, 3 , PAUSED , 3 , 1 );
    5a6a:	8a e7       	ldi	r24, 0x7A	; 122
    5a6c:	9e e2       	ldi	r25, 0x2E	; 46
    5a6e:	60 e0       	ldi	r22, 0x00	; 0
    5a70:	70 e0       	ldi	r23, 0x00	; 0
    5a72:	43 e0       	ldi	r20, 0x03	; 3
    5a74:	28 e3       	ldi	r18, 0x38	; 56
    5a76:	03 e0       	ldi	r16, 0x03	; 3
    5a78:	10 e0       	ldi	r17, 0x00	; 0
    5a7a:	ee 24       	eor	r14, r14
    5a7c:	e3 94       	inc	r14
    5a7e:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckDecrementSwitch	, NULL					, 2 , PAUSED , 3 , 1 );
    5a82:	8b ef       	ldi	r24, 0xFB	; 251
    5a84:	9e e2       	ldi	r25, 0x2E	; 46
    5a86:	60 e0       	ldi	r22, 0x00	; 0
    5a88:	70 e0       	ldi	r23, 0x00	; 0
    5a8a:	42 e0       	ldi	r20, 0x02	; 2
    5a8c:	28 e3       	ldi	r18, 0x38	; 56
    5a8e:	03 e0       	ldi	r16, 0x03	; 3
    5a90:	10 e0       	ldi	r17, 0x00	; 0
    5a92:	ee 24       	eor	r14, r14
    5a94:	e3 94       	inc	r14
    5a96:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckPowerSwitch		, NULL					, 1 , READY  , 3 , 0 );
    5a9a:	8c e7       	ldi	r24, 0x7C	; 124
    5a9c:	9f e2       	ldi	r25, 0x2F	; 47
    5a9e:	60 e0       	ldi	r22, 0x00	; 0
    5aa0:	70 e0       	ldi	r23, 0x00	; 0
    5aa2:	41 e0       	ldi	r20, 0x01	; 1
    5aa4:	27 e1       	ldi	r18, 0x17	; 23
    5aa6:	03 e0       	ldi	r16, 0x03	; 3
    5aa8:	10 e0       	ldi	r17, 0x00	; 0
    5aaa:	ee 24       	eor	r14, r14
    5aac:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>
	TMU_vidCreateTask(EEPROM_Access			, &EEPROM_SetTempAddress, 0 , READY  , 3 , 2 );
    5ab0:	85 e6       	ldi	r24, 0x65	; 101
    5ab2:	90 e3       	ldi	r25, 0x30	; 48
    5ab4:	22 ec       	ldi	r18, 0xC2	; 194
    5ab6:	31 e0       	ldi	r19, 0x01	; 1
    5ab8:	b9 01       	movw	r22, r18
    5aba:	40 e0       	ldi	r20, 0x00	; 0
    5abc:	27 e1       	ldi	r18, 0x17	; 23
    5abe:	03 e0       	ldi	r16, 0x03	; 3
    5ac0:	10 e0       	ldi	r17, 0x00	; 0
    5ac2:	ee 24       	eor	r14, r14
    5ac4:	68 94       	set
    5ac6:	e1 f8       	bld	r14, 1
    5ac8:	0e 94 81 07 	call	0xf02	; 0xf02 <TMU_vidCreateTask>

	TMU_vidStartScheduler();
    5acc:	0e 94 fa 07 	call	0xff4	; 0xff4 <TMU_vidStartScheduler>
    5ad0:	80 e0       	ldi	r24, 0x00	; 0
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    5ad4:	0f 90       	pop	r0
    5ad6:	cf 91       	pop	r28
    5ad8:	df 91       	pop	r29
    5ada:	1f 91       	pop	r17
    5adc:	0f 91       	pop	r16
    5ade:	ef 90       	pop	r14
    5ae0:	08 95       	ret

00005ae2 <DisplayTemperature>:

void DisplayTemperature(void *Copy_pu8ActiveModule)
{
    5ae2:	df 93       	push	r29
    5ae4:	cf 93       	push	r28
    5ae6:	00 d0       	rcall	.+0      	; 0x5ae8 <DisplayTemperature+0x6>
    5ae8:	00 d0       	rcall	.+0      	; 0x5aea <DisplayTemperature+0x8>
    5aea:	00 d0       	rcall	.+0      	; 0x5aec <DisplayTemperature+0xa>
    5aec:	cd b7       	in	r28, 0x3d	; 61
    5aee:	de b7       	in	r29, 0x3e	; 62
    5af0:	9d 83       	std	Y+5, r25	; 0x05
    5af2:	8c 83       	std	Y+4, r24	; 0x04
	u8 *Local_u8ActiveModule = (u8*)Copy_pu8ActiveModule ;
    5af4:	8c 81       	ldd	r24, Y+4	; 0x04
    5af6:	9d 81       	ldd	r25, Y+5	; 0x05
    5af8:	9b 83       	std	Y+3, r25	; 0x03
    5afa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DisplayValue;
	static u8 BlinkDelay = BLINK_COUNTS ;
	static bool BlinkStatus = FALSE ;

	if( PowerStatus == ON)
    5afc:	80 91 bd 01 	lds	r24, 0x01BD
    5b00:	88 23       	and	r24, r24
    5b02:	09 f0       	breq	.+2      	; 0x5b06 <DisplayTemperature+0x24>
    5b04:	59 c0       	rjmp	.+178    	; 0x5bb8 <DisplayTemperature+0xd6>
	{
		if( Global_u8DisplayMode == NORMAL )								//	NORMAL Operation Mode
    5b06:	80 91 c0 01 	lds	r24, 0x01C0
    5b0a:	85 30       	cpi	r24, 0x05	; 5
    5b0c:	51 f4       	brne	.+20     	; 0x5b22 <DisplayTemperature+0x40>
		{																	//	*********************
			Local_u8DisplayValue = Global_u8TempValue ;						//	Set Display Value to Actual Temperature Value
    5b0e:	80 91 c6 01 	lds	r24, 0x01C6
    5b12:	89 83       	std	Y+1, r24	; 0x01
			if(BlinkStatus == TRUE ) BlinkStatus = FALSE ;					//	Confirm Blinking is Disabled
    5b14:	80 91 42 02 	lds	r24, 0x0242
    5b18:	81 30       	cpi	r24, 0x01	; 1
    5b1a:	e1 f4       	brne	.+56     	; 0x5b54 <DisplayTemperature+0x72>
    5b1c:	10 92 42 02 	sts	0x0242, r1
    5b20:	19 c0       	rjmp	.+50     	; 0x5b54 <DisplayTemperature+0x72>
		}
		else																// SETUP Mode
		{																	//	*********
			Local_u8DisplayValue = Global_u8TempSetValue ;					//	Set Display Value to Set Temperature Value
    5b22:	80 91 49 02 	lds	r24, 0x0249
    5b26:	89 83       	std	Y+1, r24	; 0x01
			BlinkDelay--;													//	Blink Delay counter decrement
    5b28:	80 91 c7 01 	lds	r24, 0x01C7
    5b2c:	81 50       	subi	r24, 0x01	; 1
    5b2e:	80 93 c7 01 	sts	0x01C7, r24
			if(!BlinkDelay)													//	Check if Blink delay is completed
    5b32:	80 91 c7 01 	lds	r24, 0x01C7
    5b36:	88 23       	and	r24, r24
    5b38:	69 f4       	brne	.+26     	; 0x5b54 <DisplayTemperature+0x72>
			{
				BlinkDelay = BLINK_COUNTS;									//	Reset Blink Delay Counter
    5b3a:	82 e0       	ldi	r24, 0x02	; 2
    5b3c:	80 93 c7 01 	sts	0x01C7, r24
				BlinkStatus = ( ( BlinkStatus == TRUE )? FALSE : TRUE ) ;	//	Flip BlinkStatus Value
    5b40:	80 91 42 02 	lds	r24, 0x0242
    5b44:	1e 82       	std	Y+6, r1	; 0x06
    5b46:	81 30       	cpi	r24, 0x01	; 1
    5b48:	11 f0       	breq	.+4      	; 0x5b4e <DisplayTemperature+0x6c>
    5b4a:	81 e0       	ldi	r24, 0x01	; 1
    5b4c:	8e 83       	std	Y+6, r24	; 0x06
    5b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    5b50:	80 93 42 02 	sts	0x0242, r24
			}
		}

		if( *Local_u8ActiveModule == TEMP_UNITS )
    5b54:	ea 81       	ldd	r30, Y+2	; 0x02
    5b56:	fb 81       	ldd	r31, Y+3	; 0x03
    5b58:	80 81       	ld	r24, Z
    5b5a:	8c 30       	cpi	r24, 0x0C	; 12
    5b5c:	b9 f4       	brne	.+46     	; 0x5b8c <DisplayTemperature+0xaa>
		{
			SevSeg_enuModuleDisable( TEMP_TENS );							// TURN OFF Seven Segment Tens Module
    5b5e:	8b e0       	ldi	r24, 0x0B	; 11
    5b60:	0e 94 ef 2a 	call	0x55de	; 0x55de <SevSeg_enuModuleDisable>
			SevSeg_enuSetDigitValue( Local_u8DisplayValue % 10 );			// Set Value for Units Digit
    5b64:	89 81       	ldd	r24, Y+1	; 0x01
    5b66:	9a e0       	ldi	r25, 0x0A	; 10
    5b68:	69 2f       	mov	r22, r25
    5b6a:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <__udivmodqi4>
    5b6e:	89 2f       	mov	r24, r25
    5b70:	0e 94 56 2a 	call	0x54ac	; 0x54ac <SevSeg_enuSetDigitValue>
			if( BlinkStatus == FALSE )SevSeg_enuModuleEnable( TEMP_UNITS );	// TURN ON Seven Segment Units Module
    5b74:	80 91 42 02 	lds	r24, 0x0242
    5b78:	88 23       	and	r24, r24
    5b7a:	19 f4       	brne	.+6      	; 0x5b82 <DisplayTemperature+0xa0>
    5b7c:	8c e0       	ldi	r24, 0x0C	; 12
    5b7e:	0e 94 b8 2a 	call	0x5570	; 0x5570 <SevSeg_enuModuleEnable>
			*Local_u8ActiveModule = TEMP_TENS ;								// Switch Active module to be Displayed to Tens
    5b82:	ea 81       	ldd	r30, Y+2	; 0x02
    5b84:	fb 81       	ldd	r31, Y+3	; 0x03
    5b86:	8b e0       	ldi	r24, 0x0B	; 11
    5b88:	80 83       	st	Z, r24
    5b8a:	23 c0       	rjmp	.+70     	; 0x5bd2 <DisplayTemperature+0xf0>
		}
		else
		{
			SevSeg_enuModuleDisable( TEMP_UNITS );							// TURN OFF Seven Segment Units Module
    5b8c:	8c e0       	ldi	r24, 0x0C	; 12
    5b8e:	0e 94 ef 2a 	call	0x55de	; 0x55de <SevSeg_enuModuleDisable>
			SevSeg_enuSetDigitValue( Local_u8DisplayValue / 10 );			// Set Value for Tens Digit
    5b92:	89 81       	ldd	r24, Y+1	; 0x01
    5b94:	9a e0       	ldi	r25, 0x0A	; 10
    5b96:	69 2f       	mov	r22, r25
    5b98:	0e 94 d4 30 	call	0x61a8	; 0x61a8 <__udivmodqi4>
    5b9c:	0e 94 56 2a 	call	0x54ac	; 0x54ac <SevSeg_enuSetDigitValue>
			if( BlinkStatus == FALSE )SevSeg_enuModuleEnable( TEMP_TENS );	// TURN ON Seven Segment Tens Module
    5ba0:	80 91 42 02 	lds	r24, 0x0242
    5ba4:	88 23       	and	r24, r24
    5ba6:	19 f4       	brne	.+6      	; 0x5bae <DisplayTemperature+0xcc>
    5ba8:	8b e0       	ldi	r24, 0x0B	; 11
    5baa:	0e 94 b8 2a 	call	0x5570	; 0x5570 <SevSeg_enuModuleEnable>
			*Local_u8ActiveModule = TEMP_UNITS ;							// Switch Active module to be Displayed to Units
    5bae:	ea 81       	ldd	r30, Y+2	; 0x02
    5bb0:	fb 81       	ldd	r31, Y+3	; 0x03
    5bb2:	8c e0       	ldi	r24, 0x0C	; 12
    5bb4:	80 83       	st	Z, r24
    5bb6:	0d c0       	rjmp	.+26     	; 0x5bd2 <DisplayTemperature+0xf0>
		}
	}
	else
	{
		SevSeg_enuModuleDisable( TEMP_UNITS );								//	TURN OFF Seven Segment Units Module
    5bb8:	8c e0       	ldi	r24, 0x0C	; 12
    5bba:	0e 94 ef 2a 	call	0x55de	; 0x55de <SevSeg_enuModuleDisable>
		SevSeg_enuModuleDisable( TEMP_TENS );								//	TURN OFF Seven Segment Tens Module
    5bbe:	8b e0       	ldi	r24, 0x0B	; 11
    5bc0:	0e 94 ef 2a 	call	0x55de	; 0x55de <SevSeg_enuModuleDisable>
		*Local_u8ActiveModule = TEMP_UNITS;									//	Set Active module to be Displayed to Units
    5bc4:	ea 81       	ldd	r30, Y+2	; 0x02
    5bc6:	fb 81       	ldd	r31, Y+3	; 0x03
    5bc8:	8c e0       	ldi	r24, 0x0C	; 12
    5bca:	80 83       	st	Z, r24
		TMU_vidPauseTask( 7 );												//	Pause Display Temperature Task
    5bcc:	87 e0       	ldi	r24, 0x07	; 7
    5bce:	0e 94 c8 08 	call	0x1190	; 0x1190 <TMU_vidPauseTask>
	}
}
    5bd2:	26 96       	adiw	r28, 0x06	; 6
    5bd4:	0f b6       	in	r0, 0x3f	; 63
    5bd6:	f8 94       	cli
    5bd8:	de bf       	out	0x3e, r29	; 62
    5bda:	0f be       	out	0x3f, r0	; 63
    5bdc:	cd bf       	out	0x3d, r28	; 61
    5bde:	cf 91       	pop	r28
    5be0:	df 91       	pop	r29
    5be2:	08 95       	ret

00005be4 <CheckTemperatureStatus>:

void CheckTemperatureStatus(void *pNULL)
{
    5be4:	df 93       	push	r29
    5be6:	cf 93       	push	r28
    5be8:	00 d0       	rcall	.+0      	; 0x5bea <CheckTemperatureStatus+0x6>
    5bea:	00 d0       	rcall	.+0      	; 0x5bec <CheckTemperatureStatus+0x8>
    5bec:	cd b7       	in	r28, 0x3d	; 61
    5bee:	de b7       	in	r29, 0x3e	; 62
    5bf0:	9c 83       	std	Y+4, r25	; 0x04
    5bf2:	8b 83       	std	Y+3, r24	; 0x03
#if DEBUG != 1
	static u16 Local_u16TempAccValue = 0 ;
	static u8 Local_u8TempReadCounter = TEMP_AVG_READINGS ;
#endif

	if( Global_u8DisplayMode == NORMAL && PowerStatus == ON )
    5bf4:	80 91 c0 01 	lds	r24, 0x01C0
    5bf8:	85 30       	cpi	r24, 0x05	; 5
    5bfa:	09 f0       	breq	.+2      	; 0x5bfe <CheckTemperatureStatus+0x1a>
    5bfc:	69 c0       	rjmp	.+210    	; 0x5cd0 <CheckTemperatureStatus+0xec>
    5bfe:	80 91 bd 01 	lds	r24, 0x01BD
    5c02:	88 23       	and	r24, r24
    5c04:	09 f0       	breq	.+2      	; 0x5c08 <CheckTemperatureStatus+0x24>
    5c06:	64 c0       	rjmp	.+200    	; 0x5cd0 <CheckTemperatureStatus+0xec>
				ADC_enuStartConversion();
			}

		}
#else
		if( Global_blConverted == TRUE )
    5c08:	80 91 3f 02 	lds	r24, 0x023F
    5c0c:	81 30       	cpi	r24, 0x01	; 1
    5c0e:	c9 f4       	brne	.+50     	; 0x5c42 <CheckTemperatureStatus+0x5e>
		{
			if( ES_OK == LM35_enuReadTemp( &Local_u16TempValue ) )
    5c10:	ce 01       	movw	r24, r28
    5c12:	01 96       	adiw	r24, 0x01	; 1
    5c14:	0e 94 89 2c 	call	0x5912	; 0x5912 <LM35_enuReadTemp>
    5c18:	88 23       	and	r24, r24
    5c1a:	99 f4       	brne	.+38     	; 0x5c42 <CheckTemperatureStatus+0x5e>
			{
				Local_u16TempAccValue += Local_u16TempValue ;
    5c1c:	20 91 43 02 	lds	r18, 0x0243
    5c20:	30 91 44 02 	lds	r19, 0x0244
    5c24:	89 81       	ldd	r24, Y+1	; 0x01
    5c26:	9a 81       	ldd	r25, Y+2	; 0x02
    5c28:	82 0f       	add	r24, r18
    5c2a:	93 1f       	adc	r25, r19
    5c2c:	90 93 44 02 	sts	0x0244, r25
    5c30:	80 93 43 02 	sts	0x0243, r24
				ADC_enuStartConversion();
    5c34:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <ADC_enuStartConversion>
				Local_u8TempReadCounter--;
    5c38:	80 91 c8 01 	lds	r24, 0x01C8
    5c3c:	81 50       	subi	r24, 0x01	; 1
    5c3e:	80 93 c8 01 	sts	0x01C8, r24
			}
		}
		if( !Local_u8TempReadCounter )
    5c42:	80 91 c8 01 	lds	r24, 0x01C8
    5c46:	88 23       	and	r24, r24
    5c48:	09 f0       	breq	.+2      	; 0x5c4c <CheckTemperatureStatus+0x68>
    5c4a:	4d c0       	rjmp	.+154    	; 0x5ce6 <CheckTemperatureStatus+0x102>
		{
			Local_u8TempReadCounter = TEMP_AVG_READINGS;
    5c4c:	8a e0       	ldi	r24, 0x0A	; 10
    5c4e:	80 93 c8 01 	sts	0x01C8, r24
			Global_u8TempValue = Local_u16TempAccValue / TEMP_AVG_READINGS ;
    5c52:	80 91 43 02 	lds	r24, 0x0243
    5c56:	90 91 44 02 	lds	r25, 0x0244
    5c5a:	2a e0       	ldi	r18, 0x0A	; 10
    5c5c:	30 e0       	ldi	r19, 0x00	; 0
    5c5e:	b9 01       	movw	r22, r18
    5c60:	0e 94 e0 30 	call	0x61c0	; 0x61c0 <__udivmodhi4>
    5c64:	cb 01       	movw	r24, r22
    5c66:	80 93 c6 01 	sts	0x01C6, r24
			Global_s8TempError = Global_u8TempValue - Global_u8TempSetValue ;
    5c6a:	90 91 c6 01 	lds	r25, 0x01C6
    5c6e:	80 91 49 02 	lds	r24, 0x0249
    5c72:	29 2f       	mov	r18, r25
    5c74:	28 1b       	sub	r18, r24
    5c76:	82 2f       	mov	r24, r18
    5c78:	80 93 41 02 	sts	0x0241, r24
#endif
			if( Global_s8TempError >= HTR_TEMP_TOLERANCE )
    5c7c:	80 91 41 02 	lds	r24, 0x0241
    5c80:	85 30       	cpi	r24, 0x05	; 5
    5c82:	8c f0       	brlt	.+34     	; 0x5ca6 <CheckTemperatureStatus+0xc2>
			{
				if( HeaterStatus == OFF )
    5c84:	80 91 be 01 	lds	r24, 0x01BE
    5c88:	81 30       	cpi	r24, 0x01	; 1
    5c8a:	49 f4       	brne	.+18     	; 0x5c9e <CheckTemperatureStatus+0xba>
				{
					CoolentStatus = ON ;
    5c8c:	10 92 bf 01 	sts	0x01BF, r1
					LedStatus = LD_ON ;
    5c90:	81 e0       	ldi	r24, 0x01	; 1
    5c92:	80 93 40 02 	sts	0x0240, r24
#if DEBUG !=1
					TMU_vidResumeTask( 5 );
    5c96:	85 e0       	ldi	r24, 0x05	; 5
    5c98:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
    5c9c:	24 c0       	rjmp	.+72     	; 0x5ce6 <CheckTemperatureStatus+0x102>
#endif
				}
				else
				{
					HeaterStatus = OFF ;
    5c9e:	81 e0       	ldi	r24, 0x01	; 1
    5ca0:	80 93 be 01 	sts	0x01BE, r24
    5ca4:	20 c0       	rjmp	.+64     	; 0x5ce6 <CheckTemperatureStatus+0x102>
				}
			}
			else if( Global_s8TempError <= -COOLENT_TEMP_TOLERANCE )
    5ca6:	80 91 41 02 	lds	r24, 0x0241
    5caa:	8c 3f       	cpi	r24, 0xFC	; 252
    5cac:	e4 f4       	brge	.+56     	; 0x5ce6 <CheckTemperatureStatus+0x102>
			{
				if( CoolentStatus == OFF )
    5cae:	80 91 bf 01 	lds	r24, 0x01BF
    5cb2:	81 30       	cpi	r24, 0x01	; 1
    5cb4:	49 f4       	brne	.+18     	; 0x5cc8 <CheckTemperatureStatus+0xe4>
				{
					HeaterStatus = ON ;
    5cb6:	10 92 be 01 	sts	0x01BE, r1
					LedStatus = LD_BLINK ;
    5cba:	83 e1       	ldi	r24, 0x13	; 19
    5cbc:	80 93 40 02 	sts	0x0240, r24
#if DEBUG !=1
					TMU_vidResumeTask( 6 );
    5cc0:	86 e0       	ldi	r24, 0x06	; 6
    5cc2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
    5cc6:	0f c0       	rjmp	.+30     	; 0x5ce6 <CheckTemperatureStatus+0x102>
#endif
				}
				else
				{
					CoolentStatus = OFF ;
    5cc8:	81 e0       	ldi	r24, 0x01	; 1
    5cca:	80 93 bf 01 	sts	0x01BF, r24
    5cce:	0b c0       	rjmp	.+22     	; 0x5ce6 <CheckTemperatureStatus+0x102>
#endif
		}
	}
	else
	{
		LedStatus = LD_OFF ;
    5cd0:	10 92 40 02 	sts	0x0240, r1
		HeaterStatus = OFF ;
    5cd4:	81 e0       	ldi	r24, 0x01	; 1
    5cd6:	80 93 be 01 	sts	0x01BE, r24
		CoolentStatus = OFF ;
    5cda:	81 e0       	ldi	r24, 0x01	; 1
    5cdc:	80 93 bf 01 	sts	0x01BF, r24
#if DEBUG !=1
		TMU_vidPauseTask( 8 );
    5ce0:	88 e0       	ldi	r24, 0x08	; 8
    5ce2:	0e 94 c8 08 	call	0x1190	; 0x1190 <TMU_vidPauseTask>
#endif
	}
}
    5ce6:	0f 90       	pop	r0
    5ce8:	0f 90       	pop	r0
    5cea:	0f 90       	pop	r0
    5cec:	0f 90       	pop	r0
    5cee:	cf 91       	pop	r28
    5cf0:	df 91       	pop	r29
    5cf2:	08 95       	ret

00005cf4 <CheckIncrementSwitch>:

void CheckIncrementSwitch(void *pNULL)
{
    5cf4:	df 93       	push	r29
    5cf6:	cf 93       	push	r28
    5cf8:	00 d0       	rcall	.+0      	; 0x5cfa <CheckIncrementSwitch+0x6>
    5cfa:	0f 92       	push	r0
    5cfc:	cd b7       	in	r28, 0x3d	; 61
    5cfe:	de b7       	in	r29, 0x3e	; 62
    5d00:	9b 83       	std	Y+3, r25	; 0x03
    5d02:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;


		if( ES_OK == Switch_enuGetPressed( INC_SW , &Local_u8SwitchValue ) )
    5d04:	8a ec       	ldi	r24, 0xCA	; 202
    5d06:	9e 01       	movw	r18, r28
    5d08:	2f 5f       	subi	r18, 0xFF	; 255
    5d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d0c:	b9 01       	movw	r22, r18
    5d0e:	0e 94 8b 29 	call	0x5316	; 0x5316 <Switch_enuGetPressed>
    5d12:	88 23       	and	r24, r24
    5d14:	09 f0       	breq	.+2      	; 0x5d18 <CheckIncrementSwitch+0x24>
    5d16:	69 c0       	rjmp	.+210    	; 0x5dea <CheckIncrementSwitch+0xf6>
		{
			static u8 press = 0, BounceDelay = BOUNCE_COUNTS ;
			static u16 SetupDelay = SETUP_COUNTS ;
			if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 )  // First press
    5d18:	89 81       	ldd	r24, Y+1	; 0x01
    5d1a:	81 30       	cpi	r24, 0x01	; 1
    5d1c:	51 f5       	brne	.+84     	; 0x5d72 <CheckIncrementSwitch+0x7e>
    5d1e:	80 91 45 02 	lds	r24, 0x0245
    5d22:	88 23       	and	r24, r24
    5d24:	31 f5       	brne	.+76     	; 0x5d72 <CheckIncrementSwitch+0x7e>
			{
				if( Global_u8DisplayMode == NORMAL )
    5d26:	80 91 c0 01 	lds	r24, 0x01C0
    5d2a:	85 30       	cpi	r24, 0x05	; 5
    5d2c:	39 f4       	brne	.+14     	; 0x5d3c <CheckIncrementSwitch+0x48>
				{
					Global_u8DisplayMode = SETUP ;
    5d2e:	89 e0       	ldi	r24, 0x09	; 9
    5d30:	80 93 c0 01 	sts	0x01C0, r24
					Global_u8SetupSw = INC_SW ;
    5d34:	8a ec       	ldi	r24, 0xCA	; 202
    5d36:	80 93 c1 01 	sts	0x01C1, r24
    5d3a:	57 c0       	rjmp	.+174    	; 0x5dea <CheckIncrementSwitch+0xf6>
				}
				else
				{
					if( Global_u8SetupSw != INC_SW )
    5d3c:	80 91 c1 01 	lds	r24, 0x01C1
    5d40:	8a 3c       	cpi	r24, 0xCA	; 202
    5d42:	19 f0       	breq	.+6      	; 0x5d4a <CheckIncrementSwitch+0x56>
					{
						Global_u8SetupSw = INC_SW ;
    5d44:	8a ec       	ldi	r24, 0xCA	; 202
    5d46:	80 93 c1 01 	sts	0x01C1, r24
					}
					if( Global_u8TempSetValue < TEMP_MAX_LIMIT )
    5d4a:	80 91 49 02 	lds	r24, 0x0249
    5d4e:	8b 34       	cpi	r24, 0x4B	; 75
    5d50:	08 f0       	brcs	.+2      	; 0x5d54 <CheckIncrementSwitch+0x60>
    5d52:	4b c0       	rjmp	.+150    	; 0x5dea <CheckIncrementSwitch+0xf6>
					{
						SetupDelay = SETUP_COUNTS;
    5d54:	8a e0       	ldi	r24, 0x0A	; 10
    5d56:	90 e0       	ldi	r25, 0x00	; 0
    5d58:	90 93 ca 01 	sts	0x01CA, r25
    5d5c:	80 93 c9 01 	sts	0x01C9, r24
						press = 1 ;
    5d60:	81 e0       	ldi	r24, 0x01	; 1
    5d62:	80 93 45 02 	sts	0x0245, r24
#if DEBUG == 1
						LedStatus = LD_ON ;
#else
						Global_u8TempSetValue++;
    5d66:	80 91 49 02 	lds	r24, 0x0249
    5d6a:	8f 5f       	subi	r24, 0xFF	; 255
    5d6c:	80 93 49 02 	sts	0x0249, r24
    5d70:	3c c0       	rjmp	.+120    	; 0x5dea <CheckIncrementSwitch+0xf6>
#endif
					}
				}
			}
			else if ( (Local_u8SwitchValue == DIO_u8LOW ) && press == 1 ) // Removed first press
    5d72:	89 81       	ldd	r24, Y+1	; 0x01
    5d74:	88 23       	and	r24, r24
    5d76:	99 f4       	brne	.+38     	; 0x5d9e <CheckIncrementSwitch+0xaa>
    5d78:	80 91 45 02 	lds	r24, 0x0245
    5d7c:	81 30       	cpi	r24, 0x01	; 1
    5d7e:	79 f4       	brne	.+30     	; 0x5d9e <CheckIncrementSwitch+0xaa>
			{
				BounceDelay--;
    5d80:	80 91 cb 01 	lds	r24, 0x01CB
    5d84:	81 50       	subi	r24, 0x01	; 1
    5d86:	80 93 cb 01 	sts	0x01CB, r24
				if( !BounceDelay )
    5d8a:	80 91 cb 01 	lds	r24, 0x01CB
    5d8e:	88 23       	and	r24, r24
    5d90:	61 f5       	brne	.+88     	; 0x5dea <CheckIncrementSwitch+0xf6>
				{
					press = 0 ;
    5d92:	10 92 45 02 	sts	0x0245, r1
					BounceDelay = BOUNCE_COUNTS ;
    5d96:	82 e0       	ldi	r24, 0x02	; 2
    5d98:	80 93 cb 01 	sts	0x01CB, r24
    5d9c:	26 c0       	rjmp	.+76     	; 0x5dea <CheckIncrementSwitch+0xf6>
				}
			}
			else if (	( Global_u8SetupSw == INC_SW ) &&	press == 0  &&
    5d9e:	80 91 c1 01 	lds	r24, 0x01C1
    5da2:	8a 3c       	cpi	r24, 0xCA	; 202
    5da4:	11 f5       	brne	.+68     	; 0x5dea <CheckIncrementSwitch+0xf6>
    5da6:	80 91 45 02 	lds	r24, 0x0245
    5daa:	88 23       	and	r24, r24
    5dac:	f1 f4       	brne	.+60     	; 0x5dea <CheckIncrementSwitch+0xf6>
    5dae:	89 81       	ldd	r24, Y+1	; 0x01
    5db0:	88 23       	and	r24, r24
    5db2:	d9 f4       	brne	.+54     	; 0x5dea <CheckIncrementSwitch+0xf6>
						(Local_u8SwitchValue == DIO_u8LOW ) ) // Unpress delay in Setup mode
			{
				SetupDelay--;
    5db4:	80 91 c9 01 	lds	r24, 0x01C9
    5db8:	90 91 ca 01 	lds	r25, 0x01CA
    5dbc:	01 97       	sbiw	r24, 0x01	; 1
    5dbe:	90 93 ca 01 	sts	0x01CA, r25
    5dc2:	80 93 c9 01 	sts	0x01C9, r24
				if( !SetupDelay )
    5dc6:	80 91 c9 01 	lds	r24, 0x01C9
    5dca:	90 91 ca 01 	lds	r25, 0x01CA
    5dce:	00 97       	sbiw	r24, 0x00	; 0
    5dd0:	61 f4       	brne	.+24     	; 0x5dea <CheckIncrementSwitch+0xf6>
				{
					TMU_vidResumeTask( 0 );
    5dd2:	80 e0       	ldi	r24, 0x00	; 0
    5dd4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
					Global_u8DisplayMode = NORMAL ;
    5dd8:	85 e0       	ldi	r24, 0x05	; 5
    5dda:	80 93 c0 01 	sts	0x01C0, r24
					Global_u8SetupSw = NONE ;
    5dde:	87 e0       	ldi	r24, 0x07	; 7
    5de0:	80 93 c1 01 	sts	0x01C1, r24
					SetTempUpdate = TRUE ;
    5de4:	81 e0       	ldi	r24, 0x01	; 1
    5de6:	80 93 c5 01 	sts	0x01C5, r24
				}
			}

		}
}
    5dea:	0f 90       	pop	r0
    5dec:	0f 90       	pop	r0
    5dee:	0f 90       	pop	r0
    5df0:	cf 91       	pop	r28
    5df2:	df 91       	pop	r29
    5df4:	08 95       	ret

00005df6 <CheckDecrementSwitch>:
void CheckDecrementSwitch(void *pNULL )
{
    5df6:	df 93       	push	r29
    5df8:	cf 93       	push	r28
    5dfa:	00 d0       	rcall	.+0      	; 0x5dfc <CheckDecrementSwitch+0x6>
    5dfc:	0f 92       	push	r0
    5dfe:	cd b7       	in	r28, 0x3d	; 61
    5e00:	de b7       	in	r29, 0x3e	; 62
    5e02:	9b 83       	std	Y+3, r25	; 0x03
    5e04:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;

	if( ES_OK == Switch_enuGetPressed( DEC_SW , &Local_u8SwitchValue ) )
    5e06:	8b ec       	ldi	r24, 0xCB	; 203
    5e08:	9e 01       	movw	r18, r28
    5e0a:	2f 5f       	subi	r18, 0xFF	; 255
    5e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e0e:	b9 01       	movw	r22, r18
    5e10:	0e 94 8b 29 	call	0x5316	; 0x5316 <Switch_enuGetPressed>
    5e14:	88 23       	and	r24, r24
    5e16:	09 f0       	breq	.+2      	; 0x5e1a <CheckDecrementSwitch+0x24>
    5e18:	69 c0       	rjmp	.+210    	; 0x5eec <CheckDecrementSwitch+0xf6>
	{
		static u8 press = 0, BounceDelay = BOUNCE_COUNTS ;
		static u16 SetupDelay = SETUP_COUNTS ;

		if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 )  //First press
    5e1a:	89 81       	ldd	r24, Y+1	; 0x01
    5e1c:	81 30       	cpi	r24, 0x01	; 1
    5e1e:	51 f5       	brne	.+84     	; 0x5e74 <CheckDecrementSwitch+0x7e>
    5e20:	80 91 46 02 	lds	r24, 0x0246
    5e24:	88 23       	and	r24, r24
    5e26:	31 f5       	brne	.+76     	; 0x5e74 <CheckDecrementSwitch+0x7e>
		{
			if( Global_u8DisplayMode == NORMAL )
    5e28:	80 91 c0 01 	lds	r24, 0x01C0
    5e2c:	85 30       	cpi	r24, 0x05	; 5
    5e2e:	39 f4       	brne	.+14     	; 0x5e3e <CheckDecrementSwitch+0x48>
			{
				Global_u8DisplayMode = SETUP ;
    5e30:	89 e0       	ldi	r24, 0x09	; 9
    5e32:	80 93 c0 01 	sts	0x01C0, r24
				Global_u8SetupSw = DEC_SW ;
    5e36:	8b ec       	ldi	r24, 0xCB	; 203
    5e38:	80 93 c1 01 	sts	0x01C1, r24
    5e3c:	57 c0       	rjmp	.+174    	; 0x5eec <CheckDecrementSwitch+0xf6>
			}
			else
			{
				if( Global_u8SetupSw != DEC_SW )
    5e3e:	80 91 c1 01 	lds	r24, 0x01C1
    5e42:	8b 3c       	cpi	r24, 0xCB	; 203
    5e44:	19 f0       	breq	.+6      	; 0x5e4c <CheckDecrementSwitch+0x56>
				{
					Global_u8SetupSw = DEC_SW ;
    5e46:	8b ec       	ldi	r24, 0xCB	; 203
    5e48:	80 93 c1 01 	sts	0x01C1, r24
				}
				if( Global_u8TempSetValue > TEMP_MIN_LIMIT )
    5e4c:	80 91 49 02 	lds	r24, 0x0249
    5e50:	84 32       	cpi	r24, 0x24	; 36
    5e52:	08 f4       	brcc	.+2      	; 0x5e56 <CheckDecrementSwitch+0x60>
    5e54:	4b c0       	rjmp	.+150    	; 0x5eec <CheckDecrementSwitch+0xf6>
				{
					SetupDelay = SETUP_COUNTS;
    5e56:	8a e0       	ldi	r24, 0x0A	; 10
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	90 93 cd 01 	sts	0x01CD, r25
    5e5e:	80 93 cc 01 	sts	0x01CC, r24
					press = 1 ;
    5e62:	81 e0       	ldi	r24, 0x01	; 1
    5e64:	80 93 46 02 	sts	0x0246, r24
#if DEBUG == 1
					LedStatus = LD_OFF ;
#else
					Global_u8TempSetValue--;
    5e68:	80 91 49 02 	lds	r24, 0x0249
    5e6c:	81 50       	subi	r24, 0x01	; 1
    5e6e:	80 93 49 02 	sts	0x0249, r24
    5e72:	3c c0       	rjmp	.+120    	; 0x5eec <CheckDecrementSwitch+0xf6>
#endif
				}
			}
		}
		else if ( (Local_u8SwitchValue== DIO_u8LOW ) && press == 1 ) // removed first press
    5e74:	89 81       	ldd	r24, Y+1	; 0x01
    5e76:	88 23       	and	r24, r24
    5e78:	99 f4       	brne	.+38     	; 0x5ea0 <CheckDecrementSwitch+0xaa>
    5e7a:	80 91 46 02 	lds	r24, 0x0246
    5e7e:	81 30       	cpi	r24, 0x01	; 1
    5e80:	79 f4       	brne	.+30     	; 0x5ea0 <CheckDecrementSwitch+0xaa>
		{
			BounceDelay--;
    5e82:	80 91 ce 01 	lds	r24, 0x01CE
    5e86:	81 50       	subi	r24, 0x01	; 1
    5e88:	80 93 ce 01 	sts	0x01CE, r24
			if( !BounceDelay )
    5e8c:	80 91 ce 01 	lds	r24, 0x01CE
    5e90:	88 23       	and	r24, r24
    5e92:	61 f5       	brne	.+88     	; 0x5eec <CheckDecrementSwitch+0xf6>
			{
				press = 0 ;
    5e94:	10 92 46 02 	sts	0x0246, r1
				BounceDelay = BOUNCE_COUNTS ;
    5e98:	82 e0       	ldi	r24, 0x02	; 2
    5e9a:	80 93 ce 01 	sts	0x01CE, r24
    5e9e:	26 c0       	rjmp	.+76     	; 0x5eec <CheckDecrementSwitch+0xf6>
			}
		}
		else if (	( Global_u8SetupSw == DEC_SW )	&&	press == 0	&&
    5ea0:	80 91 c1 01 	lds	r24, 0x01C1
    5ea4:	8b 3c       	cpi	r24, 0xCB	; 203
    5ea6:	11 f5       	brne	.+68     	; 0x5eec <CheckDecrementSwitch+0xf6>
    5ea8:	80 91 46 02 	lds	r24, 0x0246
    5eac:	88 23       	and	r24, r24
    5eae:	f1 f4       	brne	.+60     	; 0x5eec <CheckDecrementSwitch+0xf6>
    5eb0:	89 81       	ldd	r24, Y+1	; 0x01
    5eb2:	88 23       	and	r24, r24
    5eb4:	d9 f4       	brne	.+54     	; 0x5eec <CheckDecrementSwitch+0xf6>
					(Local_u8SwitchValue == DIO_u8LOW ) )						 // Unpress delay in Setup mode
		{
			SetupDelay--;
    5eb6:	80 91 cc 01 	lds	r24, 0x01CC
    5eba:	90 91 cd 01 	lds	r25, 0x01CD
    5ebe:	01 97       	sbiw	r24, 0x01	; 1
    5ec0:	90 93 cd 01 	sts	0x01CD, r25
    5ec4:	80 93 cc 01 	sts	0x01CC, r24
			if( !SetupDelay )
    5ec8:	80 91 cc 01 	lds	r24, 0x01CC
    5ecc:	90 91 cd 01 	lds	r25, 0x01CD
    5ed0:	00 97       	sbiw	r24, 0x00	; 0
    5ed2:	61 f4       	brne	.+24     	; 0x5eec <CheckDecrementSwitch+0xf6>
			{
				TMU_vidResumeTask( 0 );
    5ed4:	80 e0       	ldi	r24, 0x00	; 0
    5ed6:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
				Global_u8SetupSw = NONE ;
    5eda:	87 e0       	ldi	r24, 0x07	; 7
    5edc:	80 93 c1 01 	sts	0x01C1, r24
				Global_u8DisplayMode = NORMAL ;
    5ee0:	85 e0       	ldi	r24, 0x05	; 5
    5ee2:	80 93 c0 01 	sts	0x01C0, r24
				SetTempUpdate = TRUE ;
    5ee6:	81 e0       	ldi	r24, 0x01	; 1
    5ee8:	80 93 c5 01 	sts	0x01C5, r24
			}
		}

	}
}
    5eec:	0f 90       	pop	r0
    5eee:	0f 90       	pop	r0
    5ef0:	0f 90       	pop	r0
    5ef2:	cf 91       	pop	r28
    5ef4:	df 91       	pop	r29
    5ef6:	08 95       	ret

00005ef8 <CheckPowerSwitch>:

void CheckPowerSwitch(void *pNULL )
{
    5ef8:	df 93       	push	r29
    5efa:	cf 93       	push	r28
    5efc:	00 d0       	rcall	.+0      	; 0x5efe <CheckPowerSwitch+0x6>
    5efe:	0f 92       	push	r0
    5f00:	cd b7       	in	r28, 0x3d	; 61
    5f02:	de b7       	in	r29, 0x3e	; 62
    5f04:	9b 83       	std	Y+3, r25	; 0x03
    5f06:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;

	if( ES_OK == Switch_enuGetPressed( PWR_SW , &Local_u8SwitchValue ) )
    5f08:	89 ec       	ldi	r24, 0xC9	; 201
    5f0a:	9e 01       	movw	r18, r28
    5f0c:	2f 5f       	subi	r18, 0xFF	; 255
    5f0e:	3f 4f       	sbci	r19, 0xFF	; 255
    5f10:	b9 01       	movw	r22, r18
    5f12:	0e 94 8b 29 	call	0x5316	; 0x5316 <Switch_enuGetPressed>
    5f16:	88 23       	and	r24, r24
    5f18:	09 f0       	breq	.+2      	; 0x5f1c <CheckPowerSwitch+0x24>
    5f1a:	49 c0       	rjmp	.+146    	; 0x5fae <CheckPowerSwitch+0xb6>
	{
		static u8 press = 0, BounceDelay = BOUNCE_COUNTS ;

		if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 )  //First press
    5f1c:	89 81       	ldd	r24, Y+1	; 0x01
    5f1e:	81 30       	cpi	r24, 0x01	; 1
    5f20:	89 f5       	brne	.+98     	; 0x5f84 <CheckPowerSwitch+0x8c>
    5f22:	80 91 47 02 	lds	r24, 0x0247
    5f26:	88 23       	and	r24, r24
    5f28:	69 f5       	brne	.+90     	; 0x5f84 <CheckPowerSwitch+0x8c>
		{
			press = 1 ;
    5f2a:	81 e0       	ldi	r24, 0x01	; 1
    5f2c:	80 93 47 02 	sts	0x0247, r24
			if( PowerStatus == OFF )
    5f30:	80 91 bd 01 	lds	r24, 0x01BD
    5f34:	81 30       	cpi	r24, 0x01	; 1
    5f36:	c1 f4       	brne	.+48     	; 0x5f68 <CheckPowerSwitch+0x70>
			{
				PowerStatus = ON ;
    5f38:	10 92 bd 01 	sts	0x01BD, r1
#if DEBUG == 1
				LedStatus = LD_OFF ;
#else
				TMU_vidResumeTask( 8 );
    5f3c:	88 e0       	ldi	r24, 0x08	; 8
    5f3e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
				TMU_vidResumeTask( 7 );
    5f42:	87 e0       	ldi	r24, 0x07	; 7
    5f44:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
				TMU_vidResumeTask( 6 );
    5f48:	86 e0       	ldi	r24, 0x06	; 6
    5f4a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
				TMU_vidResumeTask( 5 );
    5f4e:	85 e0       	ldi	r24, 0x05	; 5
    5f50:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
				TMU_vidResumeTask( 4 );
    5f54:	84 e0       	ldi	r24, 0x04	; 4
    5f56:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
				TMU_vidResumeTask( 3 );
    5f5a:	83 e0       	ldi	r24, 0x03	; 3
    5f5c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
				TMU_vidResumeTask( 2 );
    5f60:	82 e0       	ldi	r24, 0x02	; 2
    5f62:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMU_vidResumeTask>
    5f66:	23 c0       	rjmp	.+70     	; 0x5fae <CheckPowerSwitch+0xb6>
#endif
			}
			else if( PowerStatus == ON )
    5f68:	80 91 bd 01 	lds	r24, 0x01BD
    5f6c:	88 23       	and	r24, r24
    5f6e:	f9 f4       	brne	.+62     	; 0x5fae <CheckPowerSwitch+0xb6>
			{
				PowerStatus = OFF ;
    5f70:	81 e0       	ldi	r24, 0x01	; 1
    5f72:	80 93 bd 01 	sts	0x01BD, r24
#if DEBUG == 1
				LedStatus = LD_BLINK ;
#else
				TMU_vidPauseTask( 3 );
    5f76:	83 e0       	ldi	r24, 0x03	; 3
    5f78:	0e 94 c8 08 	call	0x1190	; 0x1190 <TMU_vidPauseTask>
				TMU_vidPauseTask( 2 );
    5f7c:	82 e0       	ldi	r24, 0x02	; 2
    5f7e:	0e 94 c8 08 	call	0x1190	; 0x1190 <TMU_vidPauseTask>
    5f82:	15 c0       	rjmp	.+42     	; 0x5fae <CheckPowerSwitch+0xb6>
#endif
			}
		}
		else if ( (Local_u8SwitchValue== DIO_u8LOW ) && press == 1 ) // removed first press
    5f84:	89 81       	ldd	r24, Y+1	; 0x01
    5f86:	88 23       	and	r24, r24
    5f88:	91 f4       	brne	.+36     	; 0x5fae <CheckPowerSwitch+0xb6>
    5f8a:	80 91 47 02 	lds	r24, 0x0247
    5f8e:	81 30       	cpi	r24, 0x01	; 1
    5f90:	71 f4       	brne	.+28     	; 0x5fae <CheckPowerSwitch+0xb6>
		{
			BounceDelay--;
    5f92:	80 91 cf 01 	lds	r24, 0x01CF
    5f96:	81 50       	subi	r24, 0x01	; 1
    5f98:	80 93 cf 01 	sts	0x01CF, r24
			if( !BounceDelay )
    5f9c:	80 91 cf 01 	lds	r24, 0x01CF
    5fa0:	88 23       	and	r24, r24
    5fa2:	29 f4       	brne	.+10     	; 0x5fae <CheckPowerSwitch+0xb6>
			{
				press = 0 ;
    5fa4:	10 92 47 02 	sts	0x0247, r1
				BounceDelay = BOUNCE_COUNTS ;
    5fa8:	82 e0       	ldi	r24, 0x02	; 2
    5faa:	80 93 cf 01 	sts	0x01CF, r24
			}
		}
	}
}
    5fae:	0f 90       	pop	r0
    5fb0:	0f 90       	pop	r0
    5fb2:	0f 90       	pop	r0
    5fb4:	cf 91       	pop	r28
    5fb6:	df 91       	pop	r29
    5fb8:	08 95       	ret

00005fba <AdjustRedLampStatus>:

void AdjustRedLampStatus(void *Copy_pu8RedLampStatus)		//	TASK PRIORITY = 4
{
    5fba:	df 93       	push	r29
    5fbc:	cf 93       	push	r28
    5fbe:	00 d0       	rcall	.+0      	; 0x5fc0 <AdjustRedLampStatus+0x6>
    5fc0:	00 d0       	rcall	.+0      	; 0x5fc2 <AdjustRedLampStatus+0x8>
    5fc2:	0f 92       	push	r0
    5fc4:	cd b7       	in	r28, 0x3d	; 61
    5fc6:	de b7       	in	r29, 0x3e	; 62
    5fc8:	9c 83       	std	Y+4, r25	; 0x04
    5fca:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8PrevStatus = LD_OFF ;
	u8 *Local_u8RedLampStatus = (u8*)Copy_pu8RedLampStatus;
    5fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    5fce:	9c 81       	ldd	r25, Y+4	; 0x04
    5fd0:	9a 83       	std	Y+2, r25	; 0x02
    5fd2:	89 83       	std	Y+1, r24	; 0x01

	if( *Local_u8RedLampStatus == LD_BLINK )
    5fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    5fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    5fd8:	80 81       	ld	r24, Z
    5fda:	83 31       	cpi	r24, 0x13	; 19
    5fdc:	89 f4       	brne	.+34     	; 0x6000 <AdjustRedLampStatus+0x46>
	{
		Local_u8PrevStatus = ( Local_u8PrevStatus == LD_ON )? LD_OFF : LD_ON ;
    5fde:	80 91 48 02 	lds	r24, 0x0248
    5fe2:	1d 82       	std	Y+5, r1	; 0x05
    5fe4:	81 30       	cpi	r24, 0x01	; 1
    5fe6:	11 f0       	breq	.+4      	; 0x5fec <AdjustRedLampStatus+0x32>
    5fe8:	81 e0       	ldi	r24, 0x01	; 1
    5fea:	8d 83       	std	Y+5, r24	; 0x05
    5fec:	8d 81       	ldd	r24, Y+5	; 0x05
    5fee:	80 93 48 02 	sts	0x0248, r24
		LD_enuSetState( RED_LD , Local_u8PrevStatus );
    5ff2:	90 91 48 02 	lds	r25, 0x0248
    5ff6:	8e e1       	ldi	r24, 0x1E	; 30
    5ff8:	69 2f       	mov	r22, r25
    5ffa:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <LD_enuSetState>
    5ffe:	12 c0       	rjmp	.+36     	; 0x6024 <AdjustRedLampStatus+0x6a>
	}
	else if( *Local_u8RedLampStatus != Local_u8PrevStatus)
    6000:	e9 81       	ldd	r30, Y+1	; 0x01
    6002:	fa 81       	ldd	r31, Y+2	; 0x02
    6004:	90 81       	ld	r25, Z
    6006:	80 91 48 02 	lds	r24, 0x0248
    600a:	98 17       	cp	r25, r24
    600c:	59 f0       	breq	.+22     	; 0x6024 <AdjustRedLampStatus+0x6a>
	{
		Local_u8PrevStatus = *Local_u8RedLampStatus ;
    600e:	e9 81       	ldd	r30, Y+1	; 0x01
    6010:	fa 81       	ldd	r31, Y+2	; 0x02
    6012:	80 81       	ld	r24, Z
    6014:	80 93 48 02 	sts	0x0248, r24
		LD_enuSetState( RED_LD , Local_u8PrevStatus );
    6018:	90 91 48 02 	lds	r25, 0x0248
    601c:	8e e1       	ldi	r24, 0x1E	; 30
    601e:	69 2f       	mov	r22, r25
    6020:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <LD_enuSetState>
	}
	if( PowerStatus == OFF )
    6024:	80 91 bd 01 	lds	r24, 0x01BD
    6028:	81 30       	cpi	r24, 0x01	; 1
    602a:	19 f4       	brne	.+6      	; 0x6032 <AdjustRedLampStatus+0x78>
	{
		TMU_vidPauseTask( 4 );							//	TASK Self Pause in case of POWER OFF Status
    602c:	84 e0       	ldi	r24, 0x04	; 4
    602e:	0e 94 c8 08 	call	0x1190	; 0x1190 <TMU_vidPauseTask>
	}
}
    6032:	0f 90       	pop	r0
    6034:	0f 90       	pop	r0
    6036:	0f 90       	pop	r0
    6038:	0f 90       	pop	r0
    603a:	0f 90       	pop	r0
    603c:	cf 91       	pop	r28
    603e:	df 91       	pop	r29
    6040:	08 95       	ret

00006042 <AdjustHeaterStatus>:

void AdjustHeaterStatus( void *pNULL)
{
    6042:	df 93       	push	r29
    6044:	cf 93       	push	r28
    6046:	00 d0       	rcall	.+0      	; 0x6048 <AdjustHeaterStatus+0x6>
    6048:	cd b7       	in	r28, 0x3d	; 61
    604a:	de b7       	in	r29, 0x3e	; 62
    604c:	9a 83       	std	Y+2, r25	; 0x02
    604e:	89 83       	std	Y+1, r24	; 0x01
	static OnOff_t PrevHeaterStatus = OFF;

	if( PrevHeaterStatus != HeaterStatus)
    6050:	90 91 d0 01 	lds	r25, 0x01D0
    6054:	80 91 be 01 	lds	r24, 0x01BE
    6058:	98 17       	cp	r25, r24
    605a:	81 f0       	breq	.+32     	; 0x607c <AdjustHeaterStatus+0x3a>
	{
		if( HeaterStatus == OFF )
    605c:	80 91 be 01 	lds	r24, 0x01BE
    6060:	81 30       	cpi	r24, 0x01	; 1
    6062:	31 f4       	brne	.+12     	; 0x6070 <AdjustHeaterStatus+0x2e>
		{
	//		Heater_enuSetState( (f32)( HTR_TEMP_TOLERANCE + 1.0 ));
			Heater_enuDisable();
    6064:	0e 94 43 2c 	call	0x5886	; 0x5886 <Heater_enuDisable>
			TMU_vidPauseTask( 6 );
    6068:	86 e0       	ldi	r24, 0x06	; 6
    606a:	0e 94 c8 08 	call	0x1190	; 0x1190 <TMU_vidPauseTask>
    606e:	02 c0       	rjmp	.+4      	; 0x6074 <AdjustHeaterStatus+0x32>
		}
		else
		{
	//		Heater_enuSetState( Global_s8TempError );
			Heater_enuEnable();
    6070:	0e 94 3a 2c 	call	0x5874	; 0x5874 <Heater_enuEnable>
		}
		PrevHeaterStatus = HeaterStatus ;
    6074:	80 91 be 01 	lds	r24, 0x01BE
    6078:	80 93 d0 01 	sts	0x01D0, r24
	}

}
    607c:	0f 90       	pop	r0
    607e:	0f 90       	pop	r0
    6080:	cf 91       	pop	r28
    6082:	df 91       	pop	r29
    6084:	08 95       	ret

00006086 <AdjustCoolentStatus>:

void AdjustCoolentStatus( void *pNULL)
{
    6086:	df 93       	push	r29
    6088:	cf 93       	push	r28
    608a:	00 d0       	rcall	.+0      	; 0x608c <AdjustCoolentStatus+0x6>
    608c:	cd b7       	in	r28, 0x3d	; 61
    608e:	de b7       	in	r29, 0x3e	; 62
    6090:	9a 83       	std	Y+2, r25	; 0x02
    6092:	89 83       	std	Y+1, r24	; 0x01
	static OnOff_t PrevCoolentStatus = OFF;

	if( PrevCoolentStatus != CoolentStatus)
    6094:	90 91 d1 01 	lds	r25, 0x01D1
    6098:	80 91 bf 01 	lds	r24, 0x01BF
    609c:	98 17       	cp	r25, r24
    609e:	81 f0       	breq	.+32     	; 0x60c0 <AdjustCoolentStatus+0x3a>
	{
		if( CoolentStatus == OFF )
    60a0:	80 91 bf 01 	lds	r24, 0x01BF
    60a4:	81 30       	cpi	r24, 0x01	; 1
    60a6:	31 f4       	brne	.+12     	; 0x60b4 <AdjustCoolentStatus+0x2e>
		{
	//		Coolent_enuSetState( (f32)( ( -COOLENT_TEMP_TOLERANCE ) - 1.0 ) );
			Coolent_enuDisable();
    60a8:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <Coolent_enuDisable>
			TMU_vidPauseTask( 5 );
    60ac:	85 e0       	ldi	r24, 0x05	; 5
    60ae:	0e 94 c8 08 	call	0x1190	; 0x1190 <TMU_vidPauseTask>
    60b2:	02 c0       	rjmp	.+4      	; 0x60b8 <AdjustCoolentStatus+0x32>
		}
		else
		{
	//		Coolent_enuSetState( Global_s8TempError );
			Coolent_enuEnable();
    60b4:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <Coolent_enuEnable>
		}
		PrevCoolentStatus = CoolentStatus ;
    60b8:	80 91 bf 01 	lds	r24, 0x01BF
    60bc:	80 93 d1 01 	sts	0x01D1, r24
	}
}
    60c0:	0f 90       	pop	r0
    60c2:	0f 90       	pop	r0
    60c4:	cf 91       	pop	r28
    60c6:	df 91       	pop	r29
    60c8:	08 95       	ret

000060ca <EEPROM_Access>:

void EEPROM_Access( void *Copy_u16SetTempAddress )
{
    60ca:	df 93       	push	r29
    60cc:	cf 93       	push	r28
    60ce:	00 d0       	rcall	.+0      	; 0x60d0 <EEPROM_Access+0x6>
    60d0:	00 d0       	rcall	.+0      	; 0x60d2 <EEPROM_Access+0x8>
    60d2:	0f 92       	push	r0
    60d4:	cd b7       	in	r28, 0x3d	; 61
    60d6:	de b7       	in	r29, 0x3e	; 62
    60d8:	9d 83       	std	Y+5, r25	; 0x05
    60da:	8c 83       	std	Y+4, r24	; 0x04
	u16 *Local_u16TempAddress = (u16*)Copy_u16SetTempAddress ;
    60dc:	8c 81       	ldd	r24, Y+4	; 0x04
    60de:	9d 81       	ldd	r25, Y+5	; 0x05
    60e0:	9a 83       	std	Y+2, r25	; 0x02
    60e2:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8StoredSetTemp = INIT_SET_TEMP ;
	u8 Local_u8SetTempSaveID ;

	if( Local_u8StoredSetTemp != Global_u8TempSetValue)
    60e4:	90 91 d2 01 	lds	r25, 0x01D2
    60e8:	80 91 49 02 	lds	r24, 0x0249
    60ec:	98 17       	cp	r25, r24
    60ee:	99 f1       	breq	.+102    	; 0x6156 <EEPROM_Access+0x8c>
	{
		if( ES_OK == EEPROM_enuReadByte( *Local_u16TempAddress , &Local_u8SetTempSaveID ) )
    60f0:	e9 81       	ldd	r30, Y+1	; 0x01
    60f2:	fa 81       	ldd	r31, Y+2	; 0x02
    60f4:	80 81       	ld	r24, Z
    60f6:	91 81       	ldd	r25, Z+1	; 0x01
    60f8:	9e 01       	movw	r18, r28
    60fa:	2d 5f       	subi	r18, 0xFD	; 253
    60fc:	3f 4f       	sbci	r19, 0xFF	; 255
    60fe:	b9 01       	movw	r22, r18
    6100:	0e 94 43 23 	call	0x4686	; 0x4686 <EEPROM_enuReadByte>
    6104:	88 23       	and	r24, r24
    6106:	19 f5       	brne	.+70     	; 0x614e <EEPROM_Access+0x84>
		{
			if( Local_u8SetTempSaveID != SetTempSaveID )
    6108:	9b 81       	ldd	r25, Y+3	; 0x03
    610a:	80 91 c4 01 	lds	r24, 0x01C4
    610e:	98 17       	cp	r25, r24
    6110:	71 f0       	breq	.+28     	; 0x612e <EEPROM_Access+0x64>
			{
				if( ES_OK == EEPROM_enuWriteByte( *Local_u16TempAddress , SetTempSaveID ) )
    6112:	e9 81       	ldd	r30, Y+1	; 0x01
    6114:	fa 81       	ldd	r31, Y+2	; 0x02
    6116:	80 81       	ld	r24, Z
    6118:	91 81       	ldd	r25, Z+1	; 0x01
    611a:	20 91 c4 01 	lds	r18, 0x01C4
    611e:	62 2f       	mov	r22, r18
    6120:	0e 94 05 23 	call	0x460a	; 0x460a <EEPROM_enuWriteByte>
    6124:	88 23       	and	r24, r24
    6126:	19 f4       	brne	.+6      	; 0x612e <EEPROM_Access+0x64>
					Global_u8TempSetValue = INIT_SET_TEMP ;
    6128:	8c e3       	ldi	r24, 0x3C	; 60
    612a:	80 93 49 02 	sts	0x0249, r24
			}
			if( ES_OK == EEPROM_enuWriteByte( *( Local_u16TempAddress + 1 ) , Global_u8TempSetValue ) )
    612e:	89 81       	ldd	r24, Y+1	; 0x01
    6130:	9a 81       	ldd	r25, Y+2	; 0x02
    6132:	fc 01       	movw	r30, r24
    6134:	32 96       	adiw	r30, 0x02	; 2
    6136:	80 81       	ld	r24, Z
    6138:	91 81       	ldd	r25, Z+1	; 0x01
    613a:	20 91 49 02 	lds	r18, 0x0249
    613e:	62 2f       	mov	r22, r18
    6140:	0e 94 05 23 	call	0x460a	; 0x460a <EEPROM_enuWriteByte>
    6144:	88 23       	and	r24, r24
    6146:	19 f4       	brne	.+6      	; 0x614e <EEPROM_Access+0x84>
				TMU_vidPauseTask( 0 );
    6148:	80 e0       	ldi	r24, 0x00	; 0
    614a:	0e 94 c8 08 	call	0x1190	; 0x1190 <TMU_vidPauseTask>
		}
		Local_u8StoredSetTemp = Global_u8TempSetValue ;
    614e:	80 91 49 02 	lds	r24, 0x0249
    6152:	80 93 d2 01 	sts	0x01D2, r24
	}
	SetTempUpdate = FALSE ;
    6156:	10 92 c5 01 	sts	0x01C5, r1
}
    615a:	0f 90       	pop	r0
    615c:	0f 90       	pop	r0
    615e:	0f 90       	pop	r0
    6160:	0f 90       	pop	r0
    6162:	0f 90       	pop	r0
    6164:	cf 91       	pop	r28
    6166:	df 91       	pop	r29
    6168:	08 95       	ret

0000616a <__mulsi3>:
    616a:	62 9f       	mul	r22, r18
    616c:	d0 01       	movw	r26, r0
    616e:	73 9f       	mul	r23, r19
    6170:	f0 01       	movw	r30, r0
    6172:	82 9f       	mul	r24, r18
    6174:	e0 0d       	add	r30, r0
    6176:	f1 1d       	adc	r31, r1
    6178:	64 9f       	mul	r22, r20
    617a:	e0 0d       	add	r30, r0
    617c:	f1 1d       	adc	r31, r1
    617e:	92 9f       	mul	r25, r18
    6180:	f0 0d       	add	r31, r0
    6182:	83 9f       	mul	r24, r19
    6184:	f0 0d       	add	r31, r0
    6186:	74 9f       	mul	r23, r20
    6188:	f0 0d       	add	r31, r0
    618a:	65 9f       	mul	r22, r21
    618c:	f0 0d       	add	r31, r0
    618e:	99 27       	eor	r25, r25
    6190:	72 9f       	mul	r23, r18
    6192:	b0 0d       	add	r27, r0
    6194:	e1 1d       	adc	r30, r1
    6196:	f9 1f       	adc	r31, r25
    6198:	63 9f       	mul	r22, r19
    619a:	b0 0d       	add	r27, r0
    619c:	e1 1d       	adc	r30, r1
    619e:	f9 1f       	adc	r31, r25
    61a0:	bd 01       	movw	r22, r26
    61a2:	cf 01       	movw	r24, r30
    61a4:	11 24       	eor	r1, r1
    61a6:	08 95       	ret

000061a8 <__udivmodqi4>:
    61a8:	99 1b       	sub	r25, r25
    61aa:	79 e0       	ldi	r23, 0x09	; 9
    61ac:	04 c0       	rjmp	.+8      	; 0x61b6 <__udivmodqi4_ep>

000061ae <__udivmodqi4_loop>:
    61ae:	99 1f       	adc	r25, r25
    61b0:	96 17       	cp	r25, r22
    61b2:	08 f0       	brcs	.+2      	; 0x61b6 <__udivmodqi4_ep>
    61b4:	96 1b       	sub	r25, r22

000061b6 <__udivmodqi4_ep>:
    61b6:	88 1f       	adc	r24, r24
    61b8:	7a 95       	dec	r23
    61ba:	c9 f7       	brne	.-14     	; 0x61ae <__udivmodqi4_loop>
    61bc:	80 95       	com	r24
    61be:	08 95       	ret

000061c0 <__udivmodhi4>:
    61c0:	aa 1b       	sub	r26, r26
    61c2:	bb 1b       	sub	r27, r27
    61c4:	51 e1       	ldi	r21, 0x11	; 17
    61c6:	07 c0       	rjmp	.+14     	; 0x61d6 <__udivmodhi4_ep>

000061c8 <__udivmodhi4_loop>:
    61c8:	aa 1f       	adc	r26, r26
    61ca:	bb 1f       	adc	r27, r27
    61cc:	a6 17       	cp	r26, r22
    61ce:	b7 07       	cpc	r27, r23
    61d0:	10 f0       	brcs	.+4      	; 0x61d6 <__udivmodhi4_ep>
    61d2:	a6 1b       	sub	r26, r22
    61d4:	b7 0b       	sbc	r27, r23

000061d6 <__udivmodhi4_ep>:
    61d6:	88 1f       	adc	r24, r24
    61d8:	99 1f       	adc	r25, r25
    61da:	5a 95       	dec	r21
    61dc:	a9 f7       	brne	.-22     	; 0x61c8 <__udivmodhi4_loop>
    61de:	80 95       	com	r24
    61e0:	90 95       	com	r25
    61e2:	bc 01       	movw	r22, r24
    61e4:	cd 01       	movw	r24, r26
    61e6:	08 95       	ret

000061e8 <__divmodhi4>:
    61e8:	97 fb       	bst	r25, 7
    61ea:	09 2e       	mov	r0, r25
    61ec:	07 26       	eor	r0, r23
    61ee:	0a d0       	rcall	.+20     	; 0x6204 <__divmodhi4_neg1>
    61f0:	77 fd       	sbrc	r23, 7
    61f2:	04 d0       	rcall	.+8      	; 0x61fc <__divmodhi4_neg2>
    61f4:	e5 df       	rcall	.-54     	; 0x61c0 <__udivmodhi4>
    61f6:	06 d0       	rcall	.+12     	; 0x6204 <__divmodhi4_neg1>
    61f8:	00 20       	and	r0, r0
    61fa:	1a f4       	brpl	.+6      	; 0x6202 <__divmodhi4_exit>

000061fc <__divmodhi4_neg2>:
    61fc:	70 95       	com	r23
    61fe:	61 95       	neg	r22
    6200:	7f 4f       	sbci	r23, 0xFF	; 255

00006202 <__divmodhi4_exit>:
    6202:	08 95       	ret

00006204 <__divmodhi4_neg1>:
    6204:	f6 f7       	brtc	.-4      	; 0x6202 <__divmodhi4_exit>
    6206:	90 95       	com	r25
    6208:	81 95       	neg	r24
    620a:	9f 4f       	sbci	r25, 0xFF	; 255
    620c:	08 95       	ret

0000620e <__udivmodsi4>:
    620e:	a1 e2       	ldi	r26, 0x21	; 33
    6210:	1a 2e       	mov	r1, r26
    6212:	aa 1b       	sub	r26, r26
    6214:	bb 1b       	sub	r27, r27
    6216:	fd 01       	movw	r30, r26
    6218:	0d c0       	rjmp	.+26     	; 0x6234 <__udivmodsi4_ep>

0000621a <__udivmodsi4_loop>:
    621a:	aa 1f       	adc	r26, r26
    621c:	bb 1f       	adc	r27, r27
    621e:	ee 1f       	adc	r30, r30
    6220:	ff 1f       	adc	r31, r31
    6222:	a2 17       	cp	r26, r18
    6224:	b3 07       	cpc	r27, r19
    6226:	e4 07       	cpc	r30, r20
    6228:	f5 07       	cpc	r31, r21
    622a:	20 f0       	brcs	.+8      	; 0x6234 <__udivmodsi4_ep>
    622c:	a2 1b       	sub	r26, r18
    622e:	b3 0b       	sbc	r27, r19
    6230:	e4 0b       	sbc	r30, r20
    6232:	f5 0b       	sbc	r31, r21

00006234 <__udivmodsi4_ep>:
    6234:	66 1f       	adc	r22, r22
    6236:	77 1f       	adc	r23, r23
    6238:	88 1f       	adc	r24, r24
    623a:	99 1f       	adc	r25, r25
    623c:	1a 94       	dec	r1
    623e:	69 f7       	brne	.-38     	; 0x621a <__udivmodsi4_loop>
    6240:	60 95       	com	r22
    6242:	70 95       	com	r23
    6244:	80 95       	com	r24
    6246:	90 95       	com	r25
    6248:	9b 01       	movw	r18, r22
    624a:	ac 01       	movw	r20, r24
    624c:	bd 01       	movw	r22, r26
    624e:	cf 01       	movw	r24, r30
    6250:	08 95       	ret

00006252 <__prologue_saves__>:
    6252:	2f 92       	push	r2
    6254:	3f 92       	push	r3
    6256:	4f 92       	push	r4
    6258:	5f 92       	push	r5
    625a:	6f 92       	push	r6
    625c:	7f 92       	push	r7
    625e:	8f 92       	push	r8
    6260:	9f 92       	push	r9
    6262:	af 92       	push	r10
    6264:	bf 92       	push	r11
    6266:	cf 92       	push	r12
    6268:	df 92       	push	r13
    626a:	ef 92       	push	r14
    626c:	ff 92       	push	r15
    626e:	0f 93       	push	r16
    6270:	1f 93       	push	r17
    6272:	cf 93       	push	r28
    6274:	df 93       	push	r29
    6276:	cd b7       	in	r28, 0x3d	; 61
    6278:	de b7       	in	r29, 0x3e	; 62
    627a:	ca 1b       	sub	r28, r26
    627c:	db 0b       	sbc	r29, r27
    627e:	0f b6       	in	r0, 0x3f	; 63
    6280:	f8 94       	cli
    6282:	de bf       	out	0x3e, r29	; 62
    6284:	0f be       	out	0x3f, r0	; 63
    6286:	cd bf       	out	0x3d, r28	; 61
    6288:	09 94       	ijmp

0000628a <__epilogue_restores__>:
    628a:	2a 88       	ldd	r2, Y+18	; 0x12
    628c:	39 88       	ldd	r3, Y+17	; 0x11
    628e:	48 88       	ldd	r4, Y+16	; 0x10
    6290:	5f 84       	ldd	r5, Y+15	; 0x0f
    6292:	6e 84       	ldd	r6, Y+14	; 0x0e
    6294:	7d 84       	ldd	r7, Y+13	; 0x0d
    6296:	8c 84       	ldd	r8, Y+12	; 0x0c
    6298:	9b 84       	ldd	r9, Y+11	; 0x0b
    629a:	aa 84       	ldd	r10, Y+10	; 0x0a
    629c:	b9 84       	ldd	r11, Y+9	; 0x09
    629e:	c8 84       	ldd	r12, Y+8	; 0x08
    62a0:	df 80       	ldd	r13, Y+7	; 0x07
    62a2:	ee 80       	ldd	r14, Y+6	; 0x06
    62a4:	fd 80       	ldd	r15, Y+5	; 0x05
    62a6:	0c 81       	ldd	r16, Y+4	; 0x04
    62a8:	1b 81       	ldd	r17, Y+3	; 0x03
    62aa:	aa 81       	ldd	r26, Y+2	; 0x02
    62ac:	b9 81       	ldd	r27, Y+1	; 0x01
    62ae:	ce 0f       	add	r28, r30
    62b0:	d1 1d       	adc	r29, r1
    62b2:	0f b6       	in	r0, 0x3f	; 63
    62b4:	f8 94       	cli
    62b6:	de bf       	out	0x3e, r29	; 62
    62b8:	0f be       	out	0x3f, r0	; 63
    62ba:	cd bf       	out	0x3d, r28	; 61
    62bc:	ed 01       	movw	r28, r26
    62be:	08 95       	ret

000062c0 <_exit>:
    62c0:	f8 94       	cli

000062c2 <__stop_program>:
    62c2:	ff cf       	rjmp	.-2      	; 0x62c2 <__stop_program>
